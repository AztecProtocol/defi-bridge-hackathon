"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumBlockchain = void 0;
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
const debug_1 = __importDefault(require("debug"));
const events_1 = require("events");
const contracts_1 = require("./contracts");
const hash_data_1 = require("./hash_data");
const validate_signature_1 = require("./validate_signature");
class EthereumBlockchain extends events_1.EventEmitter {
    constructor(config, contracts) {
        super();
        this.config = config;
        this.contracts = contracts;
        this.running = false;
        this.latestEthBlock = -1;
        this.latestRollupId = -1;
        this.debug = config.console === false ? debug_1.default('bb:ethereum_blockchain') : console.log;
    }
    static async new(config, rollupContractAddress, priceFeedContractAddresses, provider) {
        const confirmations = config.minConfirmation || EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS;
        const contracts = new contracts_1.Contracts(rollupContractAddress, priceFeedContractAddresses, provider, confirmations);
        await contracts.init();
        const eb = new EthereumBlockchain(config, contracts);
        await eb.init();
        return eb;
    }
    async init() {
        await this.initStatus();
        this.debug(`Ethereum blockchain initialized with assets: ${this.status.assets.map(a => a.symbol)}`);
    }
    /**
     * Start polling for RollupProcessed events.
     * All historical blocks will have been emitted before this function returns.
     */
    async start(fromRollup = 0) {
        this.debug(`Ethereum blockchain starting from rollup: ${fromRollup}`);
        const getBlocks = async (fromRollup) => {
            while (true) {
                try {
                    return await this.getBlocks(fromRollup);
                }
                catch (err) {
                    this.debug(`getBlocks failed, will retry: ${err.message}`);
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
            }
        };
        const emitBlocks = async () => {
            const latestBlock = await this.contracts.getBlockNumber().catch(err => {
                this.debug(`getBlockNumber failed: ${err.code}`);
                return this.latestEthBlock;
            });
            if (latestBlock === this.latestEthBlock) {
                return;
            }
            this.latestEthBlock = latestBlock;
            await this.updatePerBlockState();
            const blocks = await getBlocks(fromRollup);
            if (blocks.length) {
                await this.updatePerRollupState();
            }
            for (const block of blocks) {
                this.debug(`Block received: ${block.rollupId}`);
                this.latestRollupId = block.rollupId;
                this.emit('block', block);
                fromRollup = block.rollupId + 1;
            }
        };
        // We must have emitted all historical blocks before returning.
        await emitBlocks();
        // After which, we asynchronously kick off a polling loop for the latest blocks.
        this.running = true;
        (async () => {
            while (this.running) {
                await new Promise(resolve => setTimeout(resolve, this.config.pollInterval || 10000));
                await emitBlocks().catch(this.debug);
            }
        })();
    }
    /**
     * Stop polling for RollupProcessed events
     */
    async stop() {
        this.running = false;
        this.removeAllListeners();
    }
    /**
     * Get the status of the rollup contract
     */
    async getBlockchainStatus(refresh = false) {
        if (refresh) {
            await this.initStatus();
        }
        return this.status;
    }
    async initStatus() {
        await this.updatePerRollupState();
        await this.updatePerBlockState();
        const { chainId } = await this.contracts.getNetwork();
        const assets = this.contracts.getAssets().map(a => a.getStaticInfo());
        this.status = {
            ...this.status,
            chainId,
            rollupContractAddress: this.contracts.getRollupContractAddress(),
            feeDistributorContractAddress: this.contracts.getFeeDistributorContractAddress(),
            assets,
        };
    }
    async updatePerRollupState() {
        this.status = {
            ...this.status,
            ...(await this.contracts.getPerRollupState()),
        };
    }
    async updatePerBlockState() {
        this.status = {
            ...this.status,
            ...(await this.contracts.getPerBlockState()),
        };
    }
    getLatestRollupId() {
        return this.latestRollupId;
    }
    async getUserPendingDeposit(assetId, account) {
        return this.contracts.getUserPendingDeposit(assetId, account);
    }
    async getUserProofApprovalStatus(account, signingData) {
        const proofHash = hash_data_1.hashData(signingData);
        return this.contracts.getUserProofApprovalStatus(account, proofHash);
    }
    async setSupportedAsset(assetAddress, supportsPermit, signingAddress) {
        return this.contracts.setSupportedAsset(assetAddress, supportsPermit, signingAddress);
    }
    async createRollupProofTx(proofData, signatures, viewingKeys, providerSignature, providerAddress, feeReceiver, feeLimit) {
        return await this.contracts.createRollupProofTx(proofData, signatures, viewingKeys, providerSignature, providerAddress, feeReceiver, feeLimit);
    }
    async createEscapeHatchProofTx(proofData, viewingKeys, depositSignature, signingAddress) {
        return await this.contracts.createEscapeHatchProofTx(proofData, viewingKeys, depositSignature ? [depositSignature] : [], signingAddress);
    }
    sendTx(tx, options = {}) {
        options = { ...options, gasLimit: options.gasLimit || this.config.gasLimit };
        return this.contracts.sendTx(tx, options);
    }
    getRequiredConfirmations() {
        const { escapeOpen, numEscapeBlocksRemaining } = this.status;
        const { minConfirmation = EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS, minConfirmationEHW = EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS_EHW, } = this.config;
        return escapeOpen || numEscapeBlocksRemaining <= minConfirmationEHW ? minConfirmationEHW : minConfirmation;
    }
    /**
     * Get all created rollup blocks from `rollupId`.
     */
    async getBlocks(rollupId) {
        const minConfirmations = this.getRequiredConfirmations();
        return await this.contracts.getRollupBlocksFrom(rollupId, minConfirmations);
    }
    /**
     * Wait for given transaction to be mined, and return receipt.
     */
    async getTransactionReceipt(txHash) {
        const confs = this.config.minConfirmation || EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS;
        this.debug(`Getting tx receipt for ${txHash}... (${confs} confirmations)`);
        let txReceipt = await this.contracts.getTransactionReceipt(txHash);
        while (!txReceipt || txReceipt.confirmations < confs) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            txReceipt = await this.contracts.getTransactionReceipt(txHash);
        }
        return { status: !!txReceipt.status, blockNum: txReceipt.blockNumber };
    }
    async getTransactionReceiptSafe(txHash) {
        const confs = this.getRequiredConfirmations();
        this.debug(`Getting tx receipt for ${txHash} (${confs} confs)...`);
        let txReceipt = await this.contracts.getTransactionReceipt(txHash);
        while (!txReceipt || txReceipt.confirmations < confs) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            txReceipt = await this.contracts.getTransactionReceipt(txHash);
        }
        return { status: !!txReceipt.status, blockNum: txReceipt.blockNumber };
    }
    /**
     * Validate locally that a signature was produced by a publicOwner
     */
    validateSignature(publicOwner, signature, signingData) {
        return validate_signature_1.validateSignature(publicOwner, signature, signingData);
    }
    async signMessage(message, address) {
        return this.contracts.signMessage(message, address);
    }
    async signTypedData(data, address) {
        return this.contracts.signTypedData(data, address);
    }
    getAsset(assetId) {
        return this.contracts.getAsset(assetId);
    }
    async getAssetPrice(assetId) {
        return this.contracts.getAssetPrice(assetId);
    }
    getPriceFeed(assetId) {
        return this.contracts.getPriceFeed(assetId);
    }
    getGasPriceFeed() {
        return this.contracts.getGasPriceFeed();
    }
    async getBridgeId(address) {
        try {
            return await this.contracts.getBridgeId(address);
        }
        catch (e) {
            this.debug(e);
            return bridge_id_1.BridgeId.ZERO;
        }
    }
    async isContract(address) {
        return this.contracts.isContract(address);
    }
    async getGasPrice() {
        return this.contracts.getGasPrice();
    }
    async estimateGas(data) {
        return this.contracts.estimateGas(data);
    }
}
exports.EthereumBlockchain = EthereumBlockchain;
EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS = 3;
EthereumBlockchain.DEFAULT_MIN_CONFIRMATIONS_EHW = 12;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1fYmxvY2tjaGFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ldGhlcmV1bV9ibG9ja2NoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDZEQUF5RDtBQUV6RCxrREFBZ0M7QUFDaEMsbUNBQXNDO0FBQ3RDLDJDQUF3QztBQUV4QywyQ0FBdUM7QUFDdkMsNkRBQXlEO0FBVXpELE1BQWEsa0JBQW1CLFNBQVEscUJBQVk7SUFVbEQsWUFBb0IsTUFBZ0MsRUFBVSxTQUFvQjtRQUNoRixLQUFLLEVBQUUsQ0FBQztRQURVLFdBQU0sR0FBTixNQUFNLENBQTBCO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVztRQVQxRSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLG1CQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsbUJBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQVMxQixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUM5RixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ2QsTUFBZ0MsRUFDaEMscUJBQWlDLEVBQ2pDLDBCQUF3QyxFQUN4QyxRQUEwQjtRQUUxQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsZUFBZSxJQUFJLGtCQUFrQixDQUFDLHlCQUF5QixDQUFDO1FBQzdGLE1BQU0sU0FBUyxHQUFHLElBQUkscUJBQVMsQ0FBQyxxQkFBcUIsRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDNUcsTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxFQUFFLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckQs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