"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const ethers_1 = require("ethers");
const address_1 = require("@aztec/barretenberg/address");
const ethers_adapter_1 = require("./ethers_adapter");
const providers_1 = require("@ethersproject/providers");
/**
 * Given an EIP1193 provider, wraps it, and provides the ability to add local accounts.
 */
class WalletProvider {
    constructor(provider) {
        this.provider = provider;
        this.accounts = [];
    }
    static fromHost(ethereumHost) {
        const ethersProvider = new providers_1.JsonRpcProvider(ethereumHost);
        return new WalletProvider(new ethers_adapter_1.EthersAdapter(ethersProvider));
    }
    addAccount(privateKey) {
        return this.addEthersWallet(new ethers_1.Wallet(privateKey));
    }
    addEthersWallet(wallet) {
        this.accounts.push(wallet);
        return address_1.EthAddress.fromString(wallet.address);
    }
    getAccounts() {
        return this.accounts.map(a => address_1.EthAddress.fromString(a.address));
    }
    getAccount(account) {
        return address_1.EthAddress.fromString(this.accounts[account].address);
    }
    getPrivateKey(account) {
        return Buffer.from(this.accounts[account].privateKey.slice(2), 'hex');
    }
    getPrivateKeyForAddress(account) {
        const wallet = this.accounts.find(w => account.equals(address_1.EthAddress.fromString(w.address)));
        return wallet ? Buffer.from(wallet.privateKey.slice(2), 'hex') : undefined;
    }
    async request(args) {
        switch (args.method) {
            case 'eth_accounts':
                return this.accounts.length ? this.accounts.map(a => a.address) : await this.provider.request(args);
            case 'eth_sign':
                return await this.sign(args);
            case 'eth_signTypedData_v4':
                return this.signTypedData(args);
            case 'eth_signTransaction':
                return this.signTransaction(args);
            case 'eth_sendTransaction':
                return this.sendTransaction(args);
            default: {
                return await this.provider.request(args);
            }
        }
    }
    async sign(args) {
        const [from, message] = args.params;
        const account = this.accounts.find(a => a.address.toLowerCase() === from);
        if (account) {
            return await account.signMessage(Buffer.from(message.slice(2), 'hex'));
        }
        return await this.provider.request(args);
    }
    async signTypedData(args) {
        const [from, data] = args.params;
        const { types, domain, message } = JSON.parse(data);
        const account = this.accounts.find(a => a.address.toLowerCase() === from);
        if (account) {
            delete types.EIP712Domain;
            return await account._signTypedData(domain, types, message);
        }
        return this.provider.request(args);
    }
    /**
     * Given a tx in Eth Json Rpc format, convert to ethers format and give to account to sign.
     * Populate any missing fields.
     */
    async signTxLocally(tx, account) {
        const gasLimit = tx.gas || 7000000;
        const gasPrice = tx.gasPrice || (await this.provider.request({ method: 'eth_gasPrice' }));
        const value = tx.value || 0;
        const chainId = +(await this.provider.request({ method: 'eth_chainId' }));
        const nonce = tx.nonce || (await this.provider.request({ method: 'eth_getTransactionCount', params: [tx.from, 'latest'] }));
        const toSign = {
            chainId,
            from: tx.from,
            to: tx.to,
            data: tx.data,
            gasLimit,
            gasPrice,
            value,
            nonce,
        };
        return await account.signTransaction(toSign);
    }
    async signTransaction(args) {
        const tx = args.params[0];
        const account = this.accounts.find(a => a.address.toLowerCase() === tx.from.toLowerCase());
        if (account) {
            return this.signTxLocally(tx, account);
        }
        return this.provider.request(args);
    }
    async sendTransaction(args) {
        const tx = args.params[0];
        const account = this.accounts.find(a => a.address.toLowerCase() === tx.from.toLowerCase());
        if (account) {
            const result = await this.signTxLocally(tx, account);
            return this.provider.request({ method: 'eth_sendRawTransaction', params: [result] });
        }
        return this.provider.request(args);
    }
    on(notification, listener) {
        return this.provider.on(notification, listener);
    }
    removeListener(notification, listener) {
        return this.provider.removeListener(notification, listener);
    }
}
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0X3Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb3ZpZGVyL3dhbGxldF9wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSxtQ0FBZ0M7QUFDaEMseURBQXlEO0FBQ3pELHFEQUFpRDtBQUNqRCx3REFBK0U7QUFFL0U7O0dBRUc7QUFDSCxNQUFhLGNBQWM7SUFHekIsWUFBb0IsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7UUFGdEMsYUFBUSxHQUFhLEVBQUUsQ0FBQztJQUVpQixDQUFDO0lBRTNDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBb0I7UUFDekMsTUFBTSxjQUFjLEdBQUcsSUFBSSwyQkFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pELE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSw4QkFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLFVBQVUsQ0FBQyxVQUFrQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxlQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sZUFBZSxDQUFDLE1BQWM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsT0FBTyxvQkFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxVQUFVLENBQUMsT0FBZTtRQUMvQixPQUFPLG9CQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxD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