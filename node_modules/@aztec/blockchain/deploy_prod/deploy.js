"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const ethers_1 = require("ethers");
const RollupProcessor_json_1 = __importDefault(require("../artifacts/contracts/RollupProcessor.sol/RollupProcessor.json"));
const deploy_fee_distributor_1 = require("./fee_distributor/deploy_fee_distributor");
const deploy_verifier_1 = require("./deploy_verifier");
const deploy_defi_bridge_proxy_1 = require("../deploy/deploy_defi_bridge_proxy");
async function deploy(escapeHatchBlockLower, escapeHatchBlockUpper, uniswapRouterAddress, wethAddress, multiSigAddr, signer) {
    const verifier = await deploy_verifier_1.deployVerifier(signer);
    const defiBridgeProxy = await deploy_defi_bridge_proxy_1.deployDefiBridgeProxy(signer, wethAddress);
    console.error('Deploying RollupProcessor...');
    const rollupFactory = new ethers_1.ContractFactory(RollupProcessor_json_1.default.abi, RollupProcessor_json_1.default.bytecode, signer);
    const ownerAddress = await signer.getAddress();
    const rollup = await rollupFactory.deploy(verifier.address, escapeHatchBlockLower, escapeHatchBlockUpper, defiBridgeProxy.address, wethAddress, ownerAddress);
    console.error(`Awaiting deployment...`);
    await rollup.deployed();
    console.error(`Rollup contract address: ${rollup.address}`);
    const feeDistributor = await deploy_fee_distributor_1.deployFeeDistributor(signer, rollup.address, uniswapRouterAddress);
    rollup.setFeeDistributor(feeDistributor.address);
    const response = await rollup.transferOwnership(multiSigAddr);
    const receipt = await response.wait();
    if (!receipt.status) {
        throw new Error('Deployment failed.');
    }
    return { rollup, feeDistributor };
}
exports.deploy = deploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlcGxveV9wcm9kL2RlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBaUQ7QUFFakQsMkhBQThGO0FBQzlGLHFGQUFnRjtBQUNoRix1REFBbUQ7QUFDbkQsaUZBQTJFO0FBRXBFLEtBQUssVUFBVSxNQUFNLENBQzFCLHFCQUE2QixFQUM3QixxQkFBNkIsRUFDN0Isb0JBQTRCLEVBQzVCLFdBQW1CLEVBQ25CLFlBQW9CLEVBQ3BCLE1BQWM7SUFFZCxNQUFNLFFBQVEsR0FBRyxNQUFNLGdDQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFOUMsTUFBTSxlQUFlLEdBQUcsTUFBTSxnREFBcUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFekUsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sYUFBYSxHQUFHLElBQUksd0JBQWUsQ0FBQyw4QkFBZSxDQUFDLEdBQUcsRUFBRSw4QkFBZSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRyxNQUFNLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMvQyxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLFFBQVEsQ0FBQyxPQUFPLEVBQ2hCLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIsZUFBZSxDQUFDLE9BQU8sRUFDdkIsV0FBVyxFQUNYLFlBQVksQ0FDYixDQUFDO0lBRUYsT0FBTyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRTVELE1BQU0sY0FBYyxHQUFHLE1BQU0sNkNBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUNoRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRWpELE1BQU0sUUFBUSxHQUF3QixNQUFNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRixNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV0QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDO0FBQ3BDLENBQUM7QUF2Q0Qsd0JBdUNDIn0=