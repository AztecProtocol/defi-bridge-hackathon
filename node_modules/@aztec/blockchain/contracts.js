"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contracts = void 0;
const providers_1 = require("@ethersproject/providers");
const address_1 = require("@aztec/barretenberg/address");
const tx_hash_1 = require("@aztec/barretenberg/tx_hash");
const ethers_1 = require("ethers");
const IDefiBridge_json_1 = require("./artifacts/contracts/interfaces/IDefiBridge.sol/IDefiBridge.json");
const IFeeDistributor_json_1 = require("./artifacts/contracts/interfaces/IFeeDistributor.sol/IFeeDistributor.json");
const asset_1 = require("./asset");
const price_feed_1 = require("./price_feed");
const rollup_processor_1 = require("./rollup_processor");
const signer_1 = require("./signer");
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
class Contracts {
    constructor(rollupContractAddress, priceFeedContractAddresses, ethereumProvider, confirmations) {
        this.rollupContractAddress = rollupContractAddress;
        this.priceFeedContractAddresses = priceFeedContractAddresses;
        this.confirmations = confirmations;
        this.provider = new providers_1.Web3Provider(ethereumProvider);
        this.signer = new signer_1.Web3Signer(this.provider);
        this.rollupProcessor = new rollup_processor_1.RollupProcessor(rollupContractAddress, this.provider);
    }
    async init() {
        this.feeDistributorContractAddress = await this.rollupProcessor.feeDistributor();
        this.feeDistributorContract = new ethers_1.Contract(this.feeDistributorContractAddress.toString(), IFeeDistributor_json_1.abi, this.provider);
        const assetAddresses = await this.rollupProcessor.getSupportedAssets();
        const tokenAssets = await Promise.all(assetAddresses.map(async (addr, i) => asset_1.TokenAsset.fromAddress(addr, this.provider, await this.rollupProcessor.getAssetPermitSupport(i + 1), this.confirmations)));
        this.assets = [new asset_1.EthAsset(this.provider), ...tokenAssets];
        const [gasPriceFeedAddress, ...tokenPriceFeedAddresses] = this.priceFeedContractAddresses;
        if (gasPriceFeedAddress) {
            this.gasPriceFeed = new price_feed_1.GasPriceFeed(gasPriceFeedAddress, this.provider);
            this.priceFeeds = [new price_feed_1.EthPriceFeed(), ...tokenPriceFeedAddresses.map(a => new price_feed_1.TokenPriceFeed(a, this.provider))];
        }
    }
    async setSupportedAsset(assetAddress, supportsPermit, signingAddress) {
        const signer = signingAddress ? this.provider.getSigner(signingAddress.toString()) : this.provider.getSigner(0);
        const tx = await this.rollupProcessor.setSupportedAsset(assetAddress, supportsPermit, signer);
        const tokenAsset = await asset_1.TokenAsset.fromAddress(assetAddress, this.provider, supportsPermit);
        this.assets.push(tokenAsset);
        return tx;
    }
    async getAssetValues(promise) {
        const padding = Array(this.assets.length).fill(BigInt(0));
        return [...(await promise), ...padding].slice(0, padding.length);
    }
    async getPerRollupState() {
        const nextRollupId = await this.rollupProcessor.nextRollupId();
        const dataSize = await this.rollupProcessor.dataSize();
        const dataRoot = await this.rollupProcessor.dataRoot();
        const nullRoot = await this.rollupProcessor.nullRoot();
        const rootRoot = await this.rollupProcessor.rootRoot();
        const defiRoot = await this.rollupProcessor.defiRoot();
        const defiInteractionHash = await this.rollupProcessor.defiInteractionHash();
        const totalDeposited = await this.getAssetValues(this.rollupProcessor.totalDeposited());
        const totalWithdrawn = await this.getAssetValues(this.rollupProcessor.totalWithdrawn());
        const totalFees = await this.getAssetValues(this.rollupProcessor.totalFees());
        return {
            nextRollupId,
            dataRoot,
            nullRoot,
            rootRoot,
            defiRoot,
            dataSize,
            defiInteractionHash,
            totalDeposited,
            totalWithdrawn,
            totalFees,
        };
    }
    async getPerBlockState() {
        const { escapeOpen, blocksRemaining } = await this.rollupProcessor.getEscapeHatchStatus();
        const totalPendingDeposit = await this.getAssetValues(this.rollupProcessor.totalPendingDeposit());
        const feeDistributorBalance = [];
        for (let i = 0; i < this.assets.length; ++i) {
            feeDistributorBalance[i] = BigInt(await this.feeDistributorContract.txFeeBalance(i));
        }
        return {
            escapeOpen,
            numEscapeBlocksRemaining: blocksRemaining,
            totalPendingDeposit,
            feeDistributorBalance,
        };
    }
    getRollupContractAddress() {
        return this.rollupContractAddress;
    }
    getFeeDistributorContractAddress() {
        return this.feeDistributorContractAddress;
    }
    async createEscapeHatchProofTx(proofData, viewingKeys, signatures, signingAddress) {
        return this.rollupProcessor.createEscapeHatchProofTx(proofData, viewingKeys, signatures, signingAddress);
    }
    async createRollupProofTx(proofData, signatures, viewingKeys, providerSignature, providerAddress, feeReceiver, feeLimit) {
        return this.rollupProcessor.createRollupProofTx(proofData, signatures, viewingKeys, providerSignature, providerAddress, feeReceiver, feeLimit);
    }
    async sendTx(data, options = {}) {
        const { signingAddress, gasLimit } = options;
        const signer = signingAddress ? this.provider.getSigner(signingAddress.toString()) : this.provider.getSigner(0);
        const from = await signer.getAddress();
        const gasPrice = options.gasPrice || (await this.getGasPrice());
        const txRequest = {
            to: this.rollupContractAddress.toString(),
            from,
            gasLimit,
            gasPrice: `0x${gasPrice.toString(16)}`,
            data,
        };
        const txResponse = await signer.sendTransaction(txRequest);
        return tx_hash_1.TxHash.fromString(txResponse.hash);
    }
    async estimateGas(data) {
        const signer = this.provider.getSigner(0);
        const from = await signer.getAddress();
        const txRequest = {
            to: this.rollupContractAddress.toString(),
            from,
            data,
        };
        const estimate = await this.provider.estimateGas(txRequest);
        return estimate.toNumber();
    }
    async getRollupBlocksFrom(rollupId, minConfirmations = this.confirmations) {
        return this.rollupProcessor.getRollupBlocksFrom(rollupId, minConfirmations);
    }
    async getUserPendingDeposit(assetId, account) {
        return this.rollupProcessor.getUserPendingDeposit(assetId, account);
    }
    async getTransactionReceipt(txHash) {
        return this.provider.getTransactionReceipt(txHash.toString());
    }
    async getNetwork() {
        return this.provider.getNetwork();
    }
    async getBlockNumber() {
        return this.provider.getBlockNumber();
    }
    async signMessage(message, address) {
        return this.signer.signMessage(message, address);
    }
    async signTypedData(data, address) {
        return this.signer.signTypedData(data, address);
    }
    getAssets() {
        return this.assets;
    }
    getAsset(assetId) {
        return this.assets[assetId];
    }
    async getAssetPrice(assetId) {
        return this.priceFeeds[assetId].price();
    }
    getPriceFeed(assetId) {
        return this.priceFeeds[assetId];
    }
    getGasPriceFeed() {
        return this.gasPriceFeed;
    }
    async getBridgeId(address) {
        let info;
        try {
            const contract = new ethers_1.Contract(address.toString(), IDefiBridge_json_1.abi, this.provider);
            info = await contract.getInfo();
        }
        catch (e) {
            throw new Error(`Unknown bridge contract: ${address}.`);
        }
        const wethAddress = await this.rollupProcessor.weth();
        const assetAddresses = [
            wethAddress,
            ...this.getAssets()
                .slice(1)
                .map(a => a.getStaticInfo().address),
        ];
        const getAssetIdOrThrow = (assetAddress) => {
            const id = assetAddresses.findIndex(a => a.equals(address_1.EthAddress.fromString(assetAddress)));
            if (id < 0) {
                throw new Error(`Unknown asset address: ${assetAddress}.`);
            }
            return id;
        };
        const inputAssetId = getAssetIdOrThrow(info.inputAsset);
        const outputAssetIdA = getAssetIdOrThrow(info.outputAssetA);
        const outputAssetIdB = info.numOutputAssets > 1 ? getAssetIdOrThrow(info.outputAssetB) : 0;
        return new bridge_id_1.BridgeId(address, info.numOutputAssets, inputAssetId, outputAssetIdA, outputAssetIdB);
    }
    async getUserProofApprovalStatus(address, proofHash) {
        return this.rollupProcessor.getUserProofApprovalStatus(address, proofHash);
    }
    async isContract(address) {
        return (await this.provider.getCode(address.toString())) !== '0x';
    }
    async getGasPrice() {
        return BigInt((await this.provider.getGasPrice()).toString());
    }
}
exports.Contracts = Contracts;
//# sourceMappingURL=data:application/json;base64,