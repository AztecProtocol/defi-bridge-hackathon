#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSupportedAsset = exports.addAsset = void 0;
const ethers_1 = require("ethers");
const ERC20Permit_json_1 = __importDefault(require("../../artifacts/contracts/test/ERC20Permit.sol/ERC20Permit.json"));
const ERC20Mintable_json_1 = __importDefault(require("../../artifacts/contracts/test/ERC20Mintable.sol/ERC20Mintable.json"));
async function addAsset(rollup, signer, supportsPermit, decimals = 18) {
    if (supportsPermit) {
        console.error('Deploying ERC20 with permit support...');
        const erc20Factory = new ethers_1.ContractFactory(ERC20Permit_json_1.default.abi, ERC20Permit_json_1.default.bytecode, signer);
        const erc20 = await erc20Factory.deploy();
        console.error(`ERC20 contract address: ${erc20.address}`);
        if (decimals !== 18) {
            console.error(`Changing decimals to: ${decimals}...`);
            await erc20.setDecimals(decimals);
        }
        await setSupportedAsset(rollup, erc20.address, supportsPermit);
        return erc20;
    }
    else {
        console.error('Deploying ERC20...');
        const erc20Factory = new ethers_1.ContractFactory(ERC20Mintable_json_1.default.abi, ERC20Mintable_json_1.default.bytecode, signer);
        const erc20 = await erc20Factory.deploy();
        console.error(`ERC20 contract address: ${erc20.address}`);
        if (decimals !== 18) {
            console.error(`Changing decimals to: ${decimals}...`);
            await erc20.setDecimals(decimals);
        }
        await setSupportedAsset(rollup, erc20.address, supportsPermit);
        return erc20;
    }
}
exports.addAsset = addAsset;
async function setSupportedAsset(rollup, address, supportsPermit) {
    const tx = await rollup.setSupportedAsset(address, supportsPermit);
    const receipt = await tx.wait();
    const assetId = rollup.interface.parseLog(receipt.logs[receipt.logs.length - 1]).args.assetId;
    console.error(`AssetId: ${assetId}`);
}
exports.setSupportedAsset = setSupportedAsset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkX2Fzc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlcGxveS9hZGRfYXNzZXQvYWRkX2Fzc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxtQ0FBMkQ7QUFDM0QsdUhBQTBGO0FBQzFGLDZIQUFnRztBQUV6RixLQUFLLFVBQVUsUUFBUSxDQUFDLE1BQWdCLEVBQUUsTUFBYyxFQUFFLGNBQXVCLEVBQUUsUUFBUSxHQUFHLEVBQUU7SUFDckcsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sWUFBWSxHQUFHLElBQUksd0JBQWUsQ0FBQywwQkFBVyxDQUFDLEdBQUcsRUFBRSwwQkFBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RixNQUFNLEtBQUssR0FBRyxNQUFNLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLFFBQVEsS0FBSyxFQUFFLEVBQUU7WUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsUUFBUSxLQUFLLENBQUMsQ0FBQztZQUN0RCxNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkM7UUFDRCxNQUFNLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNwQyxNQUFNLFlBQVksR0FBRyxJQUFJLHdCQUFlLENBQUMsNEJBQWEsQ0FBQyxHQUFHLEVBQUUsNEJBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUYsTUFBTSxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUMsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxRQUFRLEtBQUssRUFBRSxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLFFBQVEsS0FBSyxDQUFDLENBQUM7WUFDdEQsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsTUFBTSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMvRCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQztBQXhCRCw0QkF3QkM7QUFFTSxLQUFLLFVBQVUsaUJBQWlCLENBQUMsTUFBZ0IsRUFBRSxPQUFlLEVBQUUsY0FBdUI7SUFDaEcsTUFBTSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzlGLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFMRCw4Q0FLQyJ9