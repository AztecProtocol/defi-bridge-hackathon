#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const units_1 = require("@ethersproject/units");
const ethers_1 = require("ethers");
const RollupProcessor_json_1 = __importDefault(require("../artifacts/contracts/RollupProcessor.sol/RollupProcessor.json"));
const add_asset_1 = require("./add_asset/add_asset");
const deploy_defi_bridge_1 = require("./deploy_defi_bridge");
const deploy_defi_bridge_proxy_1 = require("./deploy_defi_bridge_proxy");
const deploy_fee_distributor_1 = require("./deploy_fee_distributor");
const deploy_price_feed_1 = require("./deploy_price_feed");
const deploy_uniswap_1 = require("./deploy_uniswap");
const deploy_verifier_1 = require("./deploy_verifier");
async function deploy(escapeHatchBlockLower, escapeHatchBlockUpper, signer) {
    const uniswapRouter = await deploy_uniswap_1.deployUniswap(signer);
    await uniswapRouter.deployed();
    const weth = await uniswapRouter.WETH();
    const verifier = await deploy_verifier_1.deployVerifier(signer);
    console.error('Deploying RollupProcessor...');
    const rollupFactory = new ethers_1.ContractFactory(RollupProcessor_json_1.default.abi, RollupProcessor_json_1.default.bytecode, signer);
    const defiProxy = await deploy_defi_bridge_proxy_1.deployDefiBridgeProxy(signer, weth);
    // note we need to change this address for production to the multisig
    const ownerAddress = await signer.getAddress();
    const rollup = await rollupFactory.deploy(verifier.address, escapeHatchBlockLower, escapeHatchBlockUpper, defiProxy.address, weth, ownerAddress);
    console.error(`Awaiting deployment...`);
    await rollup.deployed();
    console.error(`Rollup contract address: ${rollup.address}`);
    const feeDistributor = await deploy_fee_distributor_1.deployFeeDistributor(signer, rollup, uniswapRouter);
    rollup.setFeeDistributor(feeDistributor.address);
    const initialFee = '1';
    console.error(`Depositing ${initialFee} ETH to FeeDistributor.`);
    const amount = units_1.parseEther(initialFee);
    await feeDistributor.deposit(0, amount, { value: amount });
    const permitSupport = false;
    const asset1 = await add_asset_1.addAsset(rollup, signer, permitSupport);
    const decimals2 = 8;
    const asset2 = await add_asset_1.addAsset(rollup, signer, permitSupport, decimals2);
    const gasPrice = 200000000000n; // 50 gwei
    const assetPrice1 = 500000000000000n; // 2000 DAI/ETH
    const assetPrice2 = 15n * 10n ** 18n; // 15 ETH/BTC
    {
        const initialEthSupply = 10n * 10n ** 18n;
        // 20000 DAI - 10 ETH
        await deploy_uniswap_1.createPair(signer, uniswapRouter, asset1, (initialEthSupply * 10n ** 18n) / assetPrice1, initialEthSupply);
    }
    {
        const initialEthSupply = 150n * 10n ** 18n;
        // 10 BTC - 150 ETH
        await deploy_uniswap_1.createPair(signer, uniswapRouter, asset2, (initialEthSupply * 10n ** BigInt(decimals2)) / assetPrice2, initialEthSupply);
    }
    const priceFeeds = [
        await deploy_price_feed_1.deployPriceFeed(signer, gasPrice),
        await deploy_price_feed_1.deployPriceFeed(signer, assetPrice1),
        await deploy_price_feed_1.deployPriceFeed(signer, assetPrice2),
    ];
    // Defi bridge
    const defiBridges = [
        await deploy_defi_bridge_1.deployDefiBridge(signer, rollup, uniswapRouter, weth, asset1.address),
        await deploy_defi_bridge_1.deployDefiBridge(signer, rollup, uniswapRouter, weth, asset2.address),
        await deploy_defi_bridge_1.deployDefiBridge(signer, rollup, uniswapRouter, asset1.address, weth),
        await deploy_defi_bridge_1.deployDefiBridge(signer, rollup, uniswapRouter, asset2.address, weth),
    ];
    return { rollup, feeDistributor, uniswapRouter, priceFeeds, defiBridges };
}
exports.deploy = deploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlcGxveS9kZXBsb3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLGdEQUFrRDtBQUNsRCxtQ0FBaUQ7QUFDakQsMkhBQThGO0FBQzlGLHFEQUFpRDtBQUNqRCw2REFBd0Q7QUFDeEQseUVBQW1FO0FBQ25FLHFFQUFnRTtBQUNoRSwyREFBc0Q7QUFDdEQscURBQTZEO0FBQzdELHVEQUFtRDtBQUU1QyxLQUFLLFVBQVUsTUFBTSxDQUFDLHFCQUE2QixFQUFFLHFCQUE2QixFQUFFLE1BQWM7SUFDdkcsTUFBTSxhQUFhLEdBQUcsTUFBTSw4QkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE1BQU0sYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXhDLE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0NBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDOUMsTUFBTSxhQUFhLEdBQUcsSUFBSSx3QkFBZSxDQUFDLDhCQUFlLENBQUMsR0FBRyxFQUFFLDhCQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRWpHLE1BQU0sU0FBUyxHQUFHLE1BQU0sZ0RBQXFCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTVELHFFQUFxRTtJQUNyRSxNQUFNLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMvQyxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxNQUFNLENBQ3ZDLFFBQVEsQ0FBQyxPQUFPLEVBQ2hCLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIsU0FBUyxDQUFDLE9BQU8sRUFDakIsSUFBSSxFQUNKLFlBQVksQ0FDYixDQUFDO0lB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