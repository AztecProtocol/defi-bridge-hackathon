"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollupProcessor = void 0;
const address_1 = require("@aztec/barretenberg/address");
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
const note_algorithms_1 = require("@aztec/barretenberg/note_algorithms");
const rollup_proof_1 = require("@aztec/barretenberg/rollup_proof");
const tx_hash_1 = require("@aztec/barretenberg/tx_hash");
const ethers_1 = require("ethers");
const RollupProcessor_json_1 = require("./artifacts/contracts/RollupProcessor.sol/RollupProcessor.json");
const solidity_format_signatures_1 = require("./solidity_format_signatures");
const IDefiBridgeEvent = new ethers_1.utils.Interface([
    'event DefiBridgeProcessed(uint256 indexed bridgeId, uint256 indexed nonce, uint256 totalInputValue, uint256 totalOutputValueA, uint256 totalOutputValueB, bool result)',
]);
const fixEthersStackTrace = (err) => {
    err.stack += new Error().stack;
    throw err;
};
class RollupProcessor {
    constructor(rollupContractAddress, provider) {
        this.rollupContractAddress = rollupContractAddress;
        this.provider = provider;
        this.rollupProcessor = new ethers_1.Contract(rollupContractAddress.toString(), RollupProcessor_json_1.abi, this.provider);
    }
    get address() {
        return this.rollupContractAddress;
    }
    async feeDistributor() {
        return address_1.EthAddress.fromString(await this.rollupProcessor.feeDistributor());
    }
    async numberOfAssets() {
        return +(await this.rollupProcessor.numberOfAssets());
    }
    async numberOfBridgeCalls() {
        return +(await this.rollupProcessor.numberOfBridgeCalls());
    }
    async nextRollupId() {
        return +(await this.rollupProcessor.nextRollupId());
    }
    async dataSize() {
        return +(await this.rollupProcessor.dataSize());
    }
    async dataRoot() {
        return Buffer.from((await this.rollupProcessor.dataRoot()).slice(2), 'hex');
    }
    async nullRoot() {
        return Buffer.from((await this.rollupProcessor.nullRoot()).slice(2), 'hex');
    }
    async rootRoot() {
        return Buffer.from((await this.rollupProcessor.rootRoot()).slice(2), 'hex');
    }
    async defiRoot() {
        return Buffer.from((await this.rollupProcessor.defiRoot()).slice(2), 'hex');
    }
    async defiInteractionHash() {
        return Buffer.from((await this.rollupProcessor.defiInteractionHash()).slice(2), 'hex');
    }
    async totalDeposited() {
        return (await this.rollupProcessor.getTotalDeposited()).map(v => BigInt(v));
    }
    async totalWithdrawn() {
        return (await this.rollupProcessor.getTotalWithdrawn()).map(v => BigInt(v));
    }
    async totalFees() {
        return (await this.rollupProcessor.getTotalFees()).map(v => BigInt(v));
    }
    async totalPendingDeposit() {
        return (await this.rollupProcessor.getTotalPendingDeposit()).map(v => BigInt(v));
    }
    async weth() {
        return address_1.EthAddress.fromString(await this.rollupProcessor.weth());
    }
    async getSupportedAssets() {
        const assetAddresses = await this.rollupProcessor.getSupportedAssets();
        return assetAddresses.map((a) => address_1.EthAddress.fromString(a));
    }
    async setSupportedAsset(assetAddress, supportsPermit, signer) {
        const rollupProcessor = this.getContractWithSigner(signer);
        const tx = await rollupProcessor.setSupportedAsset(assetAddress.toString(), supportsPermit);
        return tx_hash_1.TxHash.fromString(tx.hash);
    }
    async getAssetPermitSupport(assetId) {
        return this.rollupProcessor.getAssetPermitSupport(assetId);
    }
    async getEscapeHatchStatus() {
        const [escapeOpen, blocksRemaining] = await this.rollupProcessor.getEscapeHatchStatus();
        return { escapeOpen, blocksRemaining: +blocksRemaining };
    }
    async createEscapeHatchProofTx(proofData, viewingKeys, signatures, signer) {
        const rollupProcessor = this.getContractWithSigner(signer);
        const formattedSignatures = solidity_format_signatures_1.solidityFormatSignatures(signatures);
        const tx = await rollupProcessor.populateTransaction
            .escapeHatch(`0x${proofData.toString('hex')}`, formattedSignatures, Buffer.concat(viewingKeys))
            .catch(fixEthersStackTrace);
        return Buffer.from(tx.data.slice(2), 'hex');
    }
    async createRollupProofTx(proofData, signatures, viewingKeys, providerSignature, providerAddress, feeReceiver, feeLimit) {
        const rollupProcessor = new ethers_1.Contract(this.rollupContractAddress.toString(), RollupProcessor_json_1.abi);
        const formattedSignatures = solidity_format_signatures_1.solidityFormatSignatures(signatures);
        const tx = await rollupProcessor.populateTransaction
            .processRollup(`0x${proofData.toString('hex')}`, formattedSignatures, Buffer.concat(viewingKeys), providerSignature, providerAddress.toString(), feeReceiver.toString(), feeLimit)
            .catch(fixEthersStackTrace);
        return Buffer.from(tx.data.slice(2), 'hex');
    }
    async depositPendingFunds(assetId, amount, permitArgs, signer) {
        const rollupProcessor = this.getContractWithSigner(signer);
        const depositorAddress = await rollupProcessor.signer.getAddress();
        if (permitArgs) {
            const tx = await rollupProcessor
                .depositPendingFundsPermit(assetId, amount, depositorAddress, this.rollupProcessor.address, permitArgs.approvalAmount, permitArgs.deadline, permitArgs.signature.v, permitArgs.signature.r, permitArgs.signature.s, { value: assetId === 0 ? amount : undefined })
                .catch(fixEthersStackTrace);
            return tx_hash_1.TxHash.fromString(tx.hash);
        }
        else {
            const tx = await rollupProcessor
                .depositPendingFunds(assetId, amount, depositorAddress, {
                value: assetId === 0 ? amount : undefined,
            })
                .catch(fixEthersStackTrace);
            return tx_hash_1.TxHash.fromString(tx.hash);
        }
    }
    async approveProof(proofHash, signer) {
        const rollupProcessor = this.getContractWithSigner(signer);
        const tx = await rollupProcessor.approveProof(proofHash).catch(fixEthersStackTrace);
        return tx_hash_1.TxHash.fromString(tx.hash);
    }
    async getUserPendingDeposit(assetId, account) {
        return BigInt(await this.rollupProcessor.getUserPendingDeposit(assetId, account.toString()));
    }
    async getUserProofApprovalStatus(address, proofHash) {
        return await this.rollupProcessor.depositProofApprovals(address.toString(), proofHash);
    }
    async getEarliestBlock() {
        const net = await this.provider.getNetwork();
        return net.chainId === 1 ? 11967192 : 0;
    }
    /**
     * Returns all rollup blocks from (and including) the given rollupId, with >= minConfirmations.
     *
     * A normal geth node has terrible performance when searching event logs. To ensure we are not dependent
     * on third party services such as Infura, we apply an algorithm to mitigate the poor performance.
     * The algorithm will search for rollup events from the end of the chain, in chunks of blocks.
     * If it finds a rollup <= to the given rollupId, we can stop searching.
     *
     * The worst case situation is when requesting all rollups from rollup 0, or when there are no events to find.
     * In this case, we will have ever degrading performance as we search from the end of the chain to the
     * block returned by getEarliestBlock() (hardcoded on mainnet). This is a rare case however.
     *
     * The more normal case is we're given a rollupId that is not 0. In this case we know an event must exist.
     * Further, the usage pattern is that anyone making the request will be doing so with an ever increasing rollupId.
     * This lends itself well to searching backwards from the end of the chain.
     *
     * The chunk size affects performance. If no previous query has been made, or the rollupId < the previous requested
     * rollupId, the chunk size is to 100,000. This is the case when the class is queried the first time.
     * 100,000 blocks is ~10 days of blocks, so assuming there's been a rollup in the last 10 days, or the client is not
     * over 10 days behind, a single query will suffice. Benchmarks suggest this will take ~2 seconds per chunk.
     *
     * If a previous query has been made and the rollupId >= previous query, the first chunk will be from the last result
     * rollups block to the end of the chain. This provides best performance for polling clients.
     */
    async getRollupBlocksFrom(rollupId, minConfirmations) {
        const earliestBlock = await this.getEarliestBlock();
        let end = await this.provider.getBlockNumber();
        const chunk = 100000;
        let start = this.lastQueriedRollupId === undefined || rollupId < this.lastQueriedRollupId
            ? Math.max(end - chunk, 0)
            : this.lastQueriedRollupBlockNum;
        let events = [];
        while (end > earliestBlock) {
            const rollupFilter = this.rollupProcessor.filters.RollupProcessed();
            const rollupEvents = await this.rollupProcessor.queryFilter(rollupFilter, start, end);
            events = [...rollupEvents, ...events];
            if (events.length && events[0].args.rollupId.toNumber() <= rollupId) {
                this.lastQueriedRollupId = rollupId;
                this.lastQueriedRollupBlockNum = events[events.length - 1].blockNumber;
                break;
            }
            end = Math.max(start - 1, 0);
            start = Math.max(end - chunk, 0);
        }
        return this.getRollupBlocksFromEvents(events.filter(e => e.args.rollupId.toNumber() >= rollupId), minConfirmations);
    }
    async getRollupBlocksFromEvents(rollupEvents, minConfirmations) {
        const meta = (await Promise.all(rollupEvents.map(event => Promise.all([
            event.getTransaction(),
            event.getBlock(),
            event.getTransactionReceipt(),
            this.getDefiBridgeEvents(event.blockNumber),
        ])))).filter(m => m[0].confirmations >= minConfirmations);
        return meta.map(meta => this.decodeBlock({ ...meta[0], timestamp: meta[1].timestamp }, meta[2], meta[3]));
    }
    async getDefiBridgeEvents(blockNo) {
        const filter = this.rollupProcessor.filters.DefiBridgeProcessed();
        const defiBridgeEvents = await this.rollupProcessor.queryFilter(filter, blockNo, blockNo);
        return defiBridgeEvents.map((log) => {
            const { args: { bridgeId, nonce, totalInputValue, totalOutputValueA, totalOutputValueB, result }, } = IDefiBridgeEvent.parseLog(log);
            return new note_algorithms_1.DefiInteractionNote(bridge_id_1.BridgeId.fromBigInt(BigInt(bridgeId)), +nonce, BigInt(totalInputValue), BigInt(totalOutputValueA), BigInt(totalOutputValueB), result);
        });
    }
    decodeBlock(tx, receipt, interactionResult) {
        const rollupAbi = new ethers_1.utils.Interface(RollupProcessor_json_1.abi);
        const result = rollupAbi.parseTransaction({ data: tx.data });
        const rollupProofData = Buffer.from(result.args.proofData.slice(2), 'hex');
        const viewingKeysData = Buffer.from(result.args.viewingKeys.slice(2), 'hex');
        return {
            created: new Date(tx.timestamp * 1000),
            txHash: tx_hash_1.TxHash.fromString(tx.hash),
            rollupProofData,
            viewingKeysData,
            interactionResult,
            rollupId: rollup_proof_1.RollupProofData.getRollupIdFromBuffer(rollupProofData),
            rollupSize: rollup_proof_1.RollupProofData.getRollupSizeFromBuffer(rollupProofData),
            gasPrice: BigInt(tx.gasPrice.toString()),
            gasUsed: receipt.gasUsed.toNumber(),
        };
    }
    getContractWithSigner(signer) {
        const ethSigner = !signer
            ? this.provider.getSigner(0)
            : signer instanceof address_1.EthAddress
                ? this.provider.getSigner(signer.toString())
                : signer;
        return new ethers_1.Contract(this.rollupContractAddress.toString(), RollupProcessor_json_1.abi, ethSigner);
    }
}
exports.RollupProcessor = RollupProcessor;
//# sourceMappingURL=data:application/json;base64,