"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeId = void 0;
const address_1 = require("../address");
const bigint_buffer_1 = require("../bigint_buffer");
const randomInt = (to = 2 ** 26 - 1) => Math.floor(Math.random() * (to + 1));
const getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));
class BridgeId {
    constructor(address, numOutputAssets, inputAssetId, outputAssetIdA, outputAssetIdB) {
        this.address = address;
        this.numOutputAssets = numOutputAssets;
        this.inputAssetId = inputAssetId;
        this.outputAssetIdA = outputAssetIdA;
        this.outputAssetIdB = outputAssetIdB;
    }
    static random() {
        return new BridgeId(address_1.EthAddress.randomAddress(), 1 + randomInt(1), randomInt(), randomInt(), randomInt());
    }
    static fromBigInt(val) {
        return new BridgeId(new address_1.EthAddress(bigint_buffer_1.toBufferBE(val & ((BigInt(1) << BigInt(this.ADDRESS_BIT_LEN)) - BigInt(1)), 32)), getNumber(val, this.ADDRESS_BIT_LEN, this.NUM_OUTPUT_NOTES_LEN), getNumber(val, this.ADDRESS_BIT_LEN + this.NUM_OUTPUT_NOTES_LEN, this.INPUT_ASSET_ID_LEN), getNumber(val, this.ADDRESS_BIT_LEN + this.NUM_OUTPUT_NOTES_LEN + this.INPUT_ASSET_ID_LEN, this.OUTPUT_A_ASSET_ID_LEN), getNumber(val, this.ADDRESS_BIT_LEN + this.NUM_OUTPUT_NOTES_LEN + this.INPUT_ASSET_ID_LEN + this.OUTPUT_A_ASSET_ID_LEN, this.OUTPUT_B_ASSET_ID_LEN));
    }
    static fromBuffer(buf) {
        if (buf.length !== 32) {
            throw new Error('Invalid buffer.');
        }
        return BridgeId.fromBigInt(bigint_buffer_1.toBigIntBE(buf));
    }
    static fromString(str) {
        return BridgeId.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));
    }
    toBigInt() {
        return (BigInt(this.address.toString()) +
            (BigInt(this.numOutputAssets) << BigInt(160)) +
            (BigInt(this.inputAssetId) << BigInt(162)) +
            (BigInt(this.outputAssetIdA) << BigInt(192)) +
            (BigInt(this.outputAssetIdB) << BigInt(222)));
    }
    toBuffer() {
        return bigint_buffer_1.toBufferBE(this.toBigInt(), 32);
    }
    toString() {
        return `0x${this.toBuffer().toString('hex')}`;
    }
    equals(id) {
        return id.toBuffer().equals(this.toBuffer());
    }
}
exports.BridgeId = BridgeId;
BridgeId.ZERO = new BridgeId(address_1.EthAddress.ZERO, 0, 0, 0, 0);
BridgeId.LENGTH = 32;
BridgeId.ADDRESS_BIT_LEN = 160;
BridgeId.NUM_OUTPUT_NOTES_LEN = 2;
BridgeId.INPUT_ASSET_ID_LEN = 30;
BridgeId.OUTPUT_A_ASSET_ID_LEN = 30;
BridgeId.OUTPUT_B_ASSET_ID_LEN = 30;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJpZGdlX2lkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUF3QztBQUN4QyxvREFBMEQ7QUFFMUQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFN0UsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFXLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxFQUFFLENBQzlELE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFOUUsTUFBYSxRQUFRO0lBU25CLFlBQ2tCLE9BQW1CLEVBQ25CLGVBQXVCLEVBQ3ZCLFlBQW9CLEVBQ3BCLGNBQXNCLEVBQ3RCLGNBQXNCO1FBSnRCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUFDdEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7SUFDckMsQ0FBQztJQUVKLE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLFFBQVEsQ0FBQyxvQkFBVSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FB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