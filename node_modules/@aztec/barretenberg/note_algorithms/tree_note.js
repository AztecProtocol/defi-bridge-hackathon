"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNote = void 0;
const bigint_buffer_1 = require("../bigint_buffer");
const address_1 = require("../address");
const serialize_1 = require("../serialize");
const viewing_key_1 = require("../viewing_key");
const derive_note_secret_1 = require("./derive_note_secret");
class TreeNote {
    constructor(ownerPubKey, value, assetId, nonce, noteSecret) {
        this.ownerPubKey = ownerPubKey;
        this.value = value;
        this.assetId = assetId;
        this.nonce = nonce;
        this.noteSecret = noteSecret;
    }
    toBuffer() {
        return Buffer.concat([
            bigint_buffer_1.toBufferBE(this.value, 32),
            serialize_1.numToUInt32BE(this.assetId),
            serialize_1.numToUInt32BE(this.nonce),
            this.ownerPubKey.toBuffer(),
            this.noteSecret,
        ]);
    }
    getViewingKey(ephPrivKey, grumpkin) {
        const noteBuf = Buffer.concat([bigint_buffer_1.toBufferBE(this.value, 32), serialize_1.numToUInt32BE(this.assetId), serialize_1.numToUInt32BE(this.nonce)]);
        return viewing_key_1.ViewingKey.createFromEphPriv(noteBuf, this.ownerPubKey, ephPrivKey, grumpkin);
    }
    static createFromEphPriv(ownerPubKey, value, assetId, nonce, ephPrivKey, grumpkin, noteVersion = 1) {
        const noteSecret = derive_note_secret_1.deriveNoteSecret(ownerPubKey, ephPrivKey, grumpkin, noteVersion);
        return new TreeNote(ownerPubKey, value, assetId, nonce, noteSecret);
    }
    static createFromEphPub(ownerPubKey, value, assetId, nonce, ephPubKey, ownerPrivKey, grumpkin, noteVersion = 1) {
        const noteSecret = derive_note_secret_1.deriveNoteSecret(ephPubKey, ownerPrivKey, grumpkin, noteVersion);
        return new TreeNote(ownerPubKey, value, assetId, nonce, noteSecret);
    }
    static recover({ noteBuf, noteSecret }, ownerPubKey) {
        const value = bigint_buffer_1.toBigIntBE(noteBuf.slice(0, 32));
        const assetId = noteBuf.readUInt32BE(32);
        const nonce = noteBuf.readUInt32BE(36);
        return new TreeNote(ownerPubKey, value, assetId, nonce, noteSecret);
    }
}
exports.TreeNote = TreeNote;
TreeNote.EMPTY = new TreeNote(address_1.GrumpkinAddress.one(), BigInt(0), 0, 0, Buffer.alloc(32));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZV9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy90cmVlX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTBEO0FBQzFELHdDQUE2QztBQUc3Qyw0Q0FBNkM7QUFDN0MsZ0RBQTRDO0FBRTVDLDZEQUF3RDtBQUV4RCxNQUFhLFFBQVE7SUFHbkIsWUFDUyxXQUE0QixFQUM1QixLQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsS0FBYSxFQUNiLFVBQWtCO1FBSmxCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsZUFBVSxHQUFWLFVBQVUsQ0FBUTtJQUN4QixDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQiwwQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzFCLHlCQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUMzQix5QkFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVU7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWEsQ0FBQyxVQUFrQixFQUFFLFFBQWtCO1FBQ2xELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQywwQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUseUJBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUseUJBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BILE9BQU8sd0JBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FDdEIsV0FBNEIsRUFDNUIsS0FBYSxFQUNiLE9BQWdCLEVBQ2hCLEtBQWEsRUFDYixVQUFrQixFQUNsQixRQUFrQixFQUNsQixXQUFXLEdBQUcsQ0FBQztRQUVmLE1BQU0sVUFBVSxHQUFHLHFDQUFnQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQ3JCLFdBQTRCLEVBQzVCLEtBQWEsRUFDYixPQUFnQixFQUNoQixLQUFhLEVBQ2IsU0FBMEIsRUFDMUIsWUFBb0IsRUFDcEIsUUFBa0IsRUFDbEIsV0FBVyxHQUFHLENBQUM7UUFFZixNQUFNLFVBQVUsR0FBRyxxQ0FBZ0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNwRixPQUFPLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQWlCLEVBQUUsV0FBNEI7UUFDakYsTUFBTSxLQUFLLEdBQUcsMEJBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RSxDQUFDOztBQTFESCw0QkEyREM7QUExRFEsY0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLHlCQUFlLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDIn0=