"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimNoteTxData = void 0;
const bigint_buffer_1 = require("../bigint_buffer");
const address_1 = require("../address");
const serialize_1 = require("../serialize");
const viewing_key_1 = require("../viewing_key");
const bridge_id_1 = require("../bridge_id");
const derive_note_secret_1 = require("./derive_note_secret");
class ClaimNoteTxData {
    constructor(value, bridgeId, ownerPubKey, ownerNonce, noteSecret) {
        this.value = value;
        this.bridgeId = bridgeId;
        this.ownerPubKey = ownerPubKey;
        this.ownerNonce = ownerNonce;
        this.noteSecret = noteSecret;
    }
    static createFromEphPriv(value, bridgeId, owner, ephPrivKey, grumpkin) {
        const noteSecret = derive_note_secret_1.deriveNoteSecret(owner.publicKey, ephPrivKey, grumpkin);
        return new ClaimNoteTxData(value, bridgeId, owner.publicKey, owner.nonce, noteSecret);
    }
    static createFromEphPub(value, bridgeId, owner, ephPubKey, ownerPrivKey, grumpkin) {
        const noteSecret = derive_note_secret_1.deriveNoteSecret(ephPubKey, ownerPrivKey, grumpkin);
        return new ClaimNoteTxData(value, bridgeId, owner.publicKey, owner.nonce, noteSecret);
    }
    toBuffer() {
        return Buffer.concat([
            bigint_buffer_1.toBufferBE(this.value, 32),
            this.bridgeId.toBuffer(),
            this.ownerPubKey.toBuffer(),
            serialize_1.numToUInt32BE(this.ownerNonce),
            this.noteSecret,
        ]);
    }
    equals(note) {
        return this.toBuffer().equals(note.toBuffer());
    }
    getViewingKey(ownerPubKey, ephPrivKey, grumpkin) {
        const noteBuf = Buffer.concat([bigint_buffer_1.toBufferBE(this.value, 32), this.bridgeId.toBuffer().slice(0, 8)]);
        return viewing_key_1.ViewingKey.createFromEphPriv(noteBuf, ownerPubKey, ephPrivKey, grumpkin);
    }
}
exports.ClaimNoteTxData = ClaimNoteTxData;
ClaimNoteTxData.EMPTY = new ClaimNoteTxData(BigInt(0), bridge_id_1.BridgeId.ZERO, address_1.GrumpkinAddress.one(), 0, Buffer.alloc(32));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhaW1fbm90ZV90eF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9jbGFpbV9ub3RlX3R4X2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQThDO0FBQzlDLHdDQUE2QztBQUU3Qyw0Q0FBNkM7QUFDN0MsZ0RBQTRDO0FBRTVDLDRDQUF3QztBQUN4Qyw2REFBd0Q7QUFFeEQsTUFBYSxlQUFlO0lBRzFCLFlBQ1MsS0FBYSxFQUNiLFFBQWtCLEVBQ2xCLFdBQTRCLEVBQzVCLFVBQWtCLEVBQ2xCLFVBQWtCO1FBSmxCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQVE7SUFDeEIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDdEIsS0FBYSxFQUNiLFFBQWtCLEVBQ2xCLEtBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLFFBQWtCO1FBRWxCLE1BQU0sVUFBVSxHQUFHLHFDQUFnQixDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNFLE9BQU8sSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDckIsS0FBYSxFQUNiLFFBQWtCLEVBQ2xCLEtBQWdCLEVBQ2hCLFNBQTBCLEVBQzFCLFlBQW9CLEVBQ3BCLFFBQWtCO1FBRWxCLE1BQU0sVUFBVSxHQUFHLHFDQUFnQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkUsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQiwwQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1lBQzNCLHlCQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUM5QixJQUFJLENBQUMsVUFBVTtTQUNoQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQXFCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsYUFBYSxDQUFDLFdBQTRCLEVBQUUsVUFBa0IsRUFBRSxRQUFrQjtRQUNoRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsMEJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEcsT0FBTyx3QkFBVSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7O0FBbkRILDBDQW9EQztBQW5EUSxxQkFBSyxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBUSxDQUFDLElBQUksRUFBRSx5QkFBZSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMifQ==