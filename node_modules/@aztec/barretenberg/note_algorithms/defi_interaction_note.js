"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packInteractionNotes = exports.DefiInteractionNote = void 0;
const bigint_buffer_1 = require("../bigint_buffer");
const crypto_1 = require("crypto");
const serialize_1 = require("../serialize");
const bridge_id_1 = require("../bridge_id");
class DefiInteractionNote {
    constructor(bridgeId, nonce, totalInputValue, totalOutputValueA, totalOutputValueB, result) {
        this.bridgeId = bridgeId;
        this.nonce = nonce;
        this.totalInputValue = totalInputValue;
        this.totalOutputValueA = totalOutputValueA;
        this.totalOutputValueB = totalOutputValueB;
        this.result = result;
    }
    static random() {
        return new DefiInteractionNote(bridge_id_1.BridgeId.random(), crypto_1.randomBytes(4).readUInt32BE(), bigint_buffer_1.toBigIntBE(crypto_1.randomBytes(32)), bigint_buffer_1.toBigIntBE(crypto_1.randomBytes(32)), bigint_buffer_1.toBigIntBE(crypto_1.randomBytes(32)), !!Math.round(Math.random()));
    }
    static fromBuffer(buf) {
        const bridgeId = bridge_id_1.BridgeId.fromBuffer(buf.slice(0, 32));
        let offset = 32;
        const totalInputValue = bigint_buffer_1.toBigIntBE(buf.slice(offset, offset + 32));
        offset += 32;
        const totalOutputValueA = bigint_buffer_1.toBigIntBE(buf.slice(offset, offset + 32));
        offset += 32;
        const totalOutputValueB = bigint_buffer_1.toBigIntBE(buf.slice(offset, offset + 32));
        offset += 32;
        const nonce = buf.readUInt32BE(offset);
        offset += 4;
        const result = !!buf[offset];
        return new DefiInteractionNote(bridgeId, nonce, totalInputValue, totalOutputValueA, totalOutputValueB, result);
    }
    toBuffer() {
        return Buffer.concat([
            this.bridgeId.toBuffer(),
            bigint_buffer_1.toBufferBE(this.totalInputValue, 32),
            bigint_buffer_1.toBufferBE(this.totalOutputValueA, 32),
            bigint_buffer_1.toBufferBE(this.totalOutputValueB, 32),
            serialize_1.numToUInt32BE(this.nonce),
            Buffer.from([+this.result]),
        ]);
    }
    equals(note) {
        return this.toBuffer().equals(note.toBuffer());
    }
}
exports.DefiInteractionNote = DefiInteractionNote;
DefiInteractionNote.EMPTY = new DefiInteractionNote(bridge_id_1.BridgeId.ZERO, 0, BigInt(0), BigInt(0), BigInt(0), false);
DefiInteractionNote.LENGTH = DefiInteractionNote.EMPTY.toBuffer().length;
exports.packInteractionNotes = (notes) => {
    const hash = crypto_1.createHash('sha256')
        .update(Buffer.concat(notes.map(note => Buffer.concat([
        note.bridgeId.toBuffer(),
        serialize_1.numToUInt32BE(note.nonce, 32),
        bigint_buffer_1.toBufferBE(note.totalInputValue, 32),
        bigint_buffer_1.toBufferBE(note.totalOutputValueA, 32),
        bigint_buffer_1.toBufferBE(note.totalOutputValueB, 32),
        Buffer.alloc(31),
        Buffer.from([+note.result]),
    ]))))
        .digest();
    // Zero the first 4 bits.
    hash[0] &= 15;
    return hash;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9pbnRlcmFjdGlvbl9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9kZWZpX2ludGVyYWN0aW9uX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTBEO0FBQzFELG1DQUFpRDtBQUNqRCw0Q0FBNkM7QUFDN0MsNENBQXdDO0FBRXhDLE1BQWEsbUJBQW1CO0lBSTlCLFlBQ2tCLFFBQWtCLEVBQ2xCLEtBQWEsRUFDYixlQUF1QixFQUN2QixpQkFBeUIsRUFDekIsaUJBQXlCLEVBQ3pCLE1BQWU7UUFMZixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixvQkFBZSxHQUFmLGVBQWUsQ0FBUTtRQUN2QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7UUFDekIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQVM7SUFDOUIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLG1CQUFtQixDQUM1QixvQkFBUSxDQUFDLE1BQU0sRUFBRSxFQUNqQixvQkFBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUM3QiwwQkFBVSxDQUFDLG9CQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDM0IsMEJBQVUsQ0FBQyxvQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzNCLDBCQUFVLENBQUMsb0JBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsTUFBTSxRQUFRLEdBQUcsb0JBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUs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