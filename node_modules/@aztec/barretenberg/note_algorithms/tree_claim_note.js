"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeClaimNote = void 0;
const bigint_buffer_1 = require("../bigint_buffer");
const crypto_1 = require("crypto");
const bridge_id_1 = require("../bridge_id");
const serialize_1 = require("../serialize");
class TreeClaimNote {
    constructor(value, bridgeId, defiInteractionNonce, fee, partialState) {
        this.value = value;
        this.bridgeId = bridgeId;
        this.defiInteractionNonce = defiInteractionNonce;
        this.fee = fee;
        this.partialState = partialState;
    }
    static random() {
        return new TreeClaimNote(bigint_buffer_1.toBigIntBE(crypto_1.randomBytes(32)), bridge_id_1.BridgeId.random(), crypto_1.randomBytes(4).readUInt32BE(), bigint_buffer_1.toBigIntBE(crypto_1.randomBytes(32)), crypto_1.randomBytes(32));
    }
    static fromBuffer(buf) {
        const value = bigint_buffer_1.toBigIntBE(buf.slice(0, 32));
        let offset = 32;
        const bridgeId = bridge_id_1.BridgeId.fromBuffer(buf.slice(offset, offset + bridge_id_1.BridgeId.LENGTH));
        offset += 32;
        const defiInteractionNonce = buf.readUInt32BE(offset);
        offset += 4;
        const fee = bigint_buffer_1.toBigIntBE(buf.slice(offset, offset + 32));
        offset += 32;
        const partialState = buf.slice(offset, offset + 32);
        return new TreeClaimNote(value, bridgeId, defiInteractionNonce, fee, partialState);
    }
    toBuffer() {
        return Buffer.concat([
            bigint_buffer_1.toBufferBE(this.value, 32),
            this.bridgeId.toBuffer(),
            serialize_1.numToUInt32BE(this.defiInteractionNonce),
            bigint_buffer_1.toBufferBE(this.fee, 32),
            this.partialState,
        ]);
    }
    equals(note) {
        return this.toBuffer().equals(note.toBuffer());
    }
}
exports.TreeClaimNote = TreeClaimNote;
TreeClaimNote.EMPTY = new TreeClaimNote(BigInt(0), bridge_id_1.BridgeId.ZERO, 0, BigInt(0), Buffer.alloc(32));
TreeClaimNote.LENGTH = TreeClaimNote.EMPTY.toBuffer().length;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZV9jbGFpbV9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy90cmVlX2NsYWltX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTBEO0FBQzFELG1DQUFxQztBQUNyQyw0Q0FBd0M7QUFDeEMsNENBQTZDO0FBRTdDLE1BQWEsYUFBYTtJQUl4QixZQUNTLEtBQWEsRUFDYixRQUFrQixFQUNsQixvQkFBNEIsRUFDNUIsR0FBVyxFQUNYLFlBQW9CO1FBSnBCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTtRQUM1QixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsaUJBQVksR0FBWixZQUFZLENBQVE7SUFDMUIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLGFBQWEsQ0FDdEIsMEJBQVUsQ0FBQyxvQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzNCLG9CQUFRLENBQUMsTUFBTSxFQUFFLEVBQ2pCLG9CQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQzdCLDBCQUFVLENBQUMsb0JBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUMzQixvQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixNQUFNLEtBQUssR0FBRywwQkFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sUUFBUSxHQUFHLG9CQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxvQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbEYsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osTUFBTSxHQUFHLEdBQUcsMEJBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsMEJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUN4Qix5QkFBYSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUN4QywwQkFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxZQUFZO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBbUI7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7O0FBL0NILHNDQWdEQztBQS9DUSxtQkFBSyxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwRixvQkFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDIn0=