"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeSigningData = void 0;
const bigint_buffer_1 = require("../../bigint_buffer");
const note_algorithms_1 = require("../../note_algorithms");
const serialize_1 = require("../../serialize");
function computeSigningData(notes, claimNote, inputNote1Index, inputNote2Index, inputOwner, outputOwner, inputValue, outputValue, assetId, numInputNotes, accountId, nullifierKey, pedersen, noteAlgos) {
    const isDefiBridge = !claimNote.equals(note_algorithms_1.ClaimNoteTxData.EMPTY);
    const noteCommitments = notes.map(note => noteAlgos.valueNoteCommitment(note));
    const partialState = noteAlgos.valueNotePartialCommitment(claimNote.noteSecret, accountId);
    const treeClaimNote = new note_algorithms_1.TreeClaimNote(claimNote.value, claimNote.bridgeId, 0, BigInt(0), partialState);
    const claimNoteCommitment = noteAlgos.claimNotePartialCommitment(treeClaimNote);
    const nullifier1 = noteAlgos.valueNoteNullifier(noteCommitments[0], inputNote1Index, nullifierKey, numInputNotes >= 1);
    const nullifier2 = noteAlgos.valueNoteNullifier(noteCommitments[1], inputNote2Index, nullifierKey, numInputNotes >= 2);
    const totalInputValue = notes[0].value + notes[1].value + inputValue;
    const publicOutput = isDefiBridge ? claimNote.value : outputValue;
    const totalOutputValue = notes[2].value + notes[3].value + publicOutput;
    const txFee = totalInputValue - totalOutputValue;
    const toCompress = [
        bigint_buffer_1.toBufferBE(inputValue, 32),
        bigint_buffer_1.toBufferBE(publicOutput, 32),
        isDefiBridge ? claimNote.bridgeId.toBuffer() : serialize_1.numToUInt32BE(assetId, 32),
        isDefiBridge ? claimNoteCommitment : noteCommitments[2],
        noteCommitments[3],
        nullifier1,
        nullifier2,
        Buffer.concat([Buffer.alloc(12), inputOwner.toBuffer()]),
        Buffer.concat([Buffer.alloc(12), outputOwner.toBuffer()]),
        bigint_buffer_1.toBufferBE(txFee, 32),
    ];
    return pedersen.compressInputs(toCompress);
}
exports.computeSigningData = computeSigningData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZV9zaWduaW5nX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9qb2luX3NwbGl0X3Byb29mL2NvbXB1dGVfc2lnbmluZ19kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVEQUFpRDtBQUtqRCwyREFBaUc7QUFDakcsK0NBQWdEO0FBRWhELFNBQWdCLGtCQUFrQixDQUNoQyxLQUFpQixFQUNqQixTQUEwQixFQUMxQixlQUF1QixFQUN2QixlQUF1QixFQUN2QixVQUFzQixFQUN0QixXQUF1QixFQUN2QixVQUFrQixFQUNsQixXQUFtQixFQUNuQixPQUFnQixFQUNoQixhQUFxQixFQUNyQixTQUFvQixFQUNwQixZQUFvQixFQUNwQixRQUFrQixFQUNsQixTQUF5QjtJQUV6QixNQUFNLFlBQVksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUNBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5RCxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFL0UsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0YsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQkFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pHLE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWhGLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsQ0FDN0MsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUNsQixlQUFlLEVBQ2YsWUFBWSxFQUNaLGFBQWEsSUFBSSxDQUFDLENBQ25CLENBQUM7SUFDRixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQzdDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDbEIsZUFBZSxFQUNmLFlBQVksRUFDWixhQUFhLElBQUksQ0FBQyxDQUNuQixDQUFDO0lBRUYsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUNyRSxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNsRSxNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUM7SUFDeEUsTUFBTSxLQUFLLEdBQUcsZUFBZSxHQUFHLGdCQUFnQixDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFHO1FBQ2pCLDBCQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztRQUMxQiwwQkFBVSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7UUFDNUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyx5QkFBYSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7UUFDekUsWUFBWSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN2RCxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLFVBQVU7UUFDVixVQUFVO1FBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDekQsMEJBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0tBQ3RCLENBQUM7SUFDRixPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQXJERCxnREFxREMifQ==