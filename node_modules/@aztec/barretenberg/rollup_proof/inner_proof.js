"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InnerProofData = void 0;
const client_proofs_1 = require("../client_proofs");
const serialize_1 = require("../serialize");
class InnerProofData {
    constructor(proofId, publicInput, publicOutput, assetId, noteCommitment1, noteCommitment2, nullifier1, nullifier2, inputOwner, outputOwner) {
        this.proofId = proofId;
        this.publicInput = publicInput;
        this.publicOutput = publicOutput;
        this.assetId = assetId;
        this.noteCommitment1 = noteCommitment1;
        this.noteCommitment2 = noteCommitment2;
        this.nullifier1 = nullifier1;
        this.nullifier2 = nullifier2;
        this.inputOwner = inputOwner;
        this.outputOwner = outputOwner;
        this.txId = client_proofs_1.createTxId(this.toBuffer());
    }
    getDepositSigningData() {
        return this.toBuffer();
    }
    toBuffer() {
        return Buffer.concat([
            serialize_1.numToUInt32BE(this.proofId, 32),
            this.publicInput,
            this.publicOutput,
            this.assetId,
            this.noteCommitment1,
            this.noteCommitment2,
            this.nullifier1,
            this.nullifier2,
            this.inputOwner,
            this.outputOwner,
        ]);
    }
    isPadding() {
        return this.nullifier1.equals(Buffer.alloc(32, 0));
    }
    static fromBuffer(innerPublicInputs) {
        const proofId = innerPublicInputs.readUInt32BE(0 * 32 + 28);
        const publicInput = innerPublicInputs.slice(1 * 32, 1 * 32 + 32);
        const publicOutput = innerPublicInputs.slice(2 * 32, 2 * 32 + 32);
        const assetId = innerPublicInputs.slice(3 * 32, 3 * 32 + 32);
        const noteCommitment1 = innerPublicInputs.slice(4 * 32, 4 * 32 + 32);
        const noteCommitment2 = innerPublicInputs.slice(5 * 32, 5 * 32 + 32);
        const nullifier1 = innerPublicInputs.slice(6 * 32, 6 * 32 + 32);
        const nullifier2 = innerPublicInputs.slice(7 * 32, 7 * 32 + 32);
        const inputOwner = innerPublicInputs.slice(8 * 32, 8 * 32 + 32);
        const outputOwner = innerPublicInputs.slice(9 * 32, 9 * 32 + 32);
        return new InnerProofData(proofId, publicInput, publicOutput, assetId, noteCommitment1, noteCommitment2, nullifier1, nullifier2, inputOwner, outputOwner);
    }
}
exports.InnerProofData = InnerProofData;
InnerProofData.NUM_PUBLIC_INPUTS = 10;
InnerProofData.LENGTH = InnerProofData.NUM_PUBLIC_INPUTS * 32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5uZXJfcHJvb2YuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sbHVwX3Byb29mL2lubmVyX3Byb29mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUF1RDtBQUN2RCw0Q0FBNkM7QUFFN0MsTUFBYSxjQUFjO0lBTXpCLFlBQ1MsT0FBZ0IsRUFDaEIsV0FBbUIsRUFDbkIsWUFBb0IsRUFDcEIsT0FBZSxFQUNmLGVBQXVCLEVBQ3ZCLGVBQXVCLEVBQ3ZCLFVBQWtCLEVBQ2xCLFVBQWtCLEVBQ2xCLFVBQWtCLEVBQ2xCLFdBQW1CO1FBVG5CLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLG9CQUFlLEdBQWYsZUFBZSxDQUFRO1FBQ3ZCLG9CQUFlLEdBQWYsZUFBZSxDQUFRO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBRTFCLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQscUJBQXFCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25CLHlCQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLFdBQVc7WUFDaEIsSUFBSSxDQUFDLFlBQVk7WUFDakIsSUFBSSxDQUFDLE9BQU87WUFDWixJQUFJLENBQUMsZUFBZTtZQUNwQixJQUFJLENBQUMsZUFBZTtZQUNwQixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUksQ0FBQyxVQUFVO1lBQ2YsSUFBSSxDQUFDLFVBQVU7WUFDZixJQUFJLENBQUMsV0FBVztTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBeUI7UUFDekMsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUQsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNqRSxNQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDN0QsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNyRSxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDaEUsTUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFakUsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsT0FBTyxFQUNQLFdBQVcsRUFDWCxZQUFZLEVBQ1osT0FBTyxFQUNQLGVBQWUsRUFDZixlQUFlLEVBQ2YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxDQUNaLENBQUM7SUFDSixDQUFDOztBQXBFSCx3Q0FxRUM7QUFwRVEsZ0NBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLHFCQUFNLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyJ9