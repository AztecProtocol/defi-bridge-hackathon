/// <reference types="node" />
import { ViewingKey } from '../viewing_key';
import { InnerProofData } from './inner_proof';
export declare class RollupProofData {
    rollupId: number;
    rollupSize: number;
    dataStartIndex: number;
    oldDataRoot: Buffer;
    newDataRoot: Buffer;
    oldNullRoot: Buffer;
    newNullRoot: Buffer;
    oldDataRootsRoot: Buffer;
    newDataRootsRoot: Buffer;
    oldDefiRoot: Buffer;
    newDefiRoot: Buffer;
    bridgeIds: Buffer[];
    defiDepositSums: Buffer[];
    assetIds: Buffer[];
    totalTxFees: Buffer[];
    innerProofData: InnerProofData[];
    recursiveProofOutput: Buffer;
    defiInteractionNotes: Buffer[];
    prevDefiInteractionHash: Buffer;
    viewingKeys: ViewingKey[][];
    static NUMBER_OF_ASSETS: number;
    static NUM_BRIDGE_CALLS_PER_BLOCK: number;
    static NUM_ROLLUP_HEADER_INPUTS: number;
    static LENGTH_ROLLUP_HEADER_INPUTS: number;
    static LENGTH_RECURSIVE_PROOF_OUTPUT: number;
    rollupHash: Buffer;
    constructor(rollupId: number, rollupSize: number, dataStartIndex: number, oldDataRoot: Buffer, newDataRoot: Buffer, oldNullRoot: Buffer, newNullRoot: Buffer, oldDataRootsRoot: Buffer, newDataRootsRoot: Buffer, oldDefiRoot: Buffer, newDefiRoot: Buffer, bridgeIds: Buffer[], defiDepositSums: Buffer[], assetIds: Buffer[], totalTxFees: Buffer[], innerProofData: InnerProofData[], recursiveProofOutput: Buffer, defiInteractionNotes: Buffer[], prevDefiInteractionHash: Buffer, viewingKeys: ViewingKey[][]);
    toBuffer(): Buffer;
    getViewingKeyData(): Buffer;
    static getRollupIdFromBuffer(proofData: Buffer): number;
    static getRollupSizeFromBuffer(proofData: Buffer): number;
    static fromBuffer(proofData: Buffer, viewingKeyData?: Buffer): RollupProofData;
}
//# sourceMappingURL=rollup_proof_data.d.ts.map