"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollupProofData = void 0;
const crypto_1 = require("crypto");
const serialize_1 = require("../serialize");
const viewing_key_1 = require("../viewing_key");
const inner_proof_1 = require("./inner_proof");
class RollupProofData {
    constructor(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, innerProofData, recursiveProofOutput, defiInteractionNotes, prevDefiInteractionHash, viewingKeys) {
        this.rollupId = rollupId;
        this.rollupSize = rollupSize;
        this.dataStartIndex = dataStartIndex;
        this.oldDataRoot = oldDataRoot;
        this.newDataRoot = newDataRoot;
        this.oldNullRoot = oldNullRoot;
        this.newNullRoot = newNullRoot;
        this.oldDataRootsRoot = oldDataRootsRoot;
        this.newDataRootsRoot = newDataRootsRoot;
        this.oldDefiRoot = oldDefiRoot;
        this.newDefiRoot = newDefiRoot;
        this.bridgeIds = bridgeIds;
        this.defiDepositSums = defiDepositSums;
        this.assetIds = assetIds;
        this.totalTxFees = totalTxFees;
        this.innerProofData = innerProofData;
        this.recursiveProofOutput = recursiveProofOutput;
        this.defiInteractionNotes = defiInteractionNotes;
        this.prevDefiInteractionHash = prevDefiInteractionHash;
        this.viewingKeys = viewingKeys;
        const allTxIds = this.innerProofData.map(innerProof => innerProof.txId);
        this.rollupHash = crypto_1.createHash('sha256').update(Buffer.concat(allTxIds)).digest();
        if (totalTxFees.length !== RollupProofData.NUMBER_OF_ASSETS) {
            throw new Error(`Expect totalTxFees to be an array of size ${RollupProofData.NUMBER_OF_ASSETS}.`);
        }
    }
    toBuffer() {
        return Buffer.concat([
            serialize_1.numToUInt32BE(this.rollupId, 32),
            serialize_1.numToUInt32BE(this.rollupSize, 32),
            serialize_1.numToUInt32BE(this.dataStartIndex, 32),
            this.oldDataRoot,
            this.newDataRoot,
            this.oldNullRoot,
            this.newNullRoot,
            this.oldDataRootsRoot,
            this.newDataRootsRoot,
            this.oldDefiRoot,
            this.newDefiRoot,
            ...this.bridgeIds,
            ...this.defiDepositSums.map(s => s),
            ...this.assetIds,
            ...this.totalTxFees,
            ...this.innerProofData.map(p => p.toBuffer()),
            this.recursiveProofOutput,
            ...this.defiInteractionNotes,
            this.prevDefiInteractionHash,
        ]);
    }
    getViewingKeyData() {
        return Buffer.concat(this.viewingKeys.flat().map(vk => vk.toBuffer()));
    }
    static getRollupIdFromBuffer(proofData) {
        return proofData.readUInt32BE(28);
    }
    static getRollupSizeFromBuffer(proofData) {
        return proofData.readUInt32BE(32 + 28);
    }
    static fromBuffer(proofData, viewingKeyData) {
        const rollupId = RollupProofData.getRollupIdFromBuffer(proofData);
        const rollupSize = proofData.readUInt32BE(1 * 32 + 28);
        const dataStartIndex = proofData.readUInt32BE(2 * 32 + 28);
        const oldDataRoot = proofData.slice(3 * 32, 3 * 32 + 32);
        const newDataRoot = proofData.slice(4 * 32, 4 * 32 + 32);
        const oldNullRoot = proofData.slice(5 * 32, 5 * 32 + 32);
        const newNullRoot = proofData.slice(6 * 32, 6 * 32 + 32);
        const oldDataRootsRoot = proofData.slice(7 * 32, 7 * 32 + 32);
        const newDataRootsRoot = proofData.slice(8 * 32, 8 * 32 + 32);
        const oldDefiRoot = proofData.slice(9 * 32, 9 * 32 + 32);
        const newDefiRoot = proofData.slice(10 * 32, 10 * 32 + 32);
        let startIndex = 11 * 32;
        const bridgeIds = [];
        for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
            bridgeIds.push(proofData.slice(startIndex, startIndex + 32));
            startIndex += 32;
        }
        const defiDepositSums = [];
        for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
            defiDepositSums.push(proofData.slice(startIndex, startIndex + 32));
            startIndex += 32;
        }
        const assetIds = [];
        for (let i = 0; i < RollupProofData.NUMBER_OF_ASSETS; ++i) {
            assetIds.push(proofData.slice(startIndex, startIndex + 32));
            startIndex += 32;
        }
        const totalTxFees = [];
        for (let i = 0; i < RollupProofData.NUMBER_OF_ASSETS; ++i) {
            totalTxFees.push(proofData.slice(startIndex, startIndex + 32));
            startIndex += 32;
        }
        //! We should have some assertion that rollupSize shouldn't be 0.
        const innerProofSize = rollupSize;
        const innerProofData = [];
        for (let i = 0; i < innerProofSize; ++i) {
            const innerData = proofData.slice(startIndex, startIndex + inner_proof_1.InnerProofData.LENGTH);
            innerProofData[i] = inner_proof_1.InnerProofData.fromBuffer(innerData);
            startIndex += inner_proof_1.InnerProofData.LENGTH;
        }
        const recursiveProofOutput = proofData.slice(startIndex, startIndex + RollupProofData.LENGTH_RECURSIVE_PROOF_OUTPUT);
        startIndex += RollupProofData.LENGTH_RECURSIVE_PROOF_OUTPUT;
        const defiInteractionNotes = [];
        for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
            defiInteractionNotes.push(proofData.slice(startIndex, startIndex + 64));
            startIndex += 64;
        }
        const prevDefiInteractionHash = proofData.slice(startIndex, startIndex + 32);
        // Populate j/s tx viewingKey data.
        const viewingKeys = [];
        if (viewingKeyData) {
            for (let i = 0, jsCount = 0; i < innerProofSize; ++i) {
                if (innerProofData[i].proofId === 0 && !innerProofData[i].isPadding()) {
                    const offset = jsCount * viewing_key_1.ViewingKey.SIZE * 2;
                    const vk1 = new viewing_key_1.ViewingKey(viewingKeyData.slice(offset, offset + viewing_key_1.ViewingKey.SIZE));
                    const vk2 = new viewing_key_1.ViewingKey(viewingKeyData.slice(offset + viewing_key_1.ViewingKey.SIZE, offset + viewing_key_1.ViewingKey.SIZE * 2));
                    jsCount++;
                    viewingKeys.push([vk1, vk2]);
                }
                else {
                    viewingKeys.push([viewing_key_1.ViewingKey.EMPTY, viewing_key_1.ViewingKey.EMPTY]);
                }
            }
        }
        return new RollupProofData(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, innerProofData, recursiveProofOutput, defiInteractionNotes, prevDefiInteractionHash, viewingKeys);
    }
}
exports.RollupProofData = RollupProofData;
RollupProofData.NUMBER_OF_ASSETS = 4;
RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK = 4;
RollupProofData.NUM_ROLLUP_HEADER_INPUTS = 11 + RollupProofData.NUMBER_OF_ASSETS * 2 + RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK * 2;
RollupProofData.LENGTH_ROLLUP_HEADER_INPUTS = RollupProofData.NUM_ROLLUP_HEADER_INPUTS * 32;
RollupProofData.LENGTH_RECURSIVE_PROOF_OUTPUT = 16 * 32;
//# sourceMappingURL=data:application/json;base64,