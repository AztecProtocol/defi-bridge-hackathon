"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSdk = exports.createWalletSdk = void 0;
const tslib_1 = require("tslib");
const rollup_provider_1 = require("@aztec/barretenberg/rollup_provider");
const service_1 = require("@aztec/barretenberg/service");
const blockchain_1 = require("@aztec/blockchain");
const providers_1 = require("@ethersproject/providers");
const crypto_1 = require("crypto");
const debug_1 = tslib_1.__importDefault(require("debug"));
const ethers_1 = require("ethers");
const events_1 = require("events");
const create_sdk_1 = require("../core_sdk/create_sdk");
const sdk_1 = require("../sdk");
const signer_1 = require("../signer");
const user_1 = require("../user");
const wallet_sdk_user_1 = require("./wallet_sdk_user");
tslib_1.__exportStar(require("@aztec/barretenberg/asset"), exports);
tslib_1.__exportStar(require("./wallet_sdk_user"), exports);
tslib_1.__exportStar(require("./wallet_sdk_user_asset"), exports);
const debug = debug_1.default('bb:wallet_sdk');
async function createWalletSdk(ethereumProvider, serverUrl, sdkOptions = {}) {
    var _a;
    if (sdkOptions.debug) {
        debug_1.default.enable('bb:*');
    }
    const { assets, rollupContractAddress, chainId } = await service_1.getBlockchainStatus(serverUrl);
    const core = await create_sdk_1.createSdk(serverUrl, sdkOptions);
    // Set erase flag if requested or contract changed.
    if (sdkOptions.clearDb || !((_a = (await core.getRollupContractAddress())) === null || _a === void 0 ? void 0 : _a.equals(rollupContractAddress))) {
        debug('erasing database');
        await core.eraseDb();
    }
    const provider = new providers_1.Web3Provider(ethereumProvider);
    const { chainId: providerChainId } = await provider.getNetwork();
    if (chainId !== providerChainId) {
        throw new Error(`Provider chainId ${providerChainId} does not match rollup provider chainId ${chainId}.`);
    }
    const blockchain = new blockchain_1.ClientEthereumBlockchain(rollupContractAddress, assets, ethereumProvider);
    const ethSigner = new blockchain_1.Web3Signer(provider);
    return new WalletSdk(core, blockchain, ethSigner, sdkOptions);
}
exports.createWalletSdk = createWalletSdk;
class WalletSdk extends events_1.EventEmitter {
    constructor(core, blockchain, ethSigner, sdkOptions = {}) {
        super();
        this.core = core;
        this.blockchain = blockchain;
        this.ethSigner = ethSigner;
        this.sdkOptions = sdkOptions;
    }
    static create(ethereumProvider, serverUrl, sdkOptions = {}) {
        return createWalletSdk(ethereumProvider, serverUrl, sdkOptions);
    }
    async init() {
        // Forward all core sdk events.
        for (const e in sdk_1.SdkEvent) {
            const event = sdk_1.SdkEvent[e];
            this.core.on(event, (...args) => this.emit(event, ...args));
        }
        await this.core.init();
    }
    async destroy() {
        var _a;
        await ((_a = this.core) === null || _a === void 0 ? void 0 : _a.destroy());
        this.removeAllListeners();
    }
    async awaitSynchronised() {
        return this.core.awaitSynchronised();
    }
    isUserSynching(userId) {
        return this.core.isUserSynching(userId);
    }
    async awaitUserSynchronised(userId) {
        return this.core.awaitUserSynchronised(userId);
    }
    async awaitSettlement(txHash, timeout) {
        return this.core.awaitSettlement(txHash, timeout);
    }
    getLocalStatus() {
        return this.core.getLocalStatus();
    }
    async getRemoteStatus() {
        return this.core.getRemoteStatus();
    }
    async getFee(assetId, txType, speed = rollup_provider_1.SettlementTime.SLOW) {
        return this.core.getFee(assetId, txType, speed);
    }
    getUserPendingDeposit(assetId, account) {
        return this.blockchain.getUserPendingDeposit(assetId, account);
    }
    async getAddressFromAlias(alias, nonce) {
        return this.core.getAddressFromAlias(alias, nonce);
    }
    async getLatestUserNonce(publicKey) {
        return this.core.getLatestUserNonce(publicKey);
    }
    async isAliasAvailable(alias) {
        return this.core.isAliasAvailable(alias);
    }
    async mint(assetId, value, account, provider) {
        return this.blockchain.getAsset(assetId).mint(value, account, provider);
    }
    async approve(assetId, value, account, provider) {
        const { rollupContractAddress } = this.getLocalStatus();
        return this.blockchain.getAsset(assetId).approve(value, account, rollupContractAddress, provider);
    }
    async createPermitData(assetId, from, value, deadline) {
        const nonce = await this.blockchain.getAsset(assetId).getUserNonce(from);
        const { rollupContractAddress, chainId, assets } = this.getLocalStatus();
        const asset = assets[assetId];
        return blockchain_1.createPermitData(asset.name, from, rollupContractAddress, value, nonce, deadline, chainId, asset.address);
    }
    async createPermitArgs(assetId, from, value, deadline, provider) {
        if (!deadline) {
            const currentTimeInt = Math.floor(new Date().getTime() / 1000);
            const expireIn = BigInt(300);
            deadline = BigInt(currentTimeInt) + expireIn;
        }
        const permitData = await this.createPermitData(assetId, from, value, deadline);
        const ethSigner = provider ? new blockchain_1.Web3Signer(new providers_1.Web3Provider(provider)) : this.ethSigner;
        const signature = await ethSigner.signTypedData(permitData, from);
        const permitArgs = { approvalAmount: value, deadline, signature };
        return permitArgs;
    }
    async createDepositProof(assetId, from, to, value, fee, signer) {
        return this.createJoinSplitProof(assetId, to, value + fee, BigInt(0), BigInt(0), BigInt(0), value, signer, to, from);
    }
    async createWithdrawProof(assetId, userId, value, fee, signer, to) {
        return this.createJoinSplitProof(assetId, userId, BigInt(0), value, value + fee, BigInt(0), BigInt(0), signer, undefined, undefined, to);
    }
    async createTransferProof(assetId, userId, value, fee, signer, to) {
        return this.createJoinSplitProof(assetId, userId, BigInt(0), BigInt(0), value + fee, value, BigInt(0), signer, to);
    }
    async createJoinSplitProof(assetId, userId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, signer, noteRecipient, inputOwner, outputOwner) {
        if (publicOutput + recipientPrivateOutput + senderPrivateOutput > publicInput + privateInput) {
            throw new Error('Total output cannot be larger than total input.');
        }
        if (privateInput) {
            await this.checkNoteBalance(assetId, userId, privateInput);
        }
        if (recipientPrivateOutput && !noteRecipient) {
            throw new Error('No note recipient specified.');
        }
        if (publicOutput && !outputOwner) {
            throw new Error('No output address specified.');
        }
        if (publicInput && !inputOwner) {
            throw new Error('No input address specified.');
        }
        return this.core.createJoinSplitProof(assetId, userId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, signer, noteRecipient, inputOwner, outputOwner);
    }
    async createAccountProof(userId, signer, alias, nonce, migrate, newSigningPublicKey1, newSigningPublicKey2, newAccountPrivateKey) {
        const aliasHash = this.core.computeAliasHash(alias);
        return this.core.createAccountProof(userId, signer, aliasHash, nonce, migrate, newSigningPublicKey1, newSigningPublicKey2, newAccountPrivateKey);
    }
    async createDefiProof(bridgeId, userId, depositValue, txFee, signer) {
        if (!depositValue) {
            throw new Error('Deposit value must be greater than 0.');
        }
        await this.checkNoteBalance(bridgeId.inputAssetId, userId, depositValue + txFee);
        return this.core.createDefiProof(bridgeId, userId, depositValue, txFee, signer);
    }
    async signProof(proofOutput, inputOwner, provider) {
        const { signingData } = proofOutput;
        if (!signingData) {
            throw new Error('This proof does not require a signature.');
        }
        const msgHash = ethers_1.utils.keccak256(signingData);
        const digest = ethers_1.utils.arrayify(msgHash);
        const ethSigner = provider ? new blockchain_1.Web3Signer(new providers_1.Web3Provider(provider)) : this.ethSigner;
        return ethSigner.signMessage(Buffer.from(digest), inputOwner);
    }
    async sendProof(proofOutput, signature) {
        return this.core.sendProof(proofOutput, signature);
    }
    async approveProof(address, signingData, provider) {
        return this.blockchain.approveProof(address, signingData, provider);
    }
    async depositFundsToContract(assetId, from, value, permitArgs, provider) {
        return this.blockchain.depositPendingFunds(assetId, value, from, permitArgs, provider);
    }
    async getTransactionReceipt(txHash, interval = 1, timeout = 300) {
        const { minConfirmation, minConfirmationEHW } = this.sdkOptions;
        const confs = minConfirmationEHW !== undefined && (await this.core.getRemoteStatus()).blockchainStatus.escapeOpen
            ? minConfirmationEHW
            : minConfirmation || 0;
        return this.blockchain.getTransactionReceipt(txHash, interval, timeout, confs);
    }
    async isContract(address) {
        return this.blockchain.isContract(address);
    }
    async isProofApproved(account, signingData) {
        return !!(await this.blockchain.getUserProofApprovalStatus(account, signingData));
    }
    async checkNoteBalance(assetId, userId, value) {
        const balance = this.core.getBalance(assetId, userId);
        if (value > balance) {
            throw new Error('Not enough balance.');
        }
        const maxTxValue = await this.core.getMaxSpendableValue(assetId, userId);
        if (value > maxTxValue) {
            const messages = [`Failed to find 2 notes that sum to ${this.fromBaseUnits(assetId, value)}.`];
            if (maxTxValue) {
                messages.push(`Please make a transaction no more than ${this.fromBaseUnits(assetId, maxTxValue)}.`);
            }
            else {
                messages.push('Please wait for pending transactions to settle.');
            }
            throw new Error(messages.join(' '));
        }
    }
    async generateAccountRecoveryData(alias, publicKey, trustedThirdPartyPublicKeys, nonce) {
        const accountNonce = nonce !== undefined ? nonce : (await this.core.getLatestUserNonce(publicKey)) + 1;
        const accountId = new user_1.AccountId(publicKey, accountNonce);
        const socialRecoverySigner = this.core.createSchnorrSigner(crypto_1.randomBytes(32));
        const recoveryPublicKey = socialRecoverySigner.getPublicKey();
        return Promise.all(trustedThirdPartyPublicKeys.map(async (trustedThirdPartyPublicKey) => {
            const { signature } = await this.core.createAccountTx(socialRecoverySigner, alias, accountNonce, false, publicKey, undefined, trustedThirdPartyPublicKey);
            const recoveryData = new user_1.RecoveryData(accountId, signature);
            return new user_1.RecoveryPayload(trustedThirdPartyPublicKey, recoveryPublicKey, recoveryData);
        }));
    }
    async createAccount(userId, alias, newSigningPublicKey, recoveryPublicKey) {
        const user = this.getUserData(userId);
        if (user.nonce > 0) {
            throw new Error('User already registered.');
        }
        if (!(await this.isAliasAvailable(alias))) {
            throw new Error('Alias already registered.');
        }
        const signer = this.core.createSchnorrSigner(user.privateKey);
        const aliasHash = this.core.computeAliasHash(alias);
        return this.sendAccountProof(user.id, signer, aliasHash, 0, true, newSigningPublicKey, recoveryPublicKey);
    }
    async recoverAccount(recoveryPayload) {
        const { trustedThirdPartyPublicKey, recoveryPublicKey, recoveryData } = recoveryPayload;
        const { accountId, signature } = recoveryData;
        const recoverySigner = new signer_1.RecoverSignatureSigner(recoveryPublicKey, signature);
        return this.addSigningKeys(accountId, recoverySigner, trustedThirdPartyPublicKey);
    }
    async migrateAccount(userId, signer, newSigningPublicKey, recoveryPublicKey, newAccountPrivateKey) {
        const user = this.getUserData(userId);
        if (!user.aliasHash) {
            throw new Error('User not registered.');
        }
        return this.sendAccountProof(user.id, signer, user.aliasHash, user.nonce, true, newSigningPublicKey, recoveryPublicKey, newAccountPrivateKey);
    }
    async addSigningKeys(userId, signer, signingPublicKey1, signingPublicKey2) {
        const user = this.getUserData(userId);
        if (!user.aliasHash) {
            throw new Error('User not registered.');
        }
        return this.sendAccountProof(user.id, signer, user.aliasHash, user.nonce, false, signingPublicKey1, signingPublicKey2);
    }
    async getSigningKeys(userId) {
        return this.core.getSigningKeys(userId);
    }
    async userExists(userId) {
        return this.core.userExists(userId);
    }
    getUserData(userId) {
        return this.core.getUserData(userId);
    }
    getUsersData() {
        return this.core.getUsersData();
    }
    createSchnorrSigner(privateKey) {
        return this.core.createSchnorrSigner(privateKey);
    }
    async addUser(privateKey, nonce, noSync = false) {
        const userData = await this.core.addUser(privateKey, nonce, noSync);
        return new wallet_sdk_user_1.WalletSdkUser(userData.id, this);
    }
    async removeUser(userId) {
        return this.core.removeUser(userId);
    }
    /**
     * Returns a WalletSdkUser for a locally resolved user.
     */
    getUser(userId) {
        const userData = this.getUserData(userId);
        return new wallet_sdk_user_1.WalletSdkUser(userData.id, this);
    }
    getBalance(assetId, userId) {
        return this.core.getBalance(assetId, userId);
    }
    async getMaxSpendableValue(assetId, userId) {
        return this.core.getMaxSpendableValue(assetId, userId);
    }
    async getSpendableNotes(assetId, userId) {
        return this.core.getSpendableNotes(assetId, userId);
    }
    async getSpendableSum(assetId, userId) {
        return this.core.getSpendableSum(assetId, userId);
    }
    async getPublicBalance(assetId, ethAddress) {
        return this.blockchain.getAsset(assetId).balanceOf(ethAddress);
    }
    async getPublicAllowance(assetId, ethAddress) {
        const { rollupContractAddress } = this.getLocalStatus();
        return this.blockchain.getAsset(assetId).allowance(ethAddress, rollupContractAddress);
    }
    fromBaseUnits(assetId, value, precision) {
        return this.blockchain.getAsset(assetId).fromBaseUnits(value, precision);
    }
    toBaseUnits(assetId, value) {
        return this.blockchain.getAsset(assetId).toBaseUnits(value);
    }
    getAssetInfo(assetId) {
        return this.blockchain.getAsset(assetId).getStaticInfo();
    }
    async getJoinSplitTxs(userId) {
        return this.core.getJoinSplitTxs(userId);
    }
    async getAccountTxs(userId) {
        return this.core.getAccountTxs(userId);
    }
    async getDefiTxs(userId) {
        return this.core.getDefiTxs(userId);
    }
    async getNotes(userId) {
        return this.core.getNotes(userId);
    }
    derivePublicKey(privateKey) {
        return this.core.derivePublicKey(privateKey);
    }
    validateSignature(publicOwner, signature, signingData) {
        return blockchain_1.validateSignature(publicOwner, signature, signingData);
    }
    /**
     * Returns a globally resolved AccountId.
     */
    async getAccountId(aliasOrAddress, nonce) {
        return this.core.getAccountId(aliasOrAddress, nonce);
    }
    async sendAccountProof(userId, signer, aliasHash, nonce, migrate, newSigningPublicKey1, newSigningPublicKey2, newAccountPrivateKey) {
        const proofOutput = await this.core.createAccountProof(userId, signer, aliasHash, nonce, migrate, newSigningPublicKey1, newSigningPublicKey2, newAccountPrivateKey);
        let newUser;
        const { tx } = proofOutput;
        if (tx.migrated) {
            const { privateKey } = this.getUserData(userId);
            newUser = await this.core.addUser(newAccountPrivateKey || privateKey, tx.userId.nonce);
        }
        try {
            const txId = await this.sendProof(proofOutput);
            return txId;
        }
        catch (e) {
            if (newUser) {
                await this.removeUser(newUser.id);
            }
            throw e;
        }
    }
}
exports.WalletSdk = WalletSdk;
//# sourceMappingURL=data:application/json;base64,