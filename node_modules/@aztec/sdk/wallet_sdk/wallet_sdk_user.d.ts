/// <reference types="node" />
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { AssetId } from '@aztec/barretenberg/asset';
import { AccountId, RecoveryPayload } from '../user';
import { WalletSdk } from '.';
import { WalletSdkUserAsset } from './wallet_sdk_user_asset';
import { Signer } from '../signer';
export declare class WalletSdkUser {
    id: AccountId;
    private sdk;
    constructor(id: AccountId, sdk: WalletSdk);
    awaitSynchronised(): Promise<void>;
    createAccount(alias: string, newSigningPublicKey: GrumpkinAddress, recoveryPublicKey?: GrumpkinAddress): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    recoverAccount(recoveryPayload: RecoveryPayload): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    migrateAccount(signer: Signer, newSigningPublicKey: GrumpkinAddress, recoveryPublicKey?: GrumpkinAddress, newAccountPrivateKey?: Buffer): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    addSigningKeys(signer: Signer, signingPublicKey1: GrumpkinAddress, signingPublicKey2?: GrumpkinAddress): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    getSigningKeys(): Promise<Buffer[]>;
    getUserData(): import("../user").UserData;
    getJoinSplitTxs(): Promise<import("..").UserJoinSplitTx[]>;
    getAccountTxs(): Promise<import("..").UserAccountTx[]>;
    getNotes(): Promise<import("..").Note[]>;
    getAsset(assetId: AssetId): WalletSdkUserAsset;
    getSigner(): import("../signer").SchnorrSigner;
}
//# sourceMappingURL=wallet_sdk_user.d.ts.map