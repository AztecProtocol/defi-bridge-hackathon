import { EthAddress } from '@aztec/barretenberg/address';
import { AssetId } from '@aztec/barretenberg/asset';
import { PermitArgs, TxType } from '@aztec/barretenberg/blockchain';
import { Signer } from '../signer';
import { AccountId } from '../user';
import { WalletSdk } from '.';
export declare class WalletSdkUserAsset {
    userId: AccountId;
    assetId: AssetId;
    private sdk;
    constructor(userId: AccountId, assetId: AssetId, sdk: WalletSdk);
    info(): import("@aztec/barretenberg/blockchain").BlockchainAsset;
    balance(): bigint;
    publicBalance(account: EthAddress): Promise<bigint>;
    publicAllowance(account: EthAddress): Promise<bigint>;
    pendingDeposit(account: EthAddress): Promise<bigint>;
    getMaxSpendableValue(): Promise<bigint>;
    mint(value: bigint, account: EthAddress): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    approve(value: bigint, account: EthAddress): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    depositFundsToContract(from: EthAddress, value: bigint, permitArgs?: PermitArgs): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    createDepositProof(value: bigint, fee: bigint, signer: Signer, from: EthAddress): Promise<import("..").JoinSplitProofOutput>;
    createWithdrawProof(value: bigint, fee: bigint, signer: Signer, to: EthAddress): Promise<import("..").JoinSplitProofOutput>;
    createTransferProof(value: bigint, fee: bigint, signer: Signer, to: AccountId): Promise<import("..").JoinSplitProofOutput>;
    fromBaseUnits(value: bigint, precision?: number): string;
    toBaseUnits(value: string): bigint;
    getFee(txType: TxType): Promise<bigint>;
}
//# sourceMappingURL=wallet_sdk_user_asset.d.ts.map