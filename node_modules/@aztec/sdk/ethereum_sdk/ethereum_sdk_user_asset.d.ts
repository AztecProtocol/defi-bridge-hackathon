/// <reference types="node" />
import { EthAddress } from '@aztec/barretenberg/address';
import { AssetId } from '@aztec/barretenberg/asset';
import { PermitArgs, TxType } from '@aztec/barretenberg/blockchain';
import { ProofOutput } from '../proofs/proof_output';
import { AccountId } from '../user';
import { EthereumSdk } from './';
export declare class EthereumSdkUserAsset {
    private address;
    private accountId;
    private assetId;
    private sdk;
    constructor(address: EthAddress, accountId: AccountId, assetId: AssetId, sdk: EthereumSdk);
    getInfo(): import("@aztec/barretenberg/blockchain").BlockchainAsset;
    publicBalance(): Promise<bigint>;
    publicAllowance(): Promise<bigint>;
    pendingDeposit(): Promise<bigint>;
    balance(): bigint;
    getMaxSpendableValue(): Promise<bigint>;
    mint(value: bigint): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    approve(value: bigint): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    depositFundsToContract(value: bigint, permitArgs?: PermitArgs): Promise<import("@aztec/barretenberg/tx_hash").TxHash>;
    createDepositProof(value: bigint, fee: bigint): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    createWithdrawProof(value: bigint, fee: bigint): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    createTransferProof(value: bigint, fee: bigint, to: AccountId): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    signProof(proofOutput: ProofOutput): Promise<Buffer>;
    fromBaseUnits(value: bigint, precision?: number): string;
    toBaseUnits(value: string): bigint;
    getFee(txType: TxType): Promise<bigint>;
}
//# sourceMappingURL=ethereum_sdk_user_asset.d.ts.map