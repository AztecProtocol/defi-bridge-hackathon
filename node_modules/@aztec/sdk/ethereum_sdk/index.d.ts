/// <reference types="node" />
import { EthAddress, GrumpkinAddress } from '@aztec/barretenberg/address';
import { AssetId } from '@aztec/barretenberg/asset';
import { EthereumSigner, PermitArgs, TxType } from '@aztec/barretenberg/blockchain';
import { SettlementTime } from '@aztec/barretenberg/rollup_provider';
import { TxHash } from '@aztec/barretenberg/tx_hash';
import { EthereumProvider } from '@aztec/blockchain';
import { EventEmitter } from 'events';
import { SdkOptions } from '../core_sdk/create_sdk';
import { ProofOutput } from '../proofs/proof_output';
import { AccountId } from '../user';
import { WalletSdk } from '../wallet_sdk';
import { Database } from './database';
import { EthereumSdkUser } from './ethereum_sdk_user';
export * from './ethereum_sdk_user';
export * from './ethereum_sdk_user_asset';
export declare function createEthSdk(ethereumProvider: EthereumProvider, serverUrl: string, sdkOptions?: SdkOptions): Promise<EthereumSdk>;
export declare class EthereumSdk extends EventEmitter {
    private walletSdk;
    private db;
    private ethSigner;
    constructor(walletSdk: WalletSdk, db: Database, ethSigner: EthereumSigner);
    init(): Promise<void>;
    destroy(): Promise<void>;
    isUserSynching(userId: AccountId): boolean;
    awaitUserSynchronised(accountId: AccountId): Promise<void>;
    awaitSynchronised(): Promise<void>;
    awaitSettlement(txHash: TxHash, timeout?: number): Promise<void>;
    getLocalStatus(): {
        chainId: number;
        rollupContractAddress: EthAddress;
        syncedToRollup: number;
        latestRollupId: number;
        initState: import("../sdk").SdkInitState;
        dataSize: number;
        dataRoot: Buffer;
        assets: import("@aztec/barretenberg/blockchain").BlockchainAsset[];
    };
    getRemoteStatus(): Promise<import("@aztec/barretenberg/rollup_provider").RollupProviderStatus>;
    getFee(assetId: AssetId, txType: TxType, speed?: SettlementTime): Promise<bigint>;
    getUserPendingDeposit(assetId: AssetId, account: EthAddress): Promise<bigint>;
    private getPublicKeyFromAddress;
    isAliasAvailable(alias: string): Promise<boolean>;
    approve(assetId: AssetId, value: bigint, ethAddress: EthAddress): Promise<TxHash>;
    mint(assetId: AssetId, value: bigint, ethAddress: EthAddress): Promise<TxHash>;
    depositFundsToContract(assetId: AssetId, from: EthAddress, value: bigint, permitArgs?: PermitArgs): Promise<TxHash>;
    createDepositProof(assetId: AssetId, from: EthAddress, to: AccountId, value: bigint, fee: bigint): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    createWithdrawProof(assetId: AssetId, from: AccountId, to: EthAddress, value: bigint, fee: bigint): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    createTransferProof(assetId: AssetId, from: AccountId, to: AccountId, value: bigint, fee: bigint): Promise<import("../proofs/proof_output").JoinSplitProofOutput>;
    createAccount(accountId: AccountId, alias: string, newSigningPublicKey: GrumpkinAddress, recoveryPublicKey?: GrumpkinAddress): Promise<TxHash>;
    signProof(proofOutput: ProofOutput, inputOwner: EthAddress, provider?: EthereumProvider): Promise<Buffer>;
    sendProof(proofOutput: ProofOutput, signature?: Buffer): Promise<TxHash>;
    getUserData(accountId: AccountId): import("../user").UserData;
    getAccountId(aliasOrAddress: string | GrumpkinAddress): Promise<AccountId>;
    private deriveGrumpkinPrivateKey;
    addUser(ethAddress: EthAddress): Promise<EthereumSdkUser>;
    removeUser(address: EthAddress, accountId: AccountId): Promise<void>;
    getUser(address: EthAddress): Promise<EthereumSdkUser | undefined>;
    getBalance(assetId: AssetId, accountId: AccountId): bigint;
    getMaxSpendableValue(assetId: AssetId, accountId: AccountId): Promise<bigint>;
    getPublicBalance(assetId: AssetId, ethAddress: EthAddress): Promise<bigint>;
    getPublicAllowance(assetId: AssetId, ethAddress: EthAddress): Promise<bigint>;
    fromBaseUnits(assetId: AssetId, value: bigint, precision?: number): string;
    toBaseUnits(assetId: AssetId, value: string): bigint;
    getAssetInfo(assetId: AssetId): import("@aztec/barretenberg/blockchain").BlockchainAsset;
    getJoinSplitTxs(accountId: AccountId): Promise<import("..").UserJoinSplitTx[]>;
    getAccountTxs(accountId: AccountId): Promise<import("..").UserAccountTx[]>;
    getDefiTxs(accountId: AccountId): Promise<import("..").UserDefiTx[]>;
    getNotes(accountId: AccountId): Promise<import("..").Note[]>;
}
//# sourceMappingURL=index.d.ts.map