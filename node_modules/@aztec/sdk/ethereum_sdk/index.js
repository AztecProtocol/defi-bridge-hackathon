"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumSdk = exports.createEthSdk = void 0;
const tslib_1 = require("tslib");
const rollup_provider_1 = require("@aztec/barretenberg/rollup_provider");
const service_1 = require("@aztec/barretenberg/service");
const blockchain_1 = require("@aztec/blockchain");
const providers_1 = require("@ethersproject/providers");
const debug_1 = tslib_1.__importDefault(require("debug"));
const detect_node_1 = tslib_1.__importDefault(require("detect-node"));
const events_1 = require("events");
const typeorm_1 = require("typeorm");
const create_sdk_1 = require("../core_sdk/create_sdk");
const sdk_1 = require("../sdk");
const wallet_sdk_1 = require("../wallet_sdk");
const database_1 = require("./database");
const ethereum_sdk_user_1 = require("./ethereum_sdk_user");
tslib_1.__exportStar(require("./ethereum_sdk_user"), exports);
tslib_1.__exportStar(require("./ethereum_sdk_user_asset"), exports);
const debug = debug_1.default('bb:ethereum_sdk');
async function getDb(dbPath = 'data') {
    if (detect_node_1.default) {
        const config = database_1.getOrmConfig(dbPath);
        const connection = await typeorm_1.createConnection(config);
        return new database_1.SQLDatabase(connection);
    }
    else {
        return new database_1.DexieDatabase();
    }
}
async function createEthSdk(ethereumProvider, serverUrl, sdkOptions = {}) {
    var _a;
    const { assets, rollupContractAddress, chainId } = await service_1.getBlockchainStatus(serverUrl);
    const core = await create_sdk_1.createSdk(serverUrl, sdkOptions);
    const db = await getDb(sdkOptions.dbPath);
    await db.init();
    // Set erase flag if requested or contract changed.
    if (sdkOptions.clearDb || !((_a = (await core.getRollupContractAddress())) === null || _a === void 0 ? void 0 : _a.equals(rollupContractAddress))) {
        debug('erasing database');
        await db.clear();
        await core.eraseDb();
    }
    const provider = new providers_1.Web3Provider(ethereumProvider);
    const { chainId: providerChainId } = await provider.getNetwork();
    if (chainId !== providerChainId) {
        throw new Error(`Provider chainId ${providerChainId} does not match rollup provider chainId ${chainId}.`);
    }
    const blockchain = new blockchain_1.ClientEthereumBlockchain(rollupContractAddress, assets, ethereumProvider);
    const ethSigner = new blockchain_1.Web3Signer(provider);
    const walletSdk = new wallet_sdk_1.WalletSdk(core, blockchain, ethSigner, sdkOptions);
    return new EthereumSdk(walletSdk, db, ethSigner);
}
exports.createEthSdk = createEthSdk;
class EthereumSdk extends events_1.EventEmitter {
    constructor(walletSdk, db, ethSigner) {
        super();
        this.walletSdk = walletSdk;
        this.db = db;
        this.ethSigner = ethSigner;
    }
    async init() {
        // Forward all walletSdk events.
        for (const e in sdk_1.SdkEvent) {
            const event = sdk_1.SdkEvent[e];
            this.walletSdk.on(event, (...args) => this.emit(event, ...args));
        }
        await this.walletSdk.init();
        this.emit(sdk_1.SdkEvent.LOG, 'Synching data tree state...');
        const start = new Date().getTime();
        await this.walletSdk.awaitSynchronised();
        const time = (new Date().getTime() - start) / 1000;
        this.emit(sdk_1.SdkEvent.LOG, `Sync took ${time.toFixed(0)} seconds.`);
    }
    async destroy() {
        var _a, _b;
        await ((_a = this.walletSdk) === null || _a === void 0 ? void 0 : _a.destroy());
        await ((_b = this.db) === null || _b === void 0 ? void 0 : _b.close());
        this.removeAllListeners();
    }
    isUserSynching(userId) {
        return this.walletSdk.isUserSynching(userId);
    }
    async awaitUserSynchronised(accountId) {
        return this.walletSdk.awaitUserSynchronised(accountId);
    }
    async awaitSynchronised() {
        return this.walletSdk.awaitSynchronised();
    }
    async awaitSettlement(txHash, timeout) {
        return this.walletSdk.awaitSettlement(txHash, timeout);
    }
    getLocalStatus() {
        return this.walletSdk.getLocalStatus();
    }
    async getRemoteStatus() {
        return this.walletSdk.getRemoteStatus();
    }
    async getFee(assetId, txType, speed = rollup_provider_1.SettlementTime.SLOW) {
        return this.walletSdk.getFee(assetId, txType, speed);
    }
    getUserPendingDeposit(assetId, account) {
        return this.walletSdk.getUserPendingDeposit(assetId, account);
    }
    async getPublicKeyFromAddress(address) {
        const account = await this.db.getAccount(address);
        return account === null || account === void 0 ? void 0 : account.accountPublicKey;
    }
    async isAliasAvailable(alias) {
        return this.walletSdk.isAliasAvailable(alias);
    }
    async approve(assetId, value, ethAddress) {
        return this.walletSdk.approve(assetId, value, ethAddress);
    }
    async mint(assetId, value, ethAddress) {
        return this.walletSdk.mint(assetId, value, ethAddress);
    }
    async depositFundsToContract(assetId, from, value, permitArgs) {
        return this.walletSdk.depositFundsToContract(assetId, from, value, permitArgs);
    }
    async createDepositProof(assetId, from, to, value, fee) {
        const userData = this.walletSdk.getUserData(to);
        const aztecSigner = this.walletSdk.createSchnorrSigner(userData.privateKey);
        return this.walletSdk.createDepositProof(assetId, from, to, value, fee, aztecSigner);
    }
    async createWithdrawProof(assetId, from, to, value, fee) {
        const userData = this.walletSdk.getUserData(from);
        const aztecSigner = this.walletSdk.createSchnorrSigner(userData.privateKey);
        return this.walletSdk.createWithdrawProof(assetId, from, value, fee, aztecSigner, to);
    }
    async createTransferProof(assetId, from, to, value, fee) {
        const userData = this.walletSdk.getUserData(from);
        const aztecSigner = this.walletSdk.createSchnorrSigner(userData.privateKey);
        return this.walletSdk.createTransferProof(assetId, from, value, fee, aztecSigner, to);
    }
    async createAccount(accountId, alias, newSigningPublicKey, recoveryPublicKey) {
        return await this.walletSdk.createAccount(accountId, alias, newSigningPublicKey, recoveryPublicKey);
    }
    async signProof(proofOutput, inputOwner, provider) {
        return this.walletSdk.signProof(proofOutput, inputOwner, provider);
    }
    async sendProof(proofOutput, signature) {
        return this.walletSdk.sendProof(proofOutput, signature);
    }
    getUserData(accountId) {
        return this.walletSdk.getUserData(accountId);
    }
    async getAccountId(aliasOrAddress) {
        return this.walletSdk.getAccountId(aliasOrAddress);
    }
    async deriveGrumpkinPrivateKey(address) {
        return (await this.ethSigner.signMessage(Buffer.from('Link Aztec account.'), address)).slice(0, 32);
    }
    async addUser(ethAddress) {
        const privateKey = await this.deriveGrumpkinPrivateKey(ethAddress);
        const user = await this.walletSdk.addUser(privateKey);
        await this.db.setAccount({ ethAddress, accountPublicKey: user.getUserData().publicKey });
        return new ethereum_sdk_user_1.EthereumSdkUser(ethAddress, user.id, this);
    }
    async removeUser(address, accountId) {
        await this.db.deleteAccount(address);
        return this.walletSdk.removeUser(accountId);
    }
    async getUser(address) {
        const pubKey = await this.getPublicKeyFromAddress(address);
        if (!pubKey) {
            return;
        }
        const accountId = await this.walletSdk.getAccountId(pubKey);
        return new ethereum_sdk_user_1.EthereumSdkUser(address, accountId, this);
    }
    getBalance(assetId, accountId) {
        return this.walletSdk.getBalance(assetId, accountId);
    }
    async getMaxSpendableValue(assetId, accountId) {
        return this.walletSdk.getMaxSpendableValue(assetId, accountId);
    }
    async getPublicBalance(assetId, ethAddress) {
        return this.walletSdk.getPublicBalance(assetId, ethAddress);
    }
    async getPublicAllowance(assetId, ethAddress) {
        return this.walletSdk.getPublicAllowance(assetId, ethAddress);
    }
    fromBaseUnits(assetId, value, precision) {
        return this.walletSdk.fromBaseUnits(assetId, value, precision);
    }
    toBaseUnits(assetId, value) {
        return this.walletSdk.toBaseUnits(assetId, value);
    }
    getAssetInfo(assetId) {
        return this.walletSdk.getAssetInfo(assetId);
    }
    async getJoinSplitTxs(accountId) {
        return this.walletSdk.getJoinSplitTxs(accountId);
    }
    async getAccountTxs(accountId) {
        return this.walletSdk.getAccountTxs(accountId);
    }
    async getDefiTxs(accountId) {
        return this.walletSdk.getDefiTxs(accountId);
    }
    async getNotes(accountId) {
        return this.walletSdk.getNotes(accountId);
    }
}
exports.EthereumSdk = EthereumSdk;
//# sourceMappingURL=data:application/json;base64,