/// <reference types="node" />
import { EthAddress } from '@aztec/barretenberg/address';
import { EventEmitter } from 'events';
import { SdkOptions } from '../core_sdk/create_sdk';
import { EthereumSdk, EthereumSdkUser } from '../ethereum_sdk';
export declare enum AppInitState {
    UNINITIALIZED = "UNINITIALIZED",
    INITIALIZING = "INITIALIZING",
    INITIALIZED = "INITIALIZED"
}
export declare enum AppInitAction {
    LINK_PROVIDER_ACCOUNT = "LINK_PROVIDER_ACCOUNT",
    AWAITING_PROVIDER_SIGNATURE = "AWAITING_PROVIDER_SIGNATURE",
    AWAITING_PERMISSION_TO_LINK = "AWAITING_PERMISSION_TO_LINK",
    CHANGE_NETWORK = "CHANGE_NETWORK"
}
export declare enum AppEvent {
    UPDATED_INIT_STATE = "APPEVENT_UPDATED_INIT_STATE"
}
export interface AppInitStatus {
    initState: AppInitState;
    initAction?: AppInitAction;
    network?: string;
}
/**
 * Simplifies integration of the CoreSdk with a provider such as MetaMask.
 * The event stream will always be ordered like, but may not always include, the following:
 *
 * Initialization starts:
 * UPDATED_INIT_STATE => INITIALIZING, LINK_PROVIDER_ACCOUNT
 * UPDATED_INIT_STATE => INITIALIZING, CHANGE_NETWORK
 * UPDATED_INIT_STATE => INITIALIZING, "info message 1"
 * UPDATED_INIT_STATE => INITIALIZING, "info message 2"
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user accepts, otherwise destroy)
 * UPDATED_INIT_STATE => INITIALIZED, address 1
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PERMISSION_TO_LINK (user changes to unlinked account)
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user rejects)
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PERMISSION_TO_LINK
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user accepts)
 * UPDATED_INIT_STATE => INITIALIZED, address 2
 * UPDATED_INIT_STATE => INITIALIZED, address 1 (user changes to linked account)
 * UPDATED_INIT_STATE => DESTROYED
 */
export declare class WebSdk extends EventEmitter {
    private ethereumProvider;
    private sdk;
    private ethProvider;
    private initStatus;
    private user?;
    constructor(ethereumProvider: any);
    init(serverUrl: string, sdkOptions?: SdkOptions): Promise<void>;
    private updateInitStatus;
    private accountChanged;
    private networkChanged;
    private initLinkAccount;
    linkAccount: () => Promise<void>;
    loadLatestAccount(): Promise<void>;
    destroy(): Promise<void>;
    getSdk(): EthereumSdk;
    isInitialized(): boolean;
    isCorrectNetwork(): boolean;
    getInitStatus(): AppInitStatus;
    getUser(): EthereumSdkUser;
    getAddress(): EthAddress;
}
//# sourceMappingURL=index.d.ts.map