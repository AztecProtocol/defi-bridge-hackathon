"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSdk = exports.AppEvent = exports.AppInitAction = exports.AppInitState = void 0;
const tslib_1 = require("tslib");
const service_1 = require("@aztec/barretenberg/service");
const debug_1 = tslib_1.__importDefault(require("debug"));
const events_1 = require("events");
const ethereum_sdk_1 = require("../ethereum_sdk");
const sdk_1 = require("../sdk");
const eth_provider_1 = require("./eth_provider");
const debug = debug_1.default('bb:websdk');
var AppInitState;
(function (AppInitState) {
    AppInitState["UNINITIALIZED"] = "UNINITIALIZED";
    AppInitState["INITIALIZING"] = "INITIALIZING";
    AppInitState["INITIALIZED"] = "INITIALIZED";
})(AppInitState = exports.AppInitState || (exports.AppInitState = {}));
var AppInitAction;
(function (AppInitAction) {
    AppInitAction["LINK_PROVIDER_ACCOUNT"] = "LINK_PROVIDER_ACCOUNT";
    AppInitAction["AWAITING_PROVIDER_SIGNATURE"] = "AWAITING_PROVIDER_SIGNATURE";
    AppInitAction["AWAITING_PERMISSION_TO_LINK"] = "AWAITING_PERMISSION_TO_LINK";
    AppInitAction["CHANGE_NETWORK"] = "CHANGE_NETWORK";
})(AppInitAction = exports.AppInitAction || (exports.AppInitAction = {}));
var AppEvent;
(function (AppEvent) {
    AppEvent["UPDATED_INIT_STATE"] = "APPEVENT_UPDATED_INIT_STATE";
})(AppEvent = exports.AppEvent || (exports.AppEvent = {}));
/**
 * Simplifies integration of the CoreSdk with a provider such as MetaMask.
 * The event stream will always be ordered like, but may not always include, the following:
 *
 * Initialization starts:
 * UPDATED_INIT_STATE => INITIALIZING, LINK_PROVIDER_ACCOUNT
 * UPDATED_INIT_STATE => INITIALIZING, CHANGE_NETWORK
 * UPDATED_INIT_STATE => INITIALIZING, "info message 1"
 * UPDATED_INIT_STATE => INITIALIZING, "info message 2"
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user accepts, otherwise destroy)
 * UPDATED_INIT_STATE => INITIALIZED, address 1
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PERMISSION_TO_LINK (user changes to unlinked account)
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user rejects)
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PERMISSION_TO_LINK
 * UPDATED_INIT_STATE => INITIALIZING, AWAITING_PROVIDER_SIGNATURE (user accepts)
 * UPDATED_INIT_STATE => INITIALIZED, address 2
 * UPDATED_INIT_STATE => INITIALIZED, address 1 (user changes to linked account)
 * UPDATED_INIT_STATE => DESTROYED
 */
class WebSdk extends events_1.EventEmitter {
    constructor(ethereumProvider) {
        super();
        this.ethereumProvider = ethereumProvider;
        this.initStatus = { initState: AppInitState.UNINITIALIZED };
        this.accountChanged = async (account) => {
            if (!account) {
                this.destroy();
                return;
            }
            this.user = await this.sdk.getUser(account);
            if (!this.user) {
                // We are initializing until the account is added to sdk.
                debug(`provider emitted account changed to ${account}, requesting permission to link...`);
                this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.AWAITING_PERMISSION_TO_LINK);
            }
            else {
                this.updateInitStatus(AppInitState.INITIALIZED);
            }
        };
        this.networkChanged = () => {
            if (!this.isCorrectNetwork()) {
                this.destroy();
            }
        };
        this.linkAccount = async () => {
            const account = this.ethProvider.getAccount();
            if (!account) {
                this.destroy();
                return;
            }
            this.user = await this.sdk.getUser(account);
            if (!this.user) {
                // Call to addUser will attempt to perform a signature. Alert client.
                this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.AWAITING_PROVIDER_SIGNATURE);
                try {
                    this.user = await this.sdk.addUser(account);
                }
                catch (e) {
                    debug(e);
                    this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.AWAITING_PERMISSION_TO_LINK);
                    return;
                }
            }
            this.updateInitStatus(AppInitState.INITIALIZED);
        };
    }
    async init(serverUrl, sdkOptions = {}) {
        if (sdkOptions.debug) {
            debug_1.default.enable('bb:*');
        }
        this.ethereumProvider.autoRefreshOnNetworkChange = false;
        debug('initializing app...');
        try {
            const { chainId: rollupProviderChainId } = await service_1.getBlockchainStatus(serverUrl);
            this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.LINK_PROVIDER_ACCOUNT);
            this.ethProvider = new eth_provider_1.EthProvider(this.ethereumProvider);
            await this.ethProvider.init();
            // If our network doesn't match that of the rollup provider, request it be changed until it does.
            this.initStatus.network = eth_provider_1.chainIdToNetwork(rollupProviderChainId);
            if (rollupProviderChainId !== this.ethProvider.getChainId()) {
                this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.CHANGE_NETWORK);
                while (rollupProviderChainId !== this.ethProvider.getChainId()) {
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }
            this.sdk = await ethereum_sdk_1.createEthSdk(this.ethereumProvider, serverUrl, sdkOptions);
            // Forward all sdk events. This allows subscribing to the events on the App, before we have called init().
            for (const e in sdk_1.SdkEvent) {
                const event = sdk_1.SdkEvent[e];
                this.sdk.on(event, (...args) => this.emit(event, ...args));
            }
            await this.sdk.init();
            // Link account. Will be INITIALZED once complete.
            await this.initLinkAccount();
            // Handle account changes.
            this.ethProvider.on(eth_provider_1.EthProviderEvent.UPDATED_ACCOUNT, this.accountChanged);
            // Ensure we're still on correct network, and attach handler.
            // Any network changes at this point result in destruction.
            this.networkChanged();
            this.ethProvider.on(eth_provider_1.EthProviderEvent.UPDATED_NETWORK, this.networkChanged);
            debug('initialization complete.');
        }
        catch (err) {
            this.destroy();
            throw err;
        }
    }
    updateInitStatus(initState, initAction) {
        const previous = this.initStatus;
        this.initStatus = {
            ...this.initStatus,
            initState,
            initAction,
        };
        // debug(`state ${previous.initState} -> ${initState}: ${initAction}`);
        this.emit(AppEvent.UPDATED_INIT_STATE, { ...this.initStatus }, previous);
    }
    async initLinkAccount() {
        const account = this.ethProvider.getAccount();
        if (!account) {
            throw new Error('Account access withdrawn.');
        }
        this.user = await this.sdk.getUser(account);
        if (!this.user) {
            // Call to addUser will attempt to perform a signature. Alert client.
            this.updateInitStatus(AppInitState.INITIALIZING, AppInitAction.AWAITING_PROVIDER_SIGNATURE);
            try {
                this.user = await this.sdk.addUser(account);
            }
            catch (e) {
                debug(e);
                throw new Error('Account link rejected.');
            }
        }
        this.updateInitStatus(AppInitState.INITIALIZED);
    }
    async loadLatestAccount() {
        this.user = await this.sdk.getUser(this.ethProvider.getAccount());
    }
    async destroy() {
        var _a, _b;
        debug('destroying app...');
        await ((_a = this.sdk) === null || _a === void 0 ? void 0 : _a.destroy());
        (_b = this.ethProvider) === null || _b === void 0 ? void 0 : _b.destroy();
        this.user === undefined;
        this.updateInitStatus(AppInitState.UNINITIALIZED);
    }
    getSdk() {
        return this.sdk;
    }
    isInitialized() {
        return this.getInitStatus().initState === AppInitState.INITIALIZED;
    }
    isCorrectNetwork() {
        const { chainId } = this.sdk.getLocalStatus();
        return this.ethProvider.getChainId() === chainId;
    }
    getInitStatus() {
        return this.initStatus;
    }
    getUser() {
        return this.user;
    }
    getAddress() {
        return this.ethProvider.getAccount();
    }
}
exports.WebSdk = WebSdk;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2ViX3Nkay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EseURBQWtFO0FBQ2xFLDBEQUFnQztBQUNoQyxtQ0FBc0M7QUFFdEMsa0RBQTZFO0FBQzdFLGdDQUFrQztBQUNsQyxpREFBaUY7QUFFakYsTUFBTSxLQUFLLEdBQUcsZUFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXZDLElBQVksWUFJWDtBQUpELFdBQVksWUFBWTtJQUN0QiwrQ0FBK0IsQ0FBQTtJQUMvQiw2Q0FBNkIsQ0FBQTtJQUM3QiwyQ0FBMkIsQ0FBQTtBQUM3QixDQUFDLEVBSlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFJdkI7QUFFRCxJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDdkIsZ0VBQStDLENBQUE7SUFDL0MsNEVBQTJELENBQUE7SUFDM0QsNEVBQTJELENBQUE7SUFDM0Qsa0RBQWlDLENBQUE7QUFDbkMsQ0FBQyxFQUxXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBS3hCO0FBRUQsSUFBWSxRQUVYO0FBRkQsV0FBWSxRQUFRO0lBQ2xCLDhEQUFrRCxDQUFBO0FBQ3BELENBQUMsRUFGVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUVuQjtBQVFEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSCxNQUFhLE1BQU8sU0FBUSxxQkFBWTtJQU10QyxZQUFvQixnQkFBcUI7UUFDdkMsS0FBSyxFQUFFLENBQUM7UUFEVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUs7UUFIakMsZUFBVSxHQUFrQixFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUM7UUF1RXRFLG1CQUFjLEdBQUcsS0FBSyxFQUFFLE9BQW9CLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FB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