"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DexieDatabase = void 0;
const tslib_1 = require("tslib");
const account_id_1 = require("@aztec/barretenberg/account_id");
const address_1 = require("@aztec/barretenberg/address");
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const tx_hash_1 = require("@aztec/barretenberg/tx_hash");
const dexie_1 = tslib_1.__importDefault(require("dexie"));
const user_1 = require("../user");
const user_tx_1 = require("../user_tx");
const MAX_BYTE_LENGTH = 100000000;
const toSubKeyName = (name, index) => `${name}__${index}`;
class DexieNote {
    constructor(id, assetId, value, dataEntry, secret, nullifier, nullified, owner) {
        this.id = id;
        this.assetId = assetId;
        this.value = value;
        this.dataEntry = dataEntry;
        this.secret = secret;
        this.nullifier = nullifier;
        this.nullified = nullified;
        this.owner = owner;
    }
}
const noteToDexieNote = (note) => new DexieNote(note.index, note.assetId, note.value.toString(), note.dataEntry, note.secret, note.nullifier, note.nullified ? 1 : 0, new Uint8Array(note.owner.toBuffer()));
const dexieNoteToNote = ({ id, value, dataEntry, secret, nullifier, nullified, owner, ...rest }) => ({
    ...rest,
    index: id,
    value: BigInt(value),
    dataEntry: Buffer.from(dataEntry),
    secret: Buffer.from(secret),
    nullifier: Buffer.from(nullifier),
    nullified: !!nullified,
    owner: user_1.AccountId.fromBuffer(Buffer.from(owner)),
});
class DexieClaim {
    constructor(nullifier, txHash, secret, owner) {
        this.nullifier = nullifier;
        this.txHash = txHash;
        this.secret = secret;
        this.owner = owner;
    }
}
const toDexieClaim = (claim) => new DexieClaim(new Uint8Array(claim.nullifier), new Uint8Array(claim.txHash.toBuffer()), new Uint8Array(claim.secret), new Uint8Array(claim.owner.toBuffer()));
const fromDexieClaim = ({ nullifier, txHash, secret, owner }) => ({
    nullifier: Buffer.from(nullifier),
    txHash: new tx_hash_1.TxHash(Buffer.from(txHash)),
    secret: Buffer.from(secret),
    owner: user_1.AccountId.fromBuffer(Buffer.from(owner)),
});
class DexieKey {
    constructor(name, value, size, count) {
        this.name = name;
        this.value = value;
        this.size = size;
        this.count = count;
    }
}
class DexieUser {
    constructor(id, privateKey, syncedToRollup, aliasHash) {
        this.id = id;
        this.privateKey = privateKey;
        this.syncedToRollup = syncedToRollup;
        this.aliasHash = aliasHash;
    }
}
const userToDexieUser = ({ id, privateKey, aliasHash, syncedToRollup }) => new DexieUser(new Uint8Array(id.toBuffer()), new Uint8Array(privateKey), syncedToRollup, aliasHash ? new Uint8Array(aliasHash.toBuffer()) : undefined);
const dexieUserToUser = (user) => {
    const id = user_1.AccountId.fromBuffer(Buffer.from(user.id));
    return {
        id,
        publicKey: id.publicKey,
        nonce: id.nonce,
        privateKey: Buffer.from(user.privateKey),
        syncedToRollup: user.syncedToRollup,
        aliasHash: user.aliasHash ? new account_id_1.AliasHash(Buffer.from(user.aliasHash)) : undefined,
    };
};
class DexieUserTx {
    constructor(txHash, userId, proofId, settled) {
        this.txHash = txHash;
        this.userId = userId;
        this.proofId = proofId;
        this.settled = settled;
    }
}
class DexieJoinSplitTx {
    constructor(txHash, userId, proofId, assetId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, ownedByUser, created, settled, // dexie does not sort a column correctly if some values are undefined
    inputOwner, outputOwner) {
        this.txHash = txHash;
        this.userId = userId;
        this.proofId = proofId;
        this.assetId = assetId;
        this.publicInput = publicInput;
        this.publicOutput = publicOutput;
        this.privateInput = privateInput;
        this.recipientPrivateOutput = recipientPrivateOutput;
        this.senderPrivateOutput = senderPrivateOutput;
        this.ownedByUser = ownedByUser;
        this.created = created;
        this.settled = settled;
        this.inputOwner = inputOwner;
        this.outputOwner = outputOwner;
    }
}
const toDexieJoinSplitTx = (tx) => new DexieJoinSplitTx(new Uint8Array(tx.txHash.toBuffer()), new Uint8Array(tx.userId.toBuffer()), client_proofs_1.ProofId.JOIN_SPLIT, tx.assetId, tx.publicInput.toString(), tx.publicOutput.toString(), tx.privateInput.toString(), tx.recipientPrivateOutput.toString(), tx.senderPrivateOutput.toString(), tx.ownedByUser, tx.created, tx.settled ? tx.settled.getTime() : 0, tx.inputOwner ? new Uint8Array(tx.inputOwner.toBuffer()) : undefined, tx.outputOwner ? new Uint8Array(tx.outputOwner.toBuffer()) : undefined);
const fromDexieJoinSplitTx = ({ txHash, userId, assetId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, inputOwner, outputOwner, ownedByUser, created, settled, }) => new user_tx_1.UserJoinSplitTx(new tx_hash_1.TxHash(Buffer.from(txHash)), user_1.AccountId.fromBuffer(Buffer.from(userId)), assetId, BigInt(publicInput), BigInt(publicOutput), BigInt(privateInput), BigInt(recipientPrivateOutput), BigInt(senderPrivateOutput), inputOwner ? new address_1.EthAddress(Buffer.from(inputOwner)) : undefined, outputOwner ? new address_1.EthAddress(Buffer.from(outputOwner)) : undefined, ownedByUser, created, settled ? new Date(settled) : undefined);
class DexieAccountTx {
    constructor(txHash, userId, proofId, aliasHash, migrated, created, settled, newSigningPubKey1, newSigningPubKey2) {
        this.txHash = txHash;
        this.userId = userId;
        this.proofId = proofId;
        this.aliasHash = aliasHash;
        this.migrated = migrated;
        this.created = created;
        this.settled = settled;
        this.newSigningPubKey1 = newSigningPubKey1;
        this.newSigningPubKey2 = newSigningPubKey2;
    }
}
const toDexieAccountTx = (tx) => new DexieAccountTx(new Uint8Array(tx.txHash.toBuffer()), new Uint8Array(tx.userId.toBuffer()), client_proofs_1.ProofId.ACCOUNT, new Uint8Array(tx.aliasHash.toBuffer()), tx.migrated, tx.created, tx.settled ? tx.settled.getTime() : 0, tx.newSigningPubKey1 ? new Uint8Array(tx.newSigningPubKey1) : undefined, tx.newSigningPubKey2 ? new Uint8Array(tx.newSigningPubKey2) : undefined);
const fromDexieAccountTx = ({ txHash, userId, aliasHash, newSigningPubKey1, newSigningPubKey2, migrated, created, settled, }) => new user_tx_1.UserAccountTx(new tx_hash_1.TxHash(Buffer.from(txHash)), user_1.AccountId.fromBuffer(Buffer.from(userId)), new account_id_1.AliasHash(Buffer.from(aliasHash)), newSigningPubKey1 ? Buffer.from(newSigningPubKey1) : undefined, newSigningPubKey2 ? Buffer.from(newSigningPubKey2) : undefined, migrated, created, settled ? new Date(settled) : undefined);
class DexieDefiTx {
    constructor(txHash, userId, proofId, bridgeId, depositValue, txFee, outputValueA, outputValueB, created, settled) {
        this.txHash = txHash;
        this.userId = userId;
        this.proofId = proofId;
        this.bridgeId = bridgeId;
        this.depositValue = depositValue;
        this.txFee = txFee;
        this.outputValueA = outputValueA;
        this.outputValueB = outputValueB;
        this.created = created;
        this.settled = settled;
    }
}
const toDexieDefiTx = (tx) => new DexieDefiTx(new Uint8Array(tx.txHash.toBuffer()), new Uint8Array(tx.userId.toBuffer()), client_proofs_1.ProofId.DEFI_DEPOSIT, new Uint8Array(tx.bridgeId.toBuffer()), tx.depositValue.toString(), tx.txFee.toString(), tx.outputValueA.toString(), tx.outputValueB.toString(), tx.created, tx.settled ? tx.settled.getTime() : 0);
const fromDexieDefiTx = ({ txHash, userId, bridgeId, depositValue, txFee, outputValueA, outputValueB, created, settled, }) => new user_tx_1.UserDefiTx(new tx_hash_1.TxHash(Buffer.from(txHash)), user_1.AccountId.fromBuffer(Buffer.from(userId)), bridge_id_1.BridgeId.fromBuffer(Buffer.from(bridgeId)), BigInt(depositValue), BigInt(txFee), created, BigInt(outputValueA), BigInt(outputValueB), settled ? new Date(settled) : undefined);
class DexieUserKey {
    constructor(accountId, key, treeIndex) {
        this.accountId = accountId;
        this.key = key;
        this.treeIndex = treeIndex;
    }
}
const dexieUserKeyToSigningKey = (userKey) => ({
    ...userKey,
    accountId: user_1.AccountId.fromBuffer(Buffer.from(userKey.accountId)),
    key: Buffer.from(userKey.key),
});
class DexieAlias {
    constructor(aliasHash, address, latestNonce) {
        this.aliasHash = aliasHash;
        this.address = address;
        this.latestNonce = latestNonce;
    }
}
const dexieAliasToAlias = ({ aliasHash, address, latestNonce }) => ({
    aliasHash: new account_id_1.AliasHash(Buffer.from(aliasHash)),
    address: new address_1.GrumpkinAddress(Buffer.from(address)),
    latestNonce,
});
class DexieDatabase {
    constructor(dbName = 'hummus', version = 6) {
        this.dbName = dbName;
        this.version = version;
    }
    async init() {
        this.createTables();
        try {
            // Try to do something with indexedDB.
            // If it fails (with UpgradeError), then the schema has changed significantly that we need to recreate the entire db.
            await this.getUsers();
        }
        catch (e) {
            await this.dexie.delete();
            this.createTables();
        }
    }
    createTables() {
        this.dexie = new dexie_1.default(this.dbName);
        this.dexie.version(this.version).stores({
            alias: '&[aliasHash+address], aliasHash, address, latestNonce',
            claim: '&nullifier',
            key: '&name',
            note: '++id, [owner+nullified], nullifier, owner',
            user: '&id, privateKey',
            userKeys: '&[accountId+key], accountId',
            userTx: '&[txHash+userId], txHash, [txHash+proofId], [userId+proofId], proofId, settled',
        });
        this.alias = this.dexie.table('alias');
        this.claim = this.dexie.table('claim');
        this.key = this.dexie.table('key');
        this.note = this.dexie.table('note');
        this.user = this.dexie.table('user');
        this.userKeys = this.dexie.table('userKeys');
        this.userTx = this.dexie.table('userTx');
    }
    async close() {
        await this.dexie.close();
    }
    async clear() {
        for (const table of this.dexie.tables) {
            await table.clear();
        }
    }
    async addNote(note) {
        await this.note.put(noteToDexieNote(note));
    }
    async getNote(treeIndex) {
        const note = await this.note.get(treeIndex);
        return note ? dexieNoteToNote(note) : undefined;
    }
    async getNoteByNullifier(nullifier) {
        const note = await this.note.get({ nullifier: new Uint8Array(nullifier) });
        return note ? dexieNoteToNote(note) : undefined;
    }
    async nullifyNote(index) {
        await this.note.update(index, { nullified: 1 });
    }
    async addClaim(claim) {
        await this.claim.put(toDexieClaim(claim));
    }
    async getClaim(nullifier) {
        const claim = await this.claim.get({ nullifier: new Uint8Array(nullifier) });
        return claim ? fromDexieClaim(claim) : undefined;
    }
    async getUserNotes(userId) {
        return (await this.note.where({ owner: new Uint8Array(userId.toBuffer()), nullified: 0 }).toArray()).map(dexieNoteToNote);
    }
    async getUser(userId) {
        const user = await this.user.get(new Uint8Array(userId.toBuffer()));
        return user ? dexieUserToUser(user) : undefined;
    }
    async getUsers() {
        return (await this.user.toArray()).map(dexieUserToUser);
    }
    async addUser(user) {
        await this.user.put(userToDexieUser(user));
    }
    async updateUser(user) {
        await this.user.where({ id: new Uint8Array(user.id.toBuffer()) }).modify(userToDexieUser(user));
    }
    async addJoinSplitTx(tx) {
        await this.userTx.put(toDexieJoinSplitTx(tx));
    }
    async getJoinSplitTx(txHash, userId) {
        const tx = await this.userTx.get({
            txHash: new Uint8Array(txHash.toBuffer()),
            userId: new Uint8Array(userId.toBuffer()),
        });
        return (tx === null || tx === void 0 ? void 0 : tx.proofId) === client_proofs_1.ProofId.JOIN_SPLIT ? fromDexieJoinSplitTx(tx) : undefined;
    }
    async getJoinSplitTxs(userId) {
        const txs = (await this.userTx
            .where({ proofId: client_proofs_1.ProofId.JOIN_SPLIT, userId: new Uint8Array(userId.toBuffer()) })
            .reverse()
            .sortBy('settled'));
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(fromDexieJoinSplitTx);
    }
    async settleJoinSplitTx(txHash, userId, settled) {
        await this.userTx
            .where({
            txHash: new Uint8Array(txHash.toBuffer()),
            userId: new Uint8Array(userId.toBuffer()),
        })
            .modify({ settled });
    }
    async addAccountTx(tx) {
        await this.userTx.put(toDexieAccountTx(tx));
    }
    async getAccountTx(txHash) {
        const tx = await this.userTx.get({
            txHash: new Uint8Array(txHash.toBuffer()),
            proofId: client_proofs_1.ProofId.ACCOUNT,
        });
        return tx ? fromDexieAccountTx(tx) : undefined;
    }
    async getAccountTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()), proofId: client_proofs_1.ProofId.ACCOUNT })
            .reverse()
            .sortBy('settled'));
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(fromDexieAccountTx);
    }
    async settleAccountTx(txHash, settled) {
        await this.userTx
            .where({ txHash: new Uint8Array(txHash.toBuffer()), proofId: client_proofs_1.ProofId.ACCOUNT })
            .modify({ settled });
    }
    async addDefiTx(tx) {
        await this.userTx.put(toDexieDefiTx(tx));
    }
    async getDefiTx(txHash) {
        const tx = await this.userTx.get({
            txHash: new Uint8Array(txHash.toBuffer()),
            proofId: client_proofs_1.ProofId.DEFI_DEPOSIT,
        });
        return tx ? fromDexieDefiTx(tx) : undefined;
    }
    async getDefiTxs(userId) {
        const txs = (await this.userTx
            .where({ userId: new Uint8Array(userId.toBuffer()), proofId: client_proofs_1.ProofId.DEFI_DEPOSIT })
            .reverse()
            .sortBy('settled'));
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(fromDexieDefiTx);
    }
    async updateDefiTx(txHash, outputValueA, outputValueB) {
        await this.userTx
            .where({ txHash: new Uint8Array(txHash.toBuffer()), proofId: client_proofs_1.ProofId.DEFI_DEPOSIT })
            .modify({ outputValueA, outputValueB });
    }
    async settleDefiTx(txHash, settled) {
        await this.userTx
            .where({ txHash: new Uint8Array(txHash.toBuffer()), proofId: client_proofs_1.ProofId.DEFI_DEPOSIT })
            .modify({ settled });
    }
    async isUserTxSettled(txHash) {
        const txs = await this.userTx.where({ txHash: new Uint8Array(txHash.toBuffer()) }).toArray();
        return txs.length > 0 && txs.every(tx => tx.settled);
    }
    async removeUser(userId) {
        const user = await this.getUser(userId);
        if (!user)
            return;
        const id = new Uint8Array(userId.toBuffer());
        await this.userTx.where({ userId: id }).delete();
        await this.userKeys.where({ accountId: id }).delete();
        await this.note.where({ owner: id }).delete();
        await this.user.where({ id }).delete();
    }
    async resetUsers() {
        await this.note.clear();
        await this.userTx.clear();
        await this.userKeys.clear();
        await this.alias.clear();
        await this.user.toCollection().modify({ syncedToRollup: -1 });
    }
    async deleteKey(name) {
        const key = await this.key.get(name);
        if (!key) {
            return;
        }
        for (let i = 0; i < key.count; ++i) {
            await this.key.where({ name: toSubKeyName(name, i) }).delete();
        }
        await this.key.where({ name }).delete();
    }
    async addKey(name, value) {
        const size = value.byteLength;
        if (size <= MAX_BYTE_LENGTH) {
            await this.key.put({ name, value, size });
        }
        else {
            await this.deleteKey(name);
            const count = Math.ceil(size / MAX_BYTE_LENGTH);
            for (let i = 0; i < count; ++i) {
                const subValue = new Uint8Array(value.buffer.slice(MAX_BYTE_LENGTH * i, MAX_BYTE_LENGTH * (i + 1)));
                await this.key.add({
                    name: toSubKeyName(name, i),
                    value: subValue,
                    size: subValue.byteLength,
                });
            }
            await this.key.add({ name, value: new Uint8Array(), size, count });
        }
    }
    async getKey(name) {
        const key = await this.key.get(name);
        if (!key || !key.size) {
            return undefined;
        }
        if (!key.count) {
            return Buffer.from(key.value);
        }
        const subKeyNames = [...Array(key.count)].map((_, i) => toSubKeyName(name, i));
        const subKeys = await this.key.bulkGet(subKeyNames);
        if (subKeys.some(k => !k)) {
            return undefined;
        }
        const value = Buffer.alloc(key.size);
        let prevSize = 0;
        for (let i = 0; i < key.count; ++i) {
            value.set(subKeys[i].value, prevSize);
            prevSize += subKeys[i].value.byteLength;
        }
        return value;
    }
    async addUserSigningKey({ accountId, key, treeIndex }) {
        await this.userKeys.put(new DexieUserKey(new Uint8Array(accountId.toBuffer()), new Uint8Array(key), treeIndex));
    }
    async getUserSigningKeys(accountId) {
        const userKeys = await this.userKeys.where({ accountId: new Uint8Array(accountId.toBuffer()) }).toArray();
        return userKeys.map(dexieUserKeyToSigningKey);
    }
    async getUserSigningKeyIndex(accountId, signingKey) {
        const userKey = await this.userKeys.get({
            accountId: new Uint8Array(accountId.toBuffer()),
            key: new Uint8Array(signingKey.toBuffer().slice(0, 32)),
        });
        return userKey ? userKey.treeIndex : undefined;
    }
    async removeUserSigningKeys(accountId) {
        await this.userKeys.where({ accountId: new Uint8Array(accountId.toBuffer()) }).delete();
    }
    async setAlias(alias) {
        return this.setAliases([alias]);
    }
    async setAliases(aliases) {
        const dbAliases = aliases.map(({ aliasHash, address, latestNonce }) => new DexieAlias(new Uint8Array(aliasHash.toBuffer()), new Uint8Array(address.toBuffer()), latestNonce));
        await this.alias.bulkPut(dbAliases);
    }
    async getAlias(aliasHash, address) {
        const alias = await this.alias.get({
            aliasHash: new Uint8Array(aliasHash.toBuffer()),
            address: new Uint8Array(address.toBuffer()),
        });
        return alias ? dexieAliasToAlias(alias) : undefined;
    }
    async getAliases(aliasHash) {
        const aliases = await this.alias.where({ aliasHash: new Uint8Array(aliasHash.toBuffer()) }).toArray();
        return aliases.map(alias => dexieAliasToAlias(alias));
    }
    async getLatestNonceByAddress(address) {
        var _a;
        const aliases = await this.alias
            .where({
            address: new Uint8Array(address.toBuffer()),
        })
            .reverse()
            .sortBy('latestNonce');
        return (_a = aliases[0]) === null || _a === void 0 ? void 0 : _a.latestNonce;
    }
    async getLatestNonceByAliasHash(aliasHash) {
        var _a;
        const aliases = await this.alias
            .where({
            aliasHash: new Uint8Array(aliasHash.toBuffer()),
        })
            .reverse()
            .sortBy('latestNonce');
        return (_a = aliases[0]) === null || _a === void 0 ? void 0 : _a.latestNonce;
    }
    async getAliasHashByAddress(address, nonce) {
        const collection = this.alias
            .where({
            address: new Uint8Array(address.toBuffer()),
        })
            .filter(a => nonce === undefined || a.latestNonce >= nonce);
        if (nonce === undefined) {
            collection.reverse();
        }
        const aliases = await collection.sortBy('latestNonce');
        return aliases.length ? new account_id_1.AliasHash(Buffer.from(aliases[0].aliasHash)) : undefined;
    }
    async getAddressByAliasHash(aliasHash, nonce) {
        const collection = this.alias
            .where({
            aliasHash: new Uint8Array(aliasHash.toBuffer()),
        })
            .filter(a => nonce === undefined || a.latestNonce >= nonce);
        if (nonce === undefined) {
            collection.reverse();
        }
        const aliases = await collection.sortBy('latestNonce');
        return aliases.length ? new address_1.GrumpkinAddress(Buffer.from(aliases[0].address)) : undefined;
    }
}
exports.DexieDatabase = DexieDatabase;
//# sourceMappingURL=data:application/json;base64,