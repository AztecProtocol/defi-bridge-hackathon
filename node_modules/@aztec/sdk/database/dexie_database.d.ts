/// <reference types="node" />
import { AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { TxHash } from '@aztec/barretenberg/tx_hash';
import { Note } from '../note';
import { AccountId, UserData } from '../user';
import { UserAccountTx, UserDefiTx, UserJoinSplitTx } from '../user_tx';
import { Claim } from './claim';
import { Alias, Database, SigningKey } from './database';
export declare class DexieDatabase implements Database {
    private dbName;
    private version;
    private dexie;
    private user;
    private userKeys;
    private userTx;
    private note;
    private claim;
    private key;
    private alias;
    constructor(dbName?: string, version?: number);
    init(): Promise<void>;
    private createTables;
    close(): Promise<void>;
    clear(): Promise<void>;
    addNote(note: Note): Promise<void>;
    getNote(treeIndex: number): Promise<Note | undefined>;
    getNoteByNullifier(nullifier: Buffer): Promise<Note | undefined>;
    nullifyNote(index: number): Promise<void>;
    addClaim(claim: Claim): Promise<void>;
    getClaim(nullifier: Buffer): Promise<Claim | undefined>;
    getUserNotes(userId: AccountId): Promise<Note[]>;
    getUser(userId: AccountId): Promise<UserData | undefined>;
    getUsers(): Promise<UserData[]>;
    addUser(user: UserData): Promise<void>;
    updateUser(user: UserData): Promise<void>;
    addJoinSplitTx(tx: UserJoinSplitTx): Promise<void>;
    getJoinSplitTx(txHash: TxHash, userId: AccountId): Promise<UserJoinSplitTx | undefined>;
    getJoinSplitTxs(userId: AccountId): Promise<UserJoinSplitTx[]>;
    settleJoinSplitTx(txHash: TxHash, userId: AccountId, settled: Date): Promise<void>;
    addAccountTx(tx: UserAccountTx): Promise<void>;
    getAccountTx(txHash: TxHash): Promise<UserAccountTx | undefined>;
    getAccountTxs(userId: AccountId): Promise<UserAccountTx[]>;
    settleAccountTx(txHash: TxHash, settled: Date): Promise<void>;
    addDefiTx(tx: UserDefiTx): Promise<void>;
    getDefiTx(txHash: TxHash): Promise<UserDefiTx | undefined>;
    getDefiTxs(userId: AccountId): Promise<UserDefiTx[]>;
    updateDefiTx(txHash: TxHash, outputValueA: bigint, outputValueB: bigint): Promise<void>;
    settleDefiTx(txHash: TxHash, settled: Date): Promise<void>;
    isUserTxSettled(txHash: TxHash): Promise<boolean>;
    removeUser(userId: AccountId): Promise<void>;
    resetUsers(): Promise<void>;
    deleteKey(name: string): Promise<void>;
    addKey(name: string, value: Buffer): Promise<void>;
    getKey(name: string): Promise<Buffer | undefined>;
    addUserSigningKey({ accountId, key, treeIndex }: SigningKey): Promise<void>;
    getUserSigningKeys(accountId: AccountId): Promise<SigningKey[]>;
    getUserSigningKeyIndex(accountId: AccountId, signingKey: GrumpkinAddress): Promise<number | undefined>;
    removeUserSigningKeys(accountId: AccountId): Promise<void>;
    setAlias(alias: Alias): Promise<void>;
    setAliases(aliases: Alias[]): Promise<void>;
    getAlias(aliasHash: AliasHash, address: GrumpkinAddress): Promise<Alias | undefined>;
    getAliases(aliasHash: AliasHash): Promise<Alias[]>;
    getLatestNonceByAddress(address: GrumpkinAddress): Promise<number>;
    getLatestNonceByAliasHash(aliasHash: AliasHash): Promise<number>;
    getAliasHashByAddress(address: GrumpkinAddress, nonce?: number): Promise<AliasHash | undefined>;
    getAddressByAliasHash(aliasHash: AliasHash, nonce?: number): Promise<GrumpkinAddress | undefined>;
}
//# sourceMappingURL=dexie_database.d.ts.map