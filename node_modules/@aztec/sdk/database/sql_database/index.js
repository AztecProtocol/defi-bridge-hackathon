"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLDatabase = exports.getOrmConfig = void 0;
const typeorm_1 = require("typeorm");
const user_tx_1 = require("../../user_tx");
const account_tx_dao_1 = require("./account_tx_dao");
const alias_dao_1 = require("./alias_dao");
const claim_dao_1 = require("./claim_dao");
const defi_tx_dao_1 = require("./defi_tx_dao");
const join_split_tx_dao_1 = require("./join_split_tx_dao");
const key_dao_1 = require("./key_dao");
const note_dao_1 = require("./note_dao");
const user_data_dao_1 = require("./user_data_dao");
const user_key_dao_1 = require("./user_key_dao");
exports.getOrmConfig = (dbPath) => ({
    name: 'aztec2-sdk',
    type: 'sqlite',
    database: dbPath === ':memory:' ? dbPath : `${dbPath || '.'}/aztec2-sdk.sqlite`,
    entities: [account_tx_dao_1.AccountTxDao, alias_dao_1.AliasDao, claim_dao_1.ClaimDao, defi_tx_dao_1.DefiTxDao, join_split_tx_dao_1.JoinSplitTxDao, key_dao_1.KeyDao, note_dao_1.NoteDao, user_data_dao_1.UserDataDao, user_key_dao_1.UserKeyDao],
    synchronize: true,
    logging: false,
});
const toUserJoinSplitTx = (tx) => new user_tx_1.UserJoinSplitTx(tx.txHash, tx.userId, tx.assetId, tx.publicInput, tx.publicOutput, tx.privateInput, tx.recipientPrivateOutput, tx.senderPrivateOutput, tx.inputOwner, tx.outputOwner, tx.ownedByUser, tx.created, tx.settled);
const toUserAccountTx = (tx) => new user_tx_1.UserAccountTx(tx.txHash, tx.userId, tx.aliasHash, tx.newSigningPubKey1, tx.newSigningPubKey2, tx.migrated, tx.created, tx.settled);
const toUserDefiTx = (tx) => new user_tx_1.UserDefiTx(tx.txHash, tx.userId, tx.bridgeId, tx.depositValue, tx.txFee, tx.created, tx.outputValueA, tx.outputValueB, tx.settled);
class SQLDatabase {
    constructor(connection) {
        this.connection = connection;
        this.accountTxRep = this.connection.getRepository(account_tx_dao_1.AccountTxDao);
        this.aliasRep = this.connection.getRepository(alias_dao_1.AliasDao);
        this.claimRep = this.connection.getRepository(claim_dao_1.ClaimDao);
        this.defiTxRep = this.connection.getRepository(defi_tx_dao_1.DefiTxDao);
        this.joinSplitTxRep = this.connection.getRepository(join_split_tx_dao_1.JoinSplitTxDao);
        this.keyRep = this.connection.getRepository(key_dao_1.KeyDao);
        this.noteRep = this.connection.getRepository(note_dao_1.NoteDao);
        this.userDataRep = this.connection.getRepository(user_data_dao_1.UserDataDao);
        this.userKeyRep = this.connection.getRepository(user_key_dao_1.UserKeyDao);
    }
    async init() { }
    async close() {
        await this.connection.close();
    }
    async clear() {
        await this.connection.synchronize(true);
    }
    async addNote(note) {
        await this.noteRep.save(note);
    }
    async getNote(index) {
        return this.noteRep.findOne({ index });
    }
    async getNoteByNullifier(nullifier) {
        return this.noteRep.findOne({ nullifier });
    }
    async nullifyNote(index) {
        await this.noteRep.update(index, { nullified: true });
    }
    async getUserNotes(userId) {
        return this.noteRep.find({ where: { owner: userId, nullified: false } });
    }
    async addClaim(claim) {
        await this.claimRep.save(claim);
    }
    async getClaim(nullifier) {
        return this.claimRep.findOne({ nullifier });
    }
    async getUser(userId) {
        return this.userDataRep.findOne({ id: userId });
    }
    async addUser(user) {
        await this.userDataRep.save(user);
    }
    async getUsers() {
        return this.userDataRep.find();
    }
    async updateUser(user) {
        await this.userDataRep.update({ id: user.id }, user);
    }
    async removeUser(userId) {
        const user = await this.getUser(userId);
        if (!user)
            return;
        await this.accountTxRep.delete({ userId });
        await this.joinSplitTxRep.delete({ userId });
        await this.userKeyRep.delete({ accountId: userId });
        await this.noteRep.delete({ owner: userId });
        await this.userDataRep.delete({ id: userId });
    }
    async resetUsers() {
        await this.aliasRep.clear();
        await this.noteRep.clear();
        await this.userKeyRep.clear();
        await this.accountTxRep.clear();
        await this.joinSplitTxRep.clear();
        await this.userDataRep.update({ syncedToRollup: typeorm_1.MoreThan(-1) }, { syncedToRollup: -1 });
    }
    async addJoinSplitTx(tx) {
        await this.joinSplitTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getJoinSplitTx(txHash, userId) {
        const tx = await this.joinSplitTxRep.findOne({ txHash, userId });
        return tx ? toUserJoinSplitTx(tx) : undefined;
    }
    async getJoinSplitTxs(userId) {
        const txs = await this.joinSplitTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(toUserJoinSplitTx);
    }
    async settleJoinSplitTx(txHash, userId, settled) {
        await this.joinSplitTxRep.update({ txHash, userId }, { settled });
    }
    async addAccountTx(tx) {
        await this.accountTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getAccountTx(txHash) {
        const tx = await this.accountTxRep.findOne({ txHash });
        return tx ? toUserAccountTx(tx) : undefined;
    }
    async getAccountTxs(userId) {
        const txs = await this.accountTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(toUserAccountTx);
    }
    async settleAccountTx(txHash, settled) {
        await this.accountTxRep.update({ txHash }, { settled });
    }
    async addDefiTx(tx) {
        await this.defiTxRep.save({ ...tx }); // save() will mutate tx, changing undefined values to null.
    }
    async getDefiTx(txHash) {
        const tx = await this.defiTxRep.findOne({ txHash });
        return tx ? toUserDefiTx(tx) : undefined;
    }
    async getDefiTxs(userId) {
        const txs = await this.defiTxRep.find({ where: { userId }, order: { settled: 'DESC' } });
        const unsettled = txs.filter(tx => !tx.settled).sort((a, b) => (a.created < b.created ? 1 : -1));
        const settled = txs.filter(tx => tx.settled);
        return [...unsettled, ...settled].map(toUserDefiTx);
    }
    async updateDefiTx(txHash, outputValueA, outputValueB) {
        await this.defiTxRep.update({ txHash }, { outputValueA, outputValueB });
    }
    async settleDefiTx(txHash, settled) {
        await this.defiTxRep.update({ txHash }, { settled });
    }
    async isUserTxSettled(txHash) {
        const jsTxs = await this.joinSplitTxRep.find({ where: { txHash } });
        if (jsTxs.length > 0) {
            return jsTxs.every(tx => tx.settled);
        }
        const defiTx = await this.defiTxRep.findOne({ where: { txHash } });
        if (defiTx) {
            return !!defiTx.settled;
        }
        const accountTx = await this.accountTxRep.findOne({ where: { txHash } });
        return !!(accountTx === null || accountTx === void 0 ? void 0 : accountTx.settled);
    }
    async addUserSigningKey(signingKey) {
        await this.userKeyRep.save(signingKey);
    }
    async getUserSigningKeys(accountId) {
        return await this.userKeyRep.find({ accountId });
    }
    async getUserSigningKeyIndex(accountId, key) {
        const keyBuffer = key.toBuffer();
        const signingKey = await this.userKeyRep.findOne({ where: { accountId, key: keyBuffer.slice(0, 32) } });
        return signingKey ? signingKey.treeIndex : undefined;
    }
    async removeUserSigningKeys(accountId) {
        await this.userKeyRep.delete({ accountId });
    }
    async setAlias(alias) {
        await this.aliasRep.save(alias);
    }
    async setAliases(aliases) {
        // TODO: Dedupe for bulk insert.
        for (const alias of aliases) {
            await this.aliasRep.save(alias);
        }
    }
    async getAlias(aliasHash, address) {
        return this.aliasRep.findOne({ aliasHash, address });
    }
    async getAliases(aliasHash) {
        return this.aliasRep.find({ aliasHash });
    }
    async getLatestNonceByAddress(address) {
        const alias = await this.aliasRep.findOne({ where: { address }, order: { latestNonce: 'DESC' } });
        return alias === null || alias === void 0 ? void 0 : alias.latestNonce;
    }
    async getLatestNonceByAliasHash(aliasHash) {
        const alias = await this.aliasRep.findOne({ where: { aliasHash }, order: { latestNonce: 'DESC' } });
        return alias === null || alias === void 0 ? void 0 : alias.latestNonce;
    }
    async getAliasHashByAddress(address, nonce) {
        const alias = await this.aliasRep.findOne({
            where: { address, latestNonce: typeorm_1.MoreThanOrEqual(nonce || 0) },
            order: { latestNonce: nonce !== undefined ? 'ASC' : 'DESC' },
        });
        return alias === null || alias === void 0 ? void 0 : alias.aliasHash;
    }
    async getAddressByAliasHash(aliasHash, nonce) {
        const alias = await this.aliasRep.findOne({
            where: { aliasHash, latestNonce: typeorm_1.MoreThanOrEqual(nonce || 0) },
            order: { latestNonce: nonce !== undefined ? 'ASC' : 'DESC' },
        });
        return alias === null || alias === void 0 ? void 0 : alias.address;
    }
    async addKey(name, value) {
        await this.keyRep.save({ name, value });
    }
    async getKey(name) {
        const key = await this.keyRep.findOne({ name });
        return key ? key.value : undefined;
    }
    async deleteKey(name) {
        await this.keyRep.delete({ name });
    }
}
exports.SQLDatabase = SQLDatabase;
//# sourceMappingURL=data:application/json;base64,