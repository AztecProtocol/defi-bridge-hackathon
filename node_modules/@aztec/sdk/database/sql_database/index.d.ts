/// <reference types="node" />
import { AliasHash } from '@aztec/barretenberg/account_id';
import { GrumpkinAddress } from '@aztec/barretenberg/address';
import { TxHash } from '@aztec/barretenberg/tx_hash';
import { Connection, ConnectionOptions } from 'typeorm';
import { Note } from '../../note';
import { AccountId, UserData } from '../../user';
import { UserAccountTx, UserDefiTx, UserJoinSplitTx } from '../../user_tx';
import { Claim } from '../claim';
import { Alias, Database, SigningKey } from '../database';
import { AliasDao } from './alias_dao';
import { ClaimDao } from './claim_dao';
import { NoteDao } from './note_dao';
import { UserDataDao } from './user_data_dao';
import { UserKeyDao } from './user_key_dao';
export declare const getOrmConfig: (dbPath?: string | undefined) => ConnectionOptions;
export declare class SQLDatabase implements Database {
    private connection;
    private accountTxRep;
    private aliasRep;
    private claimRep;
    private defiTxRep;
    private joinSplitTxRep;
    private keyRep;
    private noteRep;
    private userDataRep;
    private userKeyRep;
    constructor(connection: Connection);
    init(): Promise<void>;
    close(): Promise<void>;
    clear(): Promise<void>;
    addNote(note: Note): Promise<void>;
    getNote(index: number): Promise<NoteDao | undefined>;
    getNoteByNullifier(nullifier: Buffer): Promise<NoteDao | undefined>;
    nullifyNote(index: number): Promise<void>;
    getUserNotes(userId: AccountId): Promise<NoteDao[]>;
    addClaim(claim: Claim): Promise<void>;
    getClaim(nullifier: Buffer): Promise<ClaimDao | undefined>;
    getUser(userId: AccountId): Promise<UserDataDao | undefined>;
    addUser(user: UserData): Promise<void>;
    getUsers(): Promise<UserDataDao[]>;
    updateUser(user: UserData): Promise<void>;
    removeUser(userId: AccountId): Promise<void>;
    resetUsers(): Promise<void>;
    addJoinSplitTx(tx: UserJoinSplitTx): Promise<void>;
    getJoinSplitTx(txHash: TxHash, userId: AccountId): Promise<UserJoinSplitTx | undefined>;
    getJoinSplitTxs(userId: any): Promise<UserJoinSplitTx[]>;
    settleJoinSplitTx(txHash: TxHash, userId: AccountId, settled: Date): Promise<void>;
    addAccountTx(tx: UserAccountTx): Promise<void>;
    getAccountTx(txHash: TxHash): Promise<UserAccountTx | undefined>;
    getAccountTxs(userId: any): Promise<UserAccountTx[]>;
    settleAccountTx(txHash: TxHash, settled: Date): Promise<void>;
    addDefiTx(tx: UserDefiTx): Promise<void>;
    getDefiTx(txHash: TxHash): Promise<UserDefiTx | undefined>;
    getDefiTxs(userId: any): Promise<UserDefiTx[]>;
    updateDefiTx(txHash: TxHash, outputValueA: bigint, outputValueB: bigint): Promise<void>;
    settleDefiTx(txHash: TxHash, settled: Date): Promise<void>;
    isUserTxSettled(txHash: TxHash): Promise<boolean>;
    addUserSigningKey(signingKey: SigningKey): Promise<void>;
    getUserSigningKeys(accountId: AccountId): Promise<UserKeyDao[]>;
    getUserSigningKeyIndex(accountId: AccountId, key: GrumpkinAddress): Promise<number | undefined>;
    removeUserSigningKeys(accountId: AccountId): Promise<void>;
    setAlias(alias: Alias): Promise<void>;
    setAliases(aliases: Alias[]): Promise<void>;
    getAlias(aliasHash: AliasHash, address: GrumpkinAddress): Promise<AliasDao | undefined>;
    getAliases(aliasHash: AliasHash): Promise<AliasDao[]>;
    getLatestNonceByAddress(address: GrumpkinAddress): Promise<number | undefined>;
    getLatestNonceByAliasHash(aliasHash: AliasHash): Promise<number | undefined>;
    getAliasHashByAddress(address: GrumpkinAddress, nonce?: number): Promise<AliasHash | undefined>;
    getAddressByAliasHash(aliasHash: AliasHash, nonce?: number): Promise<GrumpkinAddress | undefined>;
    addKey(name: string, value: Buffer): Promise<void>;
    getKey(name: string): Promise<Buffer | undefined>;
    deleteKey(name: string): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map