"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoinSplitTxFactory = void 0;
const address_1 = require("@aztec/barretenberg/address");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const note_algorithms_1 = require("@aztec/barretenberg/note_algorithms");
const viewing_key_1 = require("@aztec/barretenberg/viewing_key");
const user_1 = require("../../user");
class JoinSplitTxFactory {
    constructor(worldState, grumpkin, pedersen, noteAlgos, db) {
        this.worldState = worldState;
        this.grumpkin = grumpkin;
        this.pedersen = pedersen;
        this.noteAlgos = noteAlgos;
        this.db = db;
    }
    async createJoinSplitTx(userState, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, defiDepositValue, assetId, signer, newNoteOwner, inputOwnerAddress, outputOwnerAddress, bridgeId) {
        const isDefiBridge = defiDepositValue > BigInt(0);
        const { id, aliasHash, publicKey, nonce } = userState.getUser();
        const accountIndex = nonce !== 0 ? await this.db.getUserSigningKeyIndex(id, signer.getPublicKey()) : 0;
        if (accountIndex === undefined) {
            throw new Error('Unknown signing key.');
        }
        const accountAliasId = aliasHash ? new user_1.AccountAliasId(aliasHash, nonce) : user_1.AccountAliasId.random();
        const accountPath = await this.worldState.getHashPath(accountIndex);
        const signingPubKey = signer.getPublicKey();
        const notes = privateInput ? await userState.pickNotes(assetId, privateInput) : [];
        if (!notes) {
            throw new Error(`Failed to find no more than 2 notes that sum to ${privateInput}.`);
        }
        const numInputNotes = notes.length;
        const totalNoteInputValue = notes.reduce((sum, note) => sum + note.value, BigInt(0));
        const inputNoteIndices = notes.map(n => n.index);
        const inputNotes = notes.map(n => new note_algorithms_1.TreeNote(n.owner.publicKey, n.value, n.assetId, n.owner.nonce, n.secret));
        const maxNoteIndex = Math.max(...inputNoteIndices, 0);
        // Add gibberish notes to ensure we have two notes.
        for (let i = notes.length; i < 2; ++i) {
            inputNoteIndices.push(maxNoteIndex + i); // notes can't have the same index
            inputNotes.push(note_algorithms_1.TreeNote.createFromEphPriv(publicKey, BigInt(0), assetId, nonce, this.createEphemeralPrivKey(), this.grumpkin));
        }
        const inputNotePaths = await Promise.all(inputNoteIndices.map(async (idx) => this.worldState.getHashPath(idx)));
        const changeValue = totalNoteInputValue > privateInput ? totalNoteInputValue - privateInput : BigInt(0);
        const outputNotes = [
            this.createNote(assetId, recipientPrivateOutput, newNoteOwner || id),
            this.createNote(assetId, changeValue + senderPrivateOutput, id),
        ];
        const claimNote = isDefiBridge
            ? this.createClaimNote(bridgeId, defiDepositValue, id)
            : {
                note: note_algorithms_1.ClaimNoteTxData.EMPTY,
                viewingKey: viewing_key_1.ViewingKey.EMPTY,
            };
        const dataRoot = this.worldState.getRoot();
        const inputOwner = inputOwnerAddress || address_1.EthAddress.ZERO;
        const outputOwner = outputOwnerAddress || address_1.EthAddress.ZERO;
        // For now, we will use the account key as the signing key (no account note required).
        const { privateKey } = userState.getUser();
        const message = client_proofs_1.computeSigningData([...inputNotes, ...outputNotes.map(n => n.note)], claimNote.note, inputNoteIndices[0], inputNoteIndices[1], inputOwner, outputOwner, publicInput, publicOutput, assetId, numInputNotes, id, privateKey, this.pedersen, this.noteAlgos);
        const signature = await signer.signMessage(message);
        const tx = new client_proofs_1.JoinSplitTx(publicInput, publicOutput, assetId, numInputNotes, inputNoteIndices, dataRoot, inputNotePaths, inputNotes, outputNotes.map(n => n.note), claimNote.note, privateKey, accountAliasId, accountIndex, accountPath, signingPubKey, signature, inputOwner, outputOwner);
        const viewingKeys = [isDefiBridge ? claimNote.viewingKey : outputNotes[0].viewingKey, outputNotes[1].viewingKey];
        return { tx, viewingKeys };
    }
    createNote(assetId, value, owner) {
        const ephKey = this.createEphemeralPrivKey();
        const note = note_algorithms_1.TreeNote.createFromEphPriv(owner.publicKey, value, assetId, owner.nonce, ephKey, this.grumpkin);
        const viewingKey = note.getViewingKey(ephKey, this.grumpkin);
        return { note, viewingKey };
    }
    createClaimNote(bridgeId, value, owner) {
        const ephKey = this.createEphemeralPrivKey();
        const note = note_algorithms_1.ClaimNoteTxData.createFromEphPriv(value, bridgeId, owner, ephKey, this.grumpkin);
        const viewingKey = note.getViewingKey(owner.publicKey, ephKey, this.grumpkin);
        return { note, viewingKey };
    }
    createEphemeralPrivKey() {
        return this.grumpkin.getRandomFr();
    }
}
exports.JoinSplitTxFactory = JoinSplitTxFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF90eF9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb29mcy9qb2luX3NwbGl0X3Byb29mX2NyZWF0b3Ivam9pbl9zcGxpdF90eF9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUF5RDtBQUd6RCxxRUFBb0Y7QUFHcEYseUVBQWdHO0FBQ2hHLGlFQUE2RDtBQUk3RCxxQ0FBdUQ7QUFHdkQsTUFBYSxrQkFBa0I7SUFDN0IsWUFDVSxVQUFzQixFQUN0QixRQUFrQixFQUNsQixRQUFrQixFQUNsQixTQUF5QixFQUN6QixFQUFZO1FBSlosZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBZ0I7UUFDekIsT0FBRSxHQUFGLEVBQUUsQ0FBVTtJQUNuQixDQUFDO0lBRUcsS0FBSyxDQUFDLGlCQUFpQixDQUM1QixTQUFvQixFQUNwQixXQUFtQixFQUNuQixZQUFvQixFQUNwQixZQUFvQixFQUNwQixzQkFBOEIsRUFDOUIsbUJBQTJCLEVBQzNCLGdCQUF3QixFQUN4QixPQUFnQixFQUNoQixNQUFjLEVBQ2QsWUFBd0IsRUFDeEIsaUJBQThCLEVBQzlCLGtCQUErQixFQUMvQixRQUFtQjtRQUVuQixNQUFNLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEQsTUFBTSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoRSxNQUFNLFlBQVksR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVB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