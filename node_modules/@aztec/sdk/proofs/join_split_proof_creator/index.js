"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoinSplitProofCreator = void 0;
const tslib_1 = require("tslib");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const debug_1 = tslib_1.__importDefault(require("debug"));
const join_split_tx_factory_1 = require("./join_split_tx_factory");
const debug = debug_1.default('bb:join_split_proof_creator');
class JoinSplitProofCreator {
    constructor(joinSplitProver, worldState, grumpkin, pedersen, noteAlgos, db) {
        this.joinSplitProver = joinSplitProver;
        this.txFactory = new join_split_tx_factory_1.JoinSplitTxFactory(worldState, grumpkin, pedersen, noteAlgos, db);
    }
    async createProof(userState, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, defiDepositValue, assetId, signer, newNoteOwner, inputOwner, outputOwner, bridgeId) {
        if (publicInput && !inputOwner) {
            throw new Error('Input owner undefined.');
        }
        const { tx, viewingKeys } = await this.txFactory.createJoinSplitTx(userState, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, defiDepositValue, assetId, signer, newNoteOwner, inputOwner, outputOwner, bridgeId);
        debug('creating proof...');
        const start = new Date().getTime();
        const proofData = await this.joinSplitProver.createProof(tx);
        debug(`created proof: ${new Date().getTime() - start}ms`);
        debug(`proof size: ${proofData.length}`);
        const joinSplitProof = new client_proofs_1.JoinSplitProofData(new client_proofs_1.ProofData(proofData));
        const { depositSigningData, proofData: { txId }, } = joinSplitProof;
        return { proofData, viewingKeys, depositSigningData, txId };
    }
}
exports.JoinSplitProofCreator = JoinSplitProofCreator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL2pvaW5fc3BsaXRfcHJvb2ZfY3JlYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EscUVBQW1HO0FBS25HLDBEQUFnQztBQUtoQyxtRUFBNkQ7QUFFN0QsTUFBTSxLQUFLLEdBQUcsZUFBVyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFekQsTUFBYSxxQkFBcUI7SUFHaEMsWUFDVSxlQUFnQyxFQUN4QyxVQUFzQixFQUN0QixRQUFrQixFQUNsQixRQUFrQixFQUNsQixTQUF5QixFQUN6QixFQUFZO1FBTEosb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBT3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSwwQ0FBa0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQ3RCLFNBQW9CLEVBQ3BCLFdBQW1CLEVBQ25CLFlBQW9CLEVBQ3BCLFlBQW9CLEVBQ3BCLHNCQUE4QixFQUM5QixtQkFBMkIsRUFDM0IsZ0JBQXdCLEVBQ3hCLE9BQWdCLEVBQ2hCLE1BQWMsRUFDZCxZQUF3QixFQUN4QixVQUF1QixFQUN2QixXQUF3QixFQUN4QixRQUFtQjtRQUVuQixJQUFJLFdBQVcsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7UUFFRCxNQUFNLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FDaEUsU0FBUyxFQUNULFdBQVcsRUFDWCxZQUFZLEVBQ1osWUFBWSxFQUNaLHNCQUFzQixFQUN0QixtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxNQUFNLEVBQ04sWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxDQUNULENBQUM7UUFFRixLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0QsS0FBSyxDQUFDLGtCQUFrQixJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDMUQsS0FBSyxDQUFDLGVBQWUsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFekMsTUFBTSxjQUFjLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLHlCQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN4RSxNQUFNLEVBQ0osa0JBQWtCLEVBQ2xCLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxHQUNwQixHQUFHLGNBQWMsQ0FBQztRQUVuQixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUEvREQsc0RBK0RDIn0=