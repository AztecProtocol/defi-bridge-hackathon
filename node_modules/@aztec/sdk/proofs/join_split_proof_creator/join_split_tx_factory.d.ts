import { EthAddress } from '@aztec/barretenberg/address';
import { AssetId } from '@aztec/barretenberg/asset';
import { BridgeId } from '@aztec/barretenberg/bridge_id';
import { JoinSplitTx } from '@aztec/barretenberg/client_proofs';
import { Pedersen } from '@aztec/barretenberg/crypto';
import { Grumpkin } from '@aztec/barretenberg/ecc';
import { NoteAlgorithms } from '@aztec/barretenberg/note_algorithms';
import { ViewingKey } from '@aztec/barretenberg/viewing_key';
import { WorldState } from '@aztec/barretenberg/world_state';
import { Database } from '../../database';
import { Signer } from '../../signer';
import { AccountId } from '../../user';
import { UserState } from '../../user_state';
export declare class JoinSplitTxFactory {
    private worldState;
    private grumpkin;
    private pedersen;
    private noteAlgos;
    private db;
    constructor(worldState: WorldState, grumpkin: Grumpkin, pedersen: Pedersen, noteAlgos: NoteAlgorithms, db: Database);
    createJoinSplitTx(userState: UserState, publicInput: bigint, publicOutput: bigint, privateInput: bigint, recipientPrivateOutput: bigint, senderPrivateOutput: bigint, defiDepositValue: bigint, assetId: AssetId, signer: Signer, newNoteOwner?: AccountId, inputOwnerAddress?: EthAddress, outputOwnerAddress?: EthAddress, bridgeId?: BridgeId): Promise<{
        tx: JoinSplitTx;
        viewingKeys: ViewingKey[];
    }>;
    private createNote;
    private createClaimNote;
    private createEphemeralPrivKey;
}
//# sourceMappingURL=join_split_tx_factory.d.ts.map