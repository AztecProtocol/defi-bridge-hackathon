"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountProofCreator = void 0;
const tslib_1 = require("tslib");
const address_1 = require("@aztec/barretenberg/address");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const crypto_1 = require("crypto");
const debug_1 = tslib_1.__importDefault(require("debug"));
const user_1 = require("../../user");
const debug = debug_1.default('bb:account_proof');
class AccountProofCreator {
    constructor(accountProver, worldState, pedersen) {
        this.accountProver = accountProver;
        this.worldState = worldState;
        this.pedersen = pedersen;
    }
    async createAccountTx(signer, aliasHash, nonce, migrate, accountPublicKey, newAccountPublicKey, newSigningPubKey1, newSigningPubKey2, accountIndex = 0) {
        const merkleRoot = this.worldState.getRoot();
        const numNewKeys = [newSigningPubKey1, newSigningPubKey2].filter(k => !!k).length;
        const signingPubKey = signer.getPublicKey();
        const accountPath = await this.worldState.getHashPath(accountIndex);
        const accountAliasId = new user_1.AccountAliasId(aliasHash, nonce);
        const gibberish = crypto_1.randomBytes(32);
        const sigMsg = client_proofs_1.computeAccountProofSigningData(accountAliasId, accountPublicKey, newAccountPublicKey || accountPublicKey, newSigningPubKey1 || address_1.GrumpkinAddress.ZERO, newSigningPubKey2 || address_1.GrumpkinAddress.ZERO, this.pedersen);
        const signature = await signer.signMessage(sigMsg);
        return new client_proofs_1.AccountTx(merkleRoot, accountPublicKey, newAccountPublicKey || accountPublicKey, numNewKeys, newSigningPubKey1 || address_1.GrumpkinAddress.ZERO, newSigningPubKey2 || address_1.GrumpkinAddress.ZERO, accountAliasId, migrate, gibberish, accountIndex, accountPath, signingPubKey, signature);
    }
    async createProof(signer, aliasHash, nonce, migrate, accountPublicKey, newAccountPublicKey, newSigningPubKey1, newSigningPubKey2, accountIndex) {
        const tx = await this.createAccountTx(signer, aliasHash, nonce, migrate, accountPublicKey, newAccountPublicKey, newSigningPubKey1, newSigningPubKey2, accountIndex);
        debug('creating proof...');
        const start = new Date().getTime();
        const proofData = await this.accountProver.createAccountProof(tx);
        debug(`created proof: ${new Date().getTime() - start}ms`);
        debug(`proof size: ${proofData.length}`);
        return proofData;
    }
}
exports.AccountProofCreator = AccountProofCreator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvb2ZzL2FjY291bnRfcHJvb2ZfY3JlYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEseURBQThEO0FBQzlELHFFQUE2RztBQUk3RyxtQ0FBcUM7QUFDckMsMERBQWdDO0FBRWhDLHFDQUE0QztBQUU1QyxNQUFNLEtBQUssR0FBRyxlQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUU5QyxNQUFhLG1CQUFtQjtJQUM5QixZQUFvQixhQUE0QixFQUFVLFVBQXNCLEVBQVUsUUFBa0I7UUFBeEYsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFekcsS0FBSyxDQUFDLGVBQWUsQ0FDMUIsTUFBYyxFQUNkLFNBQW9CLEVBQ3BCLEtBQWEsRUFDYixPQUFnQixFQUNoQixnQkFBaUMsRUFDakMsbUJBQXFDLEVBQ3JDLGlCQUFtQyxFQUNuQyxpQkFBbUMsRUFDbkMsWUFBWSxHQUFHLENBQUM7UUFFaEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QyxNQUFNLFVBQVUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsRixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRSxNQUFNLGNBQWMsR0FBRyxJQUFJLHFCQUFjLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVELE1BQU0sU0FBUyxHQUFHLG9CQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsOENBQThCLENBQzNDLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsbUJBQW1CLElBQUksZ0JBQWdCLEVBQ3ZDLGlCQUFpQixJQUFJLHlCQUFlLENBQUMsSUFBSSxFQUN6QyxpQkFBaUIsSUFBSSx5QkFBZSxDQUFDLElBQUksRUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRW5ELE9BQU8sSUFBSSx5QkFBUyxDQUNsQixVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLG1CQUFtQixJQUFJLGdCQUFnQixFQUN2QyxVQUFVLEVBQ1YsaUJBQWlCLElBQUkseUJBQWUsQ0FBQyxJQUFJLEVBQ3pDLGlCQUFpQixJQUFJLHlCQUFlLENBQUMsSUFBSSxFQUN6QyxjQUFjLEVBQ2QsT0FBTyxFQUNQLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLGFBQWEsRUFDYixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUN0QixNQUFjLEVBQ2QsU0FBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQWdCLEVBQ2hCLGdCQUFpQyxFQUNqQyxtQkFBcUMsRUFDckMsaUJBQW1DLEVBQ25DLGlCQUFtQyxFQUNuQyxZQUFxQjtRQUVyQixNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQ25DLE1BQU0sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUNMLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsWUFBWSxDQUNiLENBQUM7UUFFRixLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRSxLQUFLLENBQUMsa0JBQWtCLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUMxRCxLQUFLLENBQUMsZUFBZSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUV6QyxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUE5RUQsa0RBOEVDIn0=