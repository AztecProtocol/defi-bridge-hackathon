"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreSdk = exports.CoreSdkEvent = void 0;
const tslib_1 = require("tslib");
const account_id_1 = require("@aztec/barretenberg/account_id");
const address_1 = require("@aztec/barretenberg/address");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const crs_1 = require("@aztec/barretenberg/crs");
const crypto_1 = require("@aztec/barretenberg/crypto");
const ecc_1 = require("@aztec/barretenberg/ecc");
const fifo_1 = require("@aztec/barretenberg/fifo");
const note_algorithms_1 = require("@aztec/barretenberg/note_algorithms");
const rollup_proof_1 = require("@aztec/barretenberg/rollup_proof");
const tx_hash_1 = require("@aztec/barretenberg/tx_hash");
const wasm_1 = require("@aztec/barretenberg/wasm");
const world_state_1 = require("@aztec/barretenberg/world_state");
const debug_1 = tslib_1.__importDefault(require("debug"));
const detect_node_1 = tslib_1.__importDefault(require("detect-node"));
const events_1 = require("events");
const idb_mutex_1 = tslib_1.__importDefault(require("idb-mutex"));
const os_1 = tslib_1.__importDefault(require("os"));
const account_proof_creator_1 = require("../proofs/account_proof_creator");
const join_split_proof_creator_1 = require("../proofs/join_split_proof_creator");
const proof_output_1 = require("../proofs/proof_output");
const sdk_1 = require("../sdk");
const signer_1 = require("../signer");
const user_1 = require("../user");
const user_state_1 = require("../user_state");
const user_tx_1 = require("../user_tx");
const debug = debug_1.default('bb:core_sdk');
/**
 * These are events that are only emitted due to changes triggered within the current execution context.
 * Primarily, these are hooked into a broadcast channel to notify other instances of state changes.
 * Treat CoreSdkEvents as events for synchronising state between SDK instances, and SdkEvents for notifying UI changes.
 */
var CoreSdkEvent;
(function (CoreSdkEvent) {
    // The world state db has been updated.
    CoreSdkEvent["UPDATED_WORLD_STATE"] = "CORESDKEVENT_UPDATED_WORLD_STATE";
    // The set of users changed.
    CoreSdkEvent["UPDATED_USERS"] = "CORESDKEVENT_UPDATED_USERS";
    // The state of a user has changed.
    CoreSdkEvent["UPDATED_USER_STATE"] = "CORESDKEVENT_UPDATED_USER_STATE";
})(CoreSdkEvent = exports.CoreSdkEvent || (exports.CoreSdkEvent = {}));
class CoreSdk extends events_1.EventEmitter {
    constructor(leveldb, db, rollupProvider, options) {
        super();
        this.leveldb = leveldb;
        this.db = db;
        this.rollupProvider = rollupProvider;
        this.options = options;
        this.userStates = [];
        this.mutex = !detect_node_1.default ? new idb_mutex_1.default('world-state-mutex') : undefined;
        this.numCPU = !detect_node_1.default ? navigator.hardwareConcurrency || 2 : os_1.default.cpus().length;
        this.sdkStatus = {
            chainId: -1,
            rollupContractAddress: address_1.EthAddress.ZERO,
            syncedToRollup: -1,
            latestRollupId: -1,
            initState: sdk_1.SdkInitState.UNINITIALIZED,
            dataRoot: Buffer.alloc(0),
            dataSize: 0,
            assets: [],
        };
    }
    nextLowestPowerOf2(n) {
        return Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
    }
    async init() {
        if (this.sdkStatus.initState !== sdk_1.SdkInitState.UNINITIALIZED) {
            throw new Error('Sdk is not UNINITIALIZED.');
        }
        this.updateInitState(sdk_1.SdkInitState.INITIALIZING);
        const barretenberg = await wasm_1.BarretenbergWasm.new();
        const numWorkers = this.nextLowestPowerOf2(Math.min(this.numCPU, 8));
        this.workerPool = await wasm_1.WorkerPool.new(barretenberg, numWorkers);
        const noteAlgos = new note_algorithms_1.NoteAlgorithms(barretenberg, this.workerPool.workers[0]);
        this.blake2s = new crypto_1.Blake2s(barretenberg);
        this.pedersen = new crypto_1.PooledPedersen(barretenberg, this.workerPool);
        this.grumpkin = new ecc_1.Grumpkin(barretenberg);
        this.schnorr = new crypto_1.Schnorr(barretenberg);
        this.userFactory = new user_1.UserDataFactory(this.grumpkin);
        this.userStateFactory = new user_state_1.UserStateFactory(this.grumpkin, this.pedersen, noteAlgos, this.db, this.rollupProvider);
        this.worldState = new world_state_1.WorldState(this.leveldb, this.pedersen);
        await this.initUserStates();
        await this.worldState.init();
        const { blockchainStatus: { chainId, rollupContractAddress, assets }, } = await this.getRemoteStatus();
        await this.leveldb.put('rollupContractAddress', rollupContractAddress.toBuffer());
        this.sdkStatus = {
            ...this.sdkStatus,
            chainId,
            rollupContractAddress: rollupContractAddress,
            dataSize: this.worldState.getSize(),
            dataRoot: this.worldState.getRoot(),
            syncedToRollup: +(await this.leveldb.get('syncedToRollup').catch(() => -1)),
            latestRollupId: +(await this.leveldb.get('latestRollupId').catch(() => -1)),
            assets,
        };
        // Create provers
        const crsData = await this.getCrsData(client_proofs_1.JoinSplitProver.circuitSize);
        const pooledProverFactory = new client_proofs_1.PooledProverFactory(this.workerPool, crsData);
        const joinSplitProver = new client_proofs_1.JoinSplitProver(await pooledProverFactory.createUnrolledProver(client_proofs_1.JoinSplitProver.circuitSize));
        this.joinSplitProofCreator = new join_split_proof_creator_1.JoinSplitProofCreator(joinSplitProver, this.worldState, this.grumpkin, this.pedersen, noteAlgos, this.db);
        const accountProver = new client_proofs_1.AccountProver(await pooledProverFactory.createUnrolledProver(client_proofs_1.AccountProver.circuitSize));
        this.accountProofCreator = new account_proof_creator_1.AccountProofCreator(accountProver, this.worldState, this.pedersen);
        await this.createJoinSplitProvingKey(joinSplitProver);
        await this.createAccountProvingKey(accountProver);
        this.updateInitState(sdk_1.SdkInitState.INITIALIZED);
    }
    async getRollupContractAddress() {
        const result = await this.leveldb.get('rollupContractAddress').catch(() => undefined);
        return result ? new address_1.EthAddress(result) : undefined;
    }
    async eraseDb() {
        await this.leveldb.clear();
        await this.db.clear();
    }
    async getCrsData(circuitSize) {
        let crsData = await this.db.getKey(`crs-${circuitSize}`);
        if (!crsData) {
            this.logInitMsgAndDebug('Downloading CRS data...');
            const crs = new crs_1.Crs(circuitSize);
            await crs.download();
            crsData = Buffer.from(crs.getData());
            await this.db.addKey(`crs-${circuitSize}`, crsData);
            debug('done.');
        }
        return crsData;
    }
    /**
     * Shutdown any existing `UserState` instances and wait for them to complete any processing.
     * Load the users from the database and create and initialize their new user states.
     * Emit SdkEvent.UPDATED_USERS to update the UI containing any user lists.
     * Emit SdkEvent.UPDATED_USER_STATE to update the UI for each user.
     * Register for changes to each user state and emit appropriate events.
     * If this SDK instance is handling blocks, start syncing the user states.
     *
     * Public, as it will be called in the event of another instance emitting CoreSdkEvent.UPDATED_USERS.
     */
    async initUserStates() {
        debug('initializing user states...');
        await this.stopSyncingUserStates();
        const users = await this.db.getUsers();
        this.userStates = users.map(u => this.userStateFactory.createUserState(u));
        await Promise.all(this.userStates.map(us => us.init()));
        this.emit(sdk_1.SdkEvent.UPDATED_USERS);
        this.userStates.forEach(us => this.startSyncingUserState(us));
    }
    startSyncingUserState(userState) {
        this.emit(sdk_1.SdkEvent.UPDATED_USER_STATE, userState.getUser().id);
        userState.on(user_state_1.UserStateEvent.UPDATED_USER_STATE, (id, balanceAfter, diff, assetId) => {
            this.emit(CoreSdkEvent.UPDATED_USER_STATE, id, balanceAfter, diff, assetId);
            this.emit(sdk_1.SdkEvent.UPDATED_USER_STATE, id, balanceAfter, diff, assetId);
        });
        if (this.processBlocksPromise) {
            userState.startSync();
        }
    }
    async stopSyncingUserStates() {
        for (const us of this.userStates) {
            us.removeAllListeners();
            await us.stopSync();
        }
    }
    async createJoinSplitProvingKey(joinSplitProver) {
        const start = new Date().getTime();
        const provingKey = await this.db.getKey('join-split-proving-key');
        if (provingKey) {
            this.logInitMsgAndDebug('Loading join-split proving key...');
            await joinSplitProver.loadKey(provingKey);
        }
        else {
            this.logInitMsgAndDebug('Computing join-split proving key...');
            await joinSplitProver.computeKey();
            if (this.options.saveProvingKey) {
                this.logInitMsgAndDebug('Saving join-split proving key...');
                const newProvingKey = await joinSplitProver.getKey();
                await this.db.addKey('join-split-proving-key', newProvingKey);
            }
            debug(`complete: ${new Date().getTime() - start}ms`);
        }
    }
    async createAccountProvingKey(accountProver) {
        const start = new Date().getTime();
        const provingKey = await this.db.getKey('account-proving-key');
        if (provingKey) {
            this.logInitMsgAndDebug('Loading account proving key...');
            await accountProver.loadKey(provingKey);
        }
        else {
            this.logInitMsgAndDebug('Computing account proving key...');
            await accountProver.computeKey();
            if (this.options.saveProvingKey) {
                this.logInitMsgAndDebug('Saving account proving key...');
                const newProvingKey = await accountProver.getKey();
                await this.db.addKey('account-proving-key', newProvingKey);
            }
            debug(`complete: ${new Date().getTime() - start}ms`);
        }
    }
    async destroy() {
        var _a;
        await this.stopSyncingUserStates();
        await this.stopReceivingBlocks();
        await ((_a = this.workerPool) === null || _a === void 0 ? void 0 : _a.destroy());
        await this.leveldb.close();
        await this.db.close();
        this.updateInitState(sdk_1.SdkInitState.DESTROYED);
        this.removeAllListeners();
    }
    updateInitState(initState) {
        this.sdkStatus.initState = initState;
        this.emit(sdk_1.SdkEvent.UPDATED_INIT_STATE, initState);
    }
    getLocalStatus() {
        return { ...this.sdkStatus };
    }
    logInitMsgAndDebug(msg) {
        this.emit(sdk_1.SdkEvent.LOG, msg);
        debug(msg.toLowerCase());
    }
    async getRemoteStatus() {
        return await this.rollupProvider.getStatus();
    }
    async getFee(assetId, transactionType, speed) {
        const { txFees } = await this.getRemoteStatus();
        return txFees[assetId].feeConstants[transactionType] + txFees[assetId].baseFeeQuotes[speed].fee;
    }
    async startReceivingBlocks() {
        if (this.processBlocksPromise) {
            return;
        }
        this.blockQueue = new fifo_1.MemoryFifo();
        this.rollupProvider.on('block', b => this.blockQueue.put(b));
        this.userStates.forEach(us => us.startSync());
        this.processBlocksPromise = this.processBlockQueue();
        await this.sync();
        const syncedToRollup = await this.leveldb.get('syncedToRollup').catch(() => -1);
        await this.rollupProvider.start(+syncedToRollup + 1);
        debug('started processing blocks.');
    }
    async sync() {
        const syncedToRollup = +(await this.leveldb.get('syncedToRollup').catch(() => -1));
        const blocks = await this.rollupProvider.getBlocks(syncedToRollup + 1);
        if (!blocks.length) {
            return;
        }
        const rollups = blocks.map(b => rollup_proof_1.RollupProofData.fromBuffer(b.rollupProofData));
        debug('synchronising data...');
        await this.worldState.processRollups(rollups);
        await this.processAliases(rollups);
        if (rollups.length) {
            await this.updateStatusRollupInfo(rollups[rollups.length - 1]);
        }
        debug('done.');
        // Forward the block on to each UserState for processing.
        for (const block of blocks) {
            this.userStates.forEach(us => us.processBlock(block));
        }
    }
    async updateStatusRollupInfo(rollup) {
        const rollupId = rollup.rollupId;
        const latestRollupId = this.rollupProvider.getLatestRollupId();
        await this.leveldb.put('syncedToRollup', rollupId.toString());
        await this.leveldb.put('latestRollupId', latestRollupId.toString());
        this.sdkStatus.syncedToRollup = rollupId;
        this.sdkStatus.latestRollupId = latestRollupId;
        this.sdkStatus.dataRoot = this.worldState.getRoot();
        this.sdkStatus.dataSize = this.worldState.getSize();
        this.emit(CoreSdkEvent.UPDATED_WORLD_STATE, rollupId, latestRollupId);
        this.emit(sdk_1.SdkEvent.UPDATED_WORLD_STATE, rollupId, latestRollupId);
    }
    async stopReceivingBlocks() {
        var _a;
        await this.rollupProvider.stop();
        this.rollupProvider.removeAllListeners();
        (_a = this.blockQueue) === null || _a === void 0 ? void 0 : _a.cancel();
        await this.processBlocksPromise;
        this.processBlocksPromise = undefined;
    }
    async processBlockQueue() {
        var _a, _b;
        while (true) {
            const block = await this.blockQueue.get();
            if (!block) {
                break;
            }
            // We use a mutex to ensure only one tab will process a block at a time (to prevent merkle tree corruption).
            // This is only a safety mechanism for if two tabs are processing blocks at once. Correct behaviour would
            // be for only one tab to process the block, and to alert the others to sync.
            await ((_a = this.mutex) === null || _a === void 0 ? void 0 : _a.lock());
            await this.worldState.syncFromDb().catch(() => { });
            const rollup = rollup_proof_1.RollupProofData.fromBuffer(block.rollupProofData);
            await this.worldState.processRollup(rollup);
            await this.processAliases([rollup]);
            await this.updateStatusRollupInfo(rollup);
            await ((_b = this.mutex) === null || _b === void 0 ? void 0 : _b.unlock());
            // Forward the block on to each UserState for processing.
            this.userStates.forEach(us => us.processBlock(block));
        }
    }
    async processAliases(rollups) {
        const aliases = rollups
            .map(r => r.innerProofData)
            .flat()
            .filter(ip => ip.proofId === 1)
            .map(ip => {
            const { publicInput, publicOutput, assetId } = ip;
            const { aliasHash, nonce } = user_1.AccountAliasId.fromBuffer(assetId);
            const address = new address_1.GrumpkinAddress(Buffer.concat([publicInput, publicOutput]));
            // debug(`setting alias: ${aliasHash} -> ${address} (${nonce}).`);
            return { aliasHash, address, latestNonce: nonce };
        });
        await this.db.setAliases(aliases);
    }
    /**
     * Called when another instance of the sdk has updated the world state db.
     */
    async notifyWorldStateUpdated() {
        await this.worldState.syncFromDb();
        this.sdkStatus.dataRoot = this.worldState.getRoot();
        this.sdkStatus.dataSize = this.worldState.getSize();
        this.sdkStatus.syncedToRollup = +(await this.leveldb.get('syncedToRollup').catch(() => -1));
        this.sdkStatus.latestRollupId = +(await this.leveldb.get('latestRollupId').catch(() => -1));
        this.emit(sdk_1.SdkEvent.UPDATED_WORLD_STATE, this.sdkStatus.syncedToRollup, this.sdkStatus.latestRollupId);
    }
    /**
     * Called when another instance of the sdk has updated a users state.
     * Call the user state init function to refresh users internal state.
     * Emit an SdkEvent to update the UI.
     */
    async notifyUserStateUpdated(userId, balanceAfter, diff, assetId) {
        var _a;
        await ((_a = this.getUserState(userId)) === null || _a === void 0 ? void 0 : _a.init());
        this.emit(sdk_1.SdkEvent.UPDATED_USER_STATE, userId, balanceAfter, diff, assetId);
    }
    /**
     * Return the latest nonce for a given public key, derived from chain data.
     */
    async getLatestUserNonce(publicKey) {
        return (await this.db.getLatestNonceByAddress(publicKey)) || 0;
    }
    async getAddressFromAlias(alias, nonce) {
        const aliasHash = this.computeAliasHash(alias);
        return this.db.getAddressByAliasHash(aliasHash, nonce);
    }
    async getAccountId(user, nonce) {
        if (typeof user === 'string') {
            const publicKey = address_1.GrumpkinAddress.isAddress(user)
                ? address_1.GrumpkinAddress.fromString(user)
                : await this.getAddressFromAlias(user);
            if (!publicKey) {
                throw new Error('Alias not registered.');
            }
            const accountNonce = nonce !== undefined ? nonce : await this.getLatestUserNonce(publicKey);
            return new user_1.AccountId(publicKey, accountNonce);
        }
        const accountNonce = nonce !== undefined ? nonce : await this.getLatestUserNonce(user);
        return new user_1.AccountId(user, accountNonce);
    }
    async isAliasAvailable(alias) {
        // TODO - request it from server so that we can also check those aliases in unsettled txs.
        const aliasHash = this.computeAliasHash(alias);
        const address = await this.db.getAddressByAliasHash(aliasHash);
        return !address;
    }
    computeAliasHash(alias) {
        return account_id_1.AliasHash.fromAlias(alias, this.blake2s);
    }
    createSchnorrSigner(privateKey) {
        const publicKey = this.derivePublicKey(privateKey);
        return new signer_1.SchnorrSigner(this.schnorr, publicKey, privateKey);
    }
    async createJoinSplitProof(assetId, userId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, signer, noteRecipient, inputOwner, outputOwner) {
        const userState = this.getUserState(userId);
        const { txId, proofData, viewingKeys, depositSigningData } = await this.joinSplitProofCreator.createProof(userState, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, BigInt(0), assetId, signer, noteRecipient, inputOwner, outputOwner);
        const txHash = new tx_hash_1.TxHash(txId);
        const tx = new user_tx_1.UserJoinSplitTx(txHash, userId, assetId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, inputOwner, outputOwner, true, new Date());
        return new proof_output_1.JoinSplitProofOutput(tx, proofData, viewingKeys, publicInput ? depositSigningData : undefined);
    }
    async createAccountTx(signer, alias, nonce, migrate, accountPublicKey, newAccountPublicKey, newSigningPubKey1, newSigningPubKey2) {
        const aliasHash = this.computeAliasHash(alias);
        const accountId = nonce ? new user_1.AccountId(accountPublicKey, nonce) : undefined;
        const accountIndex = accountId ? await this.db.getUserSigningKeyIndex(accountId, signer.getPublicKey()) : undefined;
        return this.accountProofCreator.createAccountTx(signer, aliasHash, nonce, migrate, accountPublicKey, newAccountPublicKey, newSigningPubKey1, newSigningPubKey2, accountIndex);
    }
    async createAccountProof(userId, signer, aliasHash, nonce, migrate, newSigningPublicKey1, newSigningPublicKey2, newAccountPrivateKey) {
        const userState = this.getUserState(userId);
        const { publicKey } = userState.getUser();
        const signerPublicKey = signer.getPublicKey();
        const accountId = nonce ? new user_1.AccountId(publicKey, nonce) : undefined;
        const accountIndex = accountId ? await this.db.getUserSigningKeyIndex(accountId, signerPublicKey) : undefined;
        const newAccountPublicKey = newAccountPrivateKey ? this.derivePublicKey(newAccountPrivateKey) : publicKey;
        const newNonce = nonce + +migrate;
        this.emit(sdk_1.SdkEvent.LOG, 'Generating proof...');
        const rawProofData = await this.accountProofCreator.createProof(signer, aliasHash, nonce, migrate, publicKey, newAccountPublicKey, newSigningPublicKey1, newSigningPublicKey2, accountIndex);
        const { txId } = new client_proofs_1.ProofData(rawProofData);
        const txHash = new tx_hash_1.TxHash(txId);
        const tx = new user_tx_1.UserAccountTx(txHash, new user_1.AccountId(newAccountPublicKey, newNonce), aliasHash, newSigningPublicKey1 === null || newSigningPublicKey1 === void 0 ? void 0 : newSigningPublicKey1.x(), newSigningPublicKey2 === null || newSigningPublicKey2 === void 0 ? void 0 : newSigningPublicKey2.x(), migrate, new Date());
        return new proof_output_1.AccountProofOutput(tx, rawProofData);
    }
    async createDefiProof(bridgeId, userId, depositValue, txFee, signer) {
        const userState = this.getUserState(userId);
        const { txId, proofData, viewingKeys } = await this.joinSplitProofCreator.createProof(userState, BigInt(0), BigInt(0), depositValue + txFee, BigInt(0), BigInt(0), depositValue, bridgeId.inputAssetId, signer, undefined, undefined, undefined, bridgeId);
        const txHash = new tx_hash_1.TxHash(txId);
        const tx = new user_tx_1.UserDefiTx(txHash, userId, bridgeId, depositValue, txFee, new Date());
        return new proof_output_1.DefiProofOutput(tx, proofData, viewingKeys);
    }
    async sendProof(proofOutput, depositSignature) {
        const { tx } = proofOutput;
        const { userId } = tx;
        const userState = this.getUserState(userId);
        const { proofData, viewingKeys } = proofOutput;
        await this.rollupProvider.sendProof({ proofData, viewingKeys, depositSignature });
        await userState.addTx(tx);
        return tx.txHash;
    }
    async isSynchronised() {
        const providerStatus = await this.rollupProvider.getStatus();
        const localDataRoot = this.worldState.getRoot();
        return localDataRoot.equals(providerStatus.blockchainStatus.dataRoot);
    }
    async awaitSynchronised() {
        while (true) {
            try {
                if (await this.isSynchronised()) {
                    return;
                }
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            catch (err) {
                debug(err);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }
    isUserSynching(userId) {
        return this.getUserState(userId).isSyncing();
    }
    async awaitUserSynchronised(userId) {
        await this.getUserState(userId).awaitSynchronised();
    }
    async awaitSettlement(txHash, timeout = 300) {
        const started = new Date().getTime();
        while (true) {
            if (timeout && new Date().getTime() - started > timeout * 1000) {
                throw new Error(`Timeout awaiting tx settlement: ${txHash}`);
            }
            if (await this.db.isUserTxSettled(txHash)) {
                break;
            }
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
    getUserState(userId) {
        const userState = this.userStates.find(us => us.getUser().id.equals(userId));
        if (!userState) {
            throw new Error(`User not found: ${userId}`);
        }
        return userState;
    }
    async userExists(userId) {
        return !!(await this.db.getUser(userId));
    }
    getUserData(userId) {
        return this.getUserState(userId).getUser();
    }
    getUsersData() {
        return this.userStates.map(us => us.getUser());
    }
    derivePublicKey(privateKey) {
        return this.userFactory.derivePublicKey(privateKey);
    }
    async addUser(privateKey, nonce, noSync = false) {
        const publicKey = this.derivePublicKey(privateKey);
        const accountNonce = nonce !== undefined ? nonce : await this.getLatestUserNonce(publicKey);
        let syncedToRollup = -1;
        if (noSync) {
            const { blockchainStatus: { nextRollupId }, } = await this.getRemoteStatus();
            syncedToRollup = nextRollupId - 1;
        }
        const aliasHash = accountNonce > 0 ? await this.db.getAliasHashByAddress(publicKey) : undefined;
        const user = await this.userFactory.createUser(privateKey, accountNonce, aliasHash, syncedToRollup);
        if (await this.db.getUser(user.id)) {
            throw new Error(`User already exists: ${user.id}`);
        }
        return await this.addUserFromUserData(user);
    }
    async addUserFromUserData(user) {
        await this.db.addUser(user);
        const userState = this.userStateFactory.createUserState(user);
        await userState.init();
        this.userStates.push(userState);
        this.emit(CoreSdkEvent.UPDATED_USERS);
        this.emit(sdk_1.SdkEvent.UPDATED_USERS);
        this.startSyncingUserState(userState);
        return user;
    }
    async removeUser(userId) {
        const userState = this.getUserState(userId);
        this.userStates = this.userStates.filter(us => us !== userState);
        userState.stopSync();
        await this.db.removeUser(userId);
        this.emit(CoreSdkEvent.UPDATED_USERS);
        this.emit(sdk_1.SdkEvent.UPDATED_USERS);
    }
    async getSigningKeys(accountId) {
        // TODO - fetch the keys from server so that the account doesn't have to be added locally.
        const keys = await this.db.getUserSigningKeys(accountId);
        return keys.map(k => k.key);
    }
    getBalance(assetId, userId) {
        const userState = this.getUserState(userId);
        return userState.getBalance(assetId);
    }
    getMaxSpendableValue(assetId, userId) {
        const userState = this.getUserState(userId);
        return userState.getMaxSpendableValue(assetId);
    }
    async getSpendableNotes(assetId, userId) {
        const userState = this.getUserState(userId);
        return userState.getSpendableNotes(assetId);
    }
    async getSpendableSum(assetId, userId) {
        const userState = this.getUserState(userId);
        return userState.getSpendableSum(assetId);
    }
    async getJoinSplitTxs(userId) {
        return this.db.getJoinSplitTxs(userId);
    }
    async getAccountTxs(userId) {
        return this.db.getAccountTxs(userId);
    }
    async getDefiTxs(userId) {
        return this.db.getDefiTxs(userId);
    }
    async getNotes(userId) {
        return this.db.getUserNotes(userId);
    }
}
exports.CoreSdk = CoreSdk;
//# sourceMappingURL=data:application/json;base64,