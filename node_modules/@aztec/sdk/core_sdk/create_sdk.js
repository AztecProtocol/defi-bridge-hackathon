"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSdk = void 0;
const tslib_1 = require("tslib");
const rollup_provider_1 = require("@aztec/barretenberg/rollup_provider");
const broadcast_channel_1 = require("broadcast-channel");
const debug_1 = tslib_1.__importDefault(require("debug"));
const detect_node_1 = tslib_1.__importDefault(require("detect-node"));
const fs_1 = require("fs");
const levelup_1 = tslib_1.__importDefault(require("levelup"));
const typeorm_1 = require("typeorm");
const database_1 = require("../database");
const sdk_1 = require("../sdk");
const user_1 = require("../user");
const core_sdk_1 = require("./core_sdk");
const debug = debug_1.default('bb:create_sdk');
function getLevelDb(dbPath = 'data') {
    if (detect_node_1.default) {
        if (dbPath === ':memory:') {
            // eslint-disable-next-line
            return levelup_1.default(require('memdown')());
        }
        else {
            fs_1.mkdirSync(dbPath, { recursive: true });
            // eslint-disable-next-line
            return levelup_1.default(require('leveldown')(`${dbPath}/aztec2-sdk.db`));
        }
    }
    else {
        // eslint-disable-next-line
        return levelup_1.default(require('level-js')('aztec2-sdk'));
    }
}
async function getDb(dbPath = 'data') {
    if (detect_node_1.default) {
        const config = database_1.getOrmConfig(dbPath);
        const connection = await typeorm_1.createConnection(config);
        return new database_1.SQLDatabase(connection);
    }
    else {
        return new database_1.DexieDatabase();
    }
}
async function sdkFactory(hostStr, options) {
    if (options.debug) {
        debug_1.default.enable('bb:*');
    }
    const host = new URL(hostStr);
    const leveldb = getLevelDb(options.dbPath);
    const db = await getDb(options.dbPath);
    await db.init();
    if (options.clearDb) {
        await leveldb.clear();
        await db.clear();
    }
    const rollupProvider = new rollup_provider_1.ServerRollupProvider(host);
    return new core_sdk_1.CoreSdk(leveldb, db, rollupProvider, options);
}
/**
 * Construct an SDK instance. If passed the `syncInstances` option, will bind a channel to various events to
 * share events and synchronise instances. Only one instance will be the "leader" and that instance will receive
 * blocks from the block source and update the (shared) world state.
 */
async function createSdk(hostStr, options = {}) {
    options = { syncInstances: true, saveProvingKey: true, ...options };
    const sdk = await sdkFactory(hostStr, options);
    if (!options.syncInstances) {
        // We're not going to sync across multiple instances. We should start recieving blocks once initialized.
        sdk.on(sdk_1.SdkEvent.UPDATED_INIT_STATE, state => {
            if (state === sdk_1.SdkInitState.INITIALIZED) {
                sdk.startReceivingBlocks();
            }
        });
    }
    else {
        // We're going to sync across multiple instances.
        const channel = new broadcast_channel_1.BroadcastChannel('aztec-sdk');
        // If this instance becomes the leader at any time, and we are initialized, start recieving blocks.
        const elector = broadcast_channel_1.createLeaderElection(channel, { responseTime: 2000 });
        elector.awaitLeadership().then(() => {
            if (sdk.getLocalStatus().initState === sdk_1.SdkInitState.INITIALIZED) {
                sdk.startReceivingBlocks();
            }
            else {
                debug('elected leader, will wait until initialized to process blocks.');
            }
        });
        sdk.on(sdk_1.SdkEvent.UPDATED_INIT_STATE, state => {
            if (state === sdk_1.SdkInitState.INITIALIZED && elector.isLeader) {
                sdk.startReceivingBlocks();
            }
            else if (state === sdk_1.SdkInitState.DESTROYED) {
                channel.close();
            }
        });
        sdk.on(core_sdk_1.CoreSdkEvent.UPDATED_WORLD_STATE, () => channel.postMessage({ name: core_sdk_1.CoreSdkEvent.UPDATED_WORLD_STATE }));
        sdk.on(core_sdk_1.CoreSdkEvent.UPDATED_USERS, () => channel.postMessage({ name: core_sdk_1.CoreSdkEvent.UPDATED_USERS }));
        sdk.on(core_sdk_1.CoreSdkEvent.UPDATED_USER_STATE, (userId, balanceAfter, diff, assetId) => channel.postMessage({
            name: core_sdk_1.CoreSdkEvent.UPDATED_USER_STATE,
            userId: userId.toString(),
            balanceAfter: balanceAfter === null || balanceAfter === void 0 ? void 0 : balanceAfter.toString(),
            diff: diff === null || diff === void 0 ? void 0 : diff.toString(),
            assetId,
        }));
        channel.onmessage = msg => {
            if (sdk.getLocalStatus().initState !== sdk_1.SdkInitState.INITIALIZED) {
                return;
            }
            switch (msg.name) {
                case core_sdk_1.CoreSdkEvent.UPDATED_WORLD_STATE:
                    sdk.notifyWorldStateUpdated();
                    break;
                case core_sdk_1.CoreSdkEvent.UPDATED_USERS:
                    sdk.initUserStates();
                    break;
                case core_sdk_1.CoreSdkEvent.UPDATED_USER_STATE:
                    sdk.notifyUserStateUpdated(user_1.AccountId.fromString(msg.userId), msg.balanceAfter ? BigInt(msg.balanceAfter) : undefined, msg.diff ? BigInt(msg.diff) : undefined, msg.assetId);
                    break;
            }
        };
    }
    return sdk;
}
exports.createSdk = createSdk;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3Nkay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlX3Nkay9jcmVhdGVfc2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSx5RUFBMkU7QUFDM0UseURBQTJFO0FBQzNFLDBEQUFnQztBQUNoQyxzRUFBaUM7QUFDakMsMkJBQStCO0FBQy9CLDhEQUE4QjtBQUM5QixxQ0FBMkM7QUFDM0MsMENBQXVFO0FBQ3ZFLGdDQUFnRDtBQUNoRCxrQ0FBb0M7QUFDcEMseUNBQW1FO0FBRW5FLE1BQU0sS0FBSyxHQUFHLGVBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUUzQyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTTtJQUNqQyxJQUFJLHFCQUFNLEVBQUU7UUFDVixJQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUU7WUFDekIsMkJBQTJCO1lBQzNCLE9BQU8saUJBQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO2FBQU07WUFDTCxjQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkMsMkJBQTJCO1lBQzNCLE9BQU8saUJBQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxNQUFNLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUNqRTtLQUNGO1NBQU07UUFDTCwyQkFBMkI7UUFDM0IsT0FBTyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU07SUFDbEMsSUFBSSxxQkFBTSxFQUFFO1FBQ1YsTUFBTSxNQUFNLEdBQUcsdUJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxNQUFNLDBCQUFnQixDQUFDLE1BQU0sQ0FB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