"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserStateFactory = exports.UserState = exports.UserStateEvent = void 0;
const tslib_1 = require("tslib");
const account_id_1 = require("@aztec/barretenberg/account_id");
const address_1 = require("@aztec/barretenberg/address");
const asset_1 = require("@aztec/barretenberg/asset");
const bridge_id_1 = require("@aztec/barretenberg/bridge_id");
const client_proofs_1 = require("@aztec/barretenberg/client_proofs");
const fifo_1 = require("@aztec/barretenberg/fifo");
const note_algorithms_1 = require("@aztec/barretenberg/note_algorithms");
const rollup_proof_1 = require("@aztec/barretenberg/rollup_proof");
const tx_hash_1 = require("@aztec/barretenberg/tx_hash");
const bigint_buffer_1 = require("@aztec/barretenberg/bigint_buffer");
const debug_1 = tslib_1.__importDefault(require("debug"));
const events_1 = require("events");
const note_picker_1 = require("../note_picker");
const user_tx_1 = require("../user_tx");
const debug = debug_1.default('bb:user_state');
var UserStateEvent;
(function (UserStateEvent) {
    UserStateEvent["UPDATED_USER_STATE"] = "UPDATED_USER_STATE";
})(UserStateEvent = exports.UserStateEvent || (exports.UserStateEvent = {}));
var SyncState;
(function (SyncState) {
    SyncState[SyncState["OFF"] = 0] = "OFF";
    SyncState[SyncState["SYNCHING"] = 1] = "SYNCHING";
    SyncState[SyncState["MONITORING"] = 2] = "MONITORING";
})(SyncState || (SyncState = {}));
class UserState extends events_1.EventEmitter {
    constructor(user, grumpkin, pedersen, noteAlgos, db, rollupProvider) {
        super();
        this.user = user;
        this.grumpkin = grumpkin;
        this.pedersen = pedersen;
        this.noteAlgos = noteAlgos;
        this.db = db;
        this.rollupProvider = rollupProvider;
        this.notePickers = [];
        this.blockQueue = new fifo_1.MemoryFifo();
        this.syncState = SyncState.OFF;
    }
    /**
     * Load/refresh user state.
     */
    async init() {
        this.user = (await this.db.getUser(this.user.id));
        await this.refreshNotePicker();
    }
    /**
     * First handles all historical blocks.
     * Then starts processing blocks added to queue via `processBlock()`.
     */
    async startSync() {
        if (this.syncState !== SyncState.OFF) {
            return;
        }
        const start = new Date().getTime();
        debug(`starting sync for ${this.user.id} from rollup block ${this.user.syncedToRollup + 1}...`);
        this.syncState = SyncState.SYNCHING;
        const blocks = await this.rollupProvider.getBlocks(this.user.syncedToRollup + 1);
        await this.handleBlocks(blocks);
        debug(`sync complete in ${new Date().getTime() - start}ms.`);
        this.syncingPromise = this.blockQueue.process(async (block) => this.handleBlocks([block]));
        this.syncState = SyncState.MONITORING;
    }
    /**
     * Stops processing queued blocks. Blocks until any processing is complete.
     */
    stopSync(flush = false) {
        if (this.syncState === SyncState.OFF) {
            return;
        }
        debug(`stopping sync for ${this.user.id}.`);
        flush ? this.blockQueue.end() : this.blockQueue.cancel();
        this.syncState = SyncState.OFF;
        return this.syncingPromise;
    }
    isSyncing() {
        return this.syncState === SyncState.SYNCHING;
    }
    getUser() {
        return this.user;
    }
    processBlock(block) {
        this.blockQueue.put(block);
    }
    async handleBlocks(blocks) {
        blocks = blocks.filter(b => b.rollupId > this.user.syncedToRollup);
        if (blocks.length == 0) {
            return;
        }
        const balancesBefore = asset_1.AssetIds.map(assetId => this.getBalance(assetId));
        const viewingKeys = Buffer.concat(blocks.map(b => b.viewingKeysData));
        const decryptedNotes = await note_algorithms_1.batchDecryptNotes(viewingKeys, this.user.privateKey, this.noteAlgos, this.grumpkin);
        const rollupProofData = blocks.map(b => rollup_proof_1.RollupProofData.fromBuffer(b.rollupProofData, b.viewingKeysData));
        const proofsWithDecryptedNotes = rollupProofData
            .map(p => p.innerProofData.filter(i => !i.isPadding()))
            .flat()
            .filter(p => [client_proofs_1.ProofId.JOIN_SPLIT, client_proofs_1.ProofId.DEFI_DEPOSIT].includes(p.proofId));
        // Recover tree notes
        const noteCommitments = [];
        const decryptedTreeNote = [];
        proofsWithDecryptedNotes.forEach(({ proofId, noteCommitment1, noteCommitment2 }, i) => {
            if (proofId !== client_proofs_1.ProofId.DEFI_DEPOSIT) {
                noteCommitments.push(noteCommitment1);
                decryptedTreeNote.push(decryptedNotes[i * 2]);
            }
            noteCommitments.push(noteCommitment2);
            decryptedTreeNote.push(decryptedNotes[i * 2 + 1]);
        });
        const treeNotes = note_algorithms_1.recoverTreeNotes(decryptedTreeNote, noteCommitments, this.user.privateKey, this.grumpkin, this.noteAlgos);
        // Recover tree claim notes
        const defiDepositProofs = proofsWithDecryptedNotes.filter(p => p.proofId === client_proofs_1.ProofId.DEFI_DEPOSIT);
        const decryptedClaimNotes = [];
        proofsWithDecryptedNotes.map(({ proofId }, i) => {
            if (proofId === client_proofs_1.ProofId.DEFI_DEPOSIT) {
                decryptedClaimNotes.push(decryptedNotes[i * 2]);
            }
        });
        const treeClaimNotes = note_algorithms_1.recoverTreeClaimNotes(decryptedClaimNotes, defiDepositProofs);
        let treeNoteStartIndex = 0;
        let treeClaimNoteStartIndex = 0;
        for (let blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {
            const block = blocks[blockIndex];
            const proofData = rollupProofData[blockIndex];
            for (let i = 0; i < proofData.innerProofData.length; ++i) {
                const proof = proofData.innerProofData[i];
                if (proof.isPadding()) {
                    continue;
                }
                const noteStartIndex = proofData.dataStartIndex + i * 2;
                switch (proof.proofId) {
                    case client_proofs_1.ProofId.JOIN_SPLIT: {
                        const [note1, note2] = treeNotes.slice(treeNoteStartIndex, treeNoteStartIndex + 2);
                        treeNoteStartIndex += 2;
                        if (!note1 && !note2) {
                            continue;
                        }
                        await this.handleJoinSplitTx(proof, noteStartIndex, block.created, note1, note2);
                        break;
                    }
                    case client_proofs_1.ProofId.ACCOUNT:
                        await this.handleAccountTx(proof, noteStartIndex, block.created);
                        break;
                    case client_proofs_1.ProofId.DEFI_DEPOSIT: {
                        const note = treeNotes[treeNoteStartIndex];
                        treeNoteStartIndex++;
                        const claimNote = treeClaimNotes[treeClaimNoteStartIndex];
                        const decrypted = decryptedClaimNotes[treeClaimNoteStartIndex];
                        treeClaimNoteStartIndex++;
                        if (!claimNote || !note) {
                            // Both notes should be owned by the same user.
                            continue;
                        }
                        await this.handleDefiDepositTx(proof, noteStartIndex, block.interactionResult, decrypted.noteSecret, note);
                        break;
                    }
                    case client_proofs_1.ProofId.DEFI_CLAIM:
                        await this.handleDefiClaimTx(proof, noteStartIndex, block.created);
                        break;
                }
            }
            this.user = { ...this.user, syncedToRollup: proofData.rollupId };
        }
        await this.db.updateUser(this.user);
        asset_1.AssetIds.forEach((assetId, i) => {
            const balanceAfter = this.getBalance(assetId);
            const diff = balanceAfter - balancesBefore[i];
            if (diff) {
                this.emit(UserStateEvent.UPDATED_USER_STATE, this.user.id, balanceAfter, diff, assetId);
            }
        });
        this.emit(UserStateEvent.UPDATED_USER_STATE, this.user.id);
    }
    async handleAccountTx(proof, noteStartIndex, blockCreated) {
        const tx = this.recoverAccountTx(proof, blockCreated);
        if (!tx.userId.equals(this.user.id)) {
            return;
        }
        const accountId = new account_id_1.AccountId(tx.userId.publicKey, tx.userId.nonce);
        if (tx.newSigningPubKey1) {
            debug(`user ${this.user.id} adds signing key ${tx.newSigningPubKey1.toString('hex')}.`);
            await this.db.addUserSigningKey({
                accountId,
                key: tx.newSigningPubKey1,
                treeIndex: noteStartIndex,
            });
        }
        if (tx.newSigningPubKey2) {
            debug(`user ${this.user.id} adds signing key ${tx.newSigningPubKey2.toString('hex')}.`);
            await this.db.addUserSigningKey({
                accountId,
                key: tx.newSigningPubKey2,
                treeIndex: noteStartIndex + 1,
            });
        }
        if (!this.user.aliasHash || !this.user.aliasHash.equals(tx.aliasHash)) {
            debug(`user ${this.user.id} updates alias hash ${tx.aliasHash.toString()}.`);
            this.user = { ...this.user, aliasHash: tx.aliasHash };
            await this.db.updateUser(this.user);
        }
        const txHash = new tx_hash_1.TxHash(proof.txId);
        const savedTx = await this.db.getAccountTx(txHash);
        if (savedTx) {
            debug(`settling account tx: ${txHash.toString()}`);
            await this.db.settleAccountTx(txHash, blockCreated);
        }
        else {
            debug(`recovered account tx: ${txHash.toString()}`);
            await this.db.addAccountTx(tx);
        }
    }
    async handleJoinSplitTx(proof, noteStartIndex, blockCreated, note1, note2) {
        const { noteCommitment1, noteCommitment2, nullifier1, nullifier2 } = proof;
        const noteCommitment = await this.processNewNote(noteStartIndex, noteCommitment1, note1);
        const changeNote = await this.processNewNote(noteStartIndex + 1, noteCommitment2, note2);
        if (!noteCommitment && !changeNote) {
            // Neither note was decrypted (change note should always belong to us for txs we created).
            return;
        }
        const destroyedNote1 = await this.nullifyNote(nullifier1);
        const destroyedNote2 = await this.nullifyNote(nullifier2);
        await this.refreshNotePicker();
        const txHash = new tx_hash_1.TxHash(proof.txId);
        const savedTx = await this.db.getJoinSplitTx(txHash, this.user.id);
        if (savedTx) {
            debug(`settling tx: ${savedTx.txHash.toString()}`);
            await this.db.settleJoinSplitTx(txHash, this.user.id, blockCreated);
        }
        else {
            const tx = this.recoverJoinSplitTx(proof, blockCreated, noteCommitment, changeNote, destroyedNote1, destroyedNote2);
            debug(`recovered tx: ${tx.txHash.toString()}`);
            await this.db.addJoinSplitTx(tx);
        }
    }
    async handleDefiDepositTx(proof, noteStartIndex, interactionResult, claimNoteSecret, treeNote) {
        const { txId, noteCommitment1, noteCommitment2 } = proof;
        const noteCommitment = await this.processNewNote(noteStartIndex + 1, noteCommitment2, treeNote);
        if (!noteCommitment) {
            // Owned by the account with a different nonce.
            return;
        }
        const { bridgeId, depositValue } = new rollup_proof_1.DefiDepositProofData(proof);
        const txHash = new tx_hash_1.TxHash(txId);
        const { totalInputValue, totalOutputValueA, totalOutputValueB, result } = interactionResult.find(r => r.bridgeId.equals(bridgeId));
        const outputValueA = !result ? BigInt(0) : (totalOutputValueA * depositValue) / totalInputValue;
        const outputValueB = !result ? BigInt(0) : (totalOutputValueB * depositValue) / totalInputValue;
        await this.addClaim(noteStartIndex, txHash, noteCommitment1, claimNoteSecret);
        const { nullifier1, nullifier2 } = proof;
        const destroyedNote1 = await this.nullifyNote(nullifier1);
        const destroyedNote2 = await this.nullifyNote(nullifier2);
        await this.refreshNotePicker();
        const savedTx = await this.db.getDefiTx(txHash);
        if (savedTx) {
            debug(`settling defi tx: ${txHash.toString()}`);
            await this.db.updateDefiTx(txHash, outputValueA, outputValueB);
        }
        else {
            const tx = this.recoverDefiTx(proof, outputValueA, outputValueB, noteCommitment, destroyedNote1, destroyedNote2);
            debug(`recovered defi tx: ${txHash.toString()}`);
            await this.db.addDefiTx(tx);
        }
    }
    async handleDefiClaimTx(proof, noteStartIndex, blockCreated) {
        const { nullifier1 } = proof;
        const claim = await this.db.getClaim(nullifier1);
        if (!(claim === null || claim === void 0 ? void 0 : claim.owner.equals(this.user.id))) {
            return;
        }
        const { txHash, secret, owner } = claim;
        const { noteCommitment1, noteCommitment2 } = proof;
        const { bridgeId, depositValue, outputValueA, outputValueB } = (await this.db.getDefiTx(txHash));
        if (!outputValueA && !outputValueB) {
            const treeNote = new note_algorithms_1.TreeNote(owner.publicKey, depositValue, bridgeId.inputAssetId, owner.nonce, secret);
            await this.processNewNote(noteStartIndex, noteCommitment1, treeNote);
        }
        if (outputValueA) {
            const treeNote = new note_algorithms_1.TreeNote(owner.publicKey, outputValueA, bridgeId.outputAssetIdA, owner.nonce, secret);
            await this.processNewNote(noteStartIndex, noteCommitment1, treeNote);
        }
        if (outputValueB) {
            const treeNote = new note_algorithms_1.TreeNote(owner.publicKey, outputValueB, bridgeId.outputAssetIdB, owner.nonce, secret);
            await this.processNewNote(noteStartIndex + 1, noteCommitment2, treeNote);
        }
        await this.refreshNotePicker();
        await this.db.settleDefiTx(txHash, blockCreated);
    }
    async processNewNote(index, dataEntry, treeNote) {
        if (!treeNote) {
            return;
        }
        const savedNote = await this.db.getNote(index);
        if (savedNote) {
            return savedNote.owner.equals(this.user.id) ? savedNote : undefined;
        }
        const { noteSecret, value, assetId, nonce } = treeNote;
        if (nonce !== this.user.id.nonce) {
            return;
        }
        const nullifier = this.noteAlgos.valueNoteNullifier(dataEntry, index, this.user.privateKey);
        const note = {
            index,
            assetId,
            value,
            dataEntry,
            secret: noteSecret,
            nullifier,
            nullified: false,
            owner: this.user.id,
        };
        if (value) {
            await this.db.addNote(note);
            debug(`user ${this.user.id} successfully decrypted note at index ${index} with value ${value}.`);
        }
        return note;
    }
    async nullifyNote(nullifier) {
        const note = await this.db.getNoteByNullifier(nullifier);
        if (!note || !note.owner.equals(this.user.id)) {
            return;
        }
        await this.db.nullifyNote(note.index);
        debug(`user ${this.user.id} nullified note at index ${note.index} with value ${note.value}.`);
        return note;
    }
    async addClaim(index, txHash, dataEntry, noteSecret) {
        const nullifier = this.noteAlgos.claimNoteNullifier(dataEntry, index);
        await this.db.addClaim({
            txHash,
            secret: noteSecret,
            nullifier,
            owner: this.user.id,
        });
        debug(`user ${this.user.id} successfully decrypted claim note at index ${index}.`);
    }
    recoverJoinSplitTx(proof, blockCreated, noteCommitment, changeNote, destroyedNote1, destroyedNote2) {
        const assetId = proof.assetId.readUInt32BE(28);
        const noteValue = (note) => (note ? note.value : BigInt(0));
        const privateInput = noteValue(destroyedNote1) + noteValue(destroyedNote2);
        const recipientPrivateOutput = noteValue(noteCommitment);
        const senderPrivateOutput = noteValue(changeNote);
        const publicInput = bigint_buffer_1.toBigIntBE(proof.publicInput);
        const publicOutput = bigint_buffer_1.toBigIntBE(proof.publicOutput);
        const nonEmptyAddress = (address) => !address.equals(Buffer.alloc(address.length)) ? new address_1.EthAddress(address) : undefined;
        const inputOwner = nonEmptyAddress(proof.inputOwner);
        const outputOwner = nonEmptyAddress(proof.outputOwner);
        return new user_tx_1.UserJoinSplitTx(new tx_hash_1.TxHash(proof.txId), this.user.id, assetId, publicInput, publicOutput, privateInput, recipientPrivateOutput, senderPrivateOutput, inputOwner, outputOwner, !!changeNote, new Date(), blockCreated);
    }
    recoverAccountTx(proof, blockCreated) {
        const { txId, publicInput, publicOutput, assetId, inputOwner, outputOwner, nullifier1 } = proof;
        const txHash = new tx_hash_1.TxHash(txId);
        const publicKey = new address_1.GrumpkinAddress(Buffer.concat([publicInput, publicOutput]));
        const accountAliasId = account_id_1.AccountAliasId.fromBuffer(assetId);
        const { aliasHash, nonce } = accountAliasId;
        const userId = new account_id_1.AccountId(publicKey, nonce);
        const nonEmptyKey = (address) => (!address.equals(Buffer.alloc(32)) ? address : undefined);
        const newSigningPubKey1 = nonEmptyKey(inputOwner);
        const newSigningPubKey2 = nonEmptyKey(outputOwner);
        const migrated = nonce !== 0 && nullifier1.equals(client_proofs_1.computeAccountAliasIdNullifier(accountAliasId, this.pedersen));
        return new user_tx_1.UserAccountTx(txHash, userId, aliasHash, newSigningPubKey1, newSigningPubKey2, migrated, new Date(), blockCreated);
    }
    recoverDefiTx(proof, outputValueA, outputValueB, noteCommitment, destroyedNote1, destroyedNote2) {
        const { txId, assetId, publicOutput } = proof;
        const txHash = new tx_hash_1.TxHash(txId);
        const bridgeId = bridge_id_1.BridgeId.fromBuffer(assetId);
        const depositValue = bigint_buffer_1.toBigIntBE(publicOutput);
        const noteValue = (note) => (note ? note.value : BigInt(0));
        const privateInput = noteValue(destroyedNote1) + noteValue(destroyedNote2);
        const privateOutput = noteValue(noteCommitment);
        const txFee = privateInput - privateOutput - depositValue;
        return new user_tx_1.UserDefiTx(txHash, this.user.id, bridgeId, depositValue, txFee, new Date(), outputValueA, outputValueB);
    }
    async refreshNotePicker() {
        const notesMap = Array(asset_1.AssetIds.length)
            .fill(0)
            .map(() => []);
        const notes = await this.db.getUserNotes(this.user.id);
        notes.forEach(note => notesMap[note.assetId].push(note));
        this.notePickers = asset_1.AssetIds.map(assetId => new note_picker_1.NotePicker(notesMap[assetId]));
    }
    async pickNotes(assetId, value) {
        const pendingNullifiers = await this.rollupProvider.getPendingNoteNullifiers();
        return this.notePickers[assetId].pick(value, pendingNullifiers);
    }
    async getSpendableNotes(assetId) {
        const pendingNullifiers = await this.rollupProvider.getPendingNoteNullifiers();
        return this.notePickers[assetId].getSpendableNotes(pendingNullifiers).notes;
    }
    async getSpendableSum(assetId) {
        const pendingNullifiers = await this.rollupProvider.getPendingNoteNullifiers();
        return this.notePickers[assetId].getSpendableSum(pendingNullifiers);
    }
    async getMaxSpendableValue(assetId) {
        const pendingNullifiers = await this.rollupProvider.getPendingNoteNullifiers();
        return this.notePickers[assetId].getMaxSpendableValue(pendingNullifiers);
    }
    getBalance(assetId) {
        return this.notePickers[assetId].getSum();
    }
    async addTx(tx) {
        switch (tx.proofId) {
            case client_proofs_1.ProofId.JOIN_SPLIT:
                debug(`adding join split tx: ${tx.txHash}`);
                await this.db.addJoinSplitTx(tx);
                break;
            case client_proofs_1.ProofId.ACCOUNT:
                debug(`adding account tx: ${tx.txHash}`);
                await this.db.addAccountTx(tx);
                break;
            case client_proofs_1.ProofId.DEFI_DEPOSIT:
                debug(`adding defi tx: ${tx.txHash}`);
                await this.db.addDefiTx(tx);
                break;
        }
        this.emit(UserStateEvent.UPDATED_USER_STATE, this.user.id);
    }
    async awaitSynchronised() {
        while (this.syncState === SyncState.SYNCHING) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
}
exports.UserState = UserState;
class UserStateFactory {
    constructor(grumpkin, pedersen, noteAlgos, db, rollupProvider) {
        this.grumpkin = grumpkin;
        this.pedersen = pedersen;
        this.noteAlgos = noteAlgos;
        this.db = db;
        this.rollupProvider = rollupProvider;
    }
    createUserState(user) {
        return new UserState(user, this.grumpkin, this.pedersen, this.noteAlgos, this.db, this.rollupProvider);
    }
}
exports.UserStateFactory = UserStateFactory;
//# sourceMappingURL=data:application/json;base64,