"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
function delay(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
exports.DEFAULT_EXPIRY = 10 * 1000;
/**
 * A mutex for coordinating cross-tab activities.
 */
var Mutex = (function () {
    /**
     * Initialize the mutex.
     *
     * @param name - Name of the mutex.
     * @param db - Existing database to use. If null, an IndexedDB database named
     *   'idb-mutex' is created. If an existing database is provided it must have
     *   an object store name matching `options.objectStoreName`.
     * @param options
     */
    function Mutex(name, db, options) {
        // Generate a good-enough random identifier for this instance.
        this._id = Math.round(Math.random() * 10000).toString();
        this._objectStoreName = 'mutexes';
        if (options && options.objectStoreName) {
            this._objectStoreName = options.objectStoreName;
        }
        this._db = db || this._initDb(this._objectStoreName);
        this._name = name;
        this._expiry = (options && options.expiry) ? options.expiry : exports.DEFAULT_EXPIRY;
        this._spinDelay = (options && options.spinDelay) ? options.spinDelay : 50;
    }
    /**
     * Acquire the lock.
     *
     * If no other instance currently holds the lock, the previous lock has expired
     * or the current instance already holds the lock, then this resolves
     * immediately.
     *
     * Otherwise `lock()` waits until the current lock owner releases the lock or
     * it expires.
     *
     * Returns a Promise that resolves when the lock has been acquired.
     */
    Mutex.prototype.lock = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!true) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._tryLock()];
                    case 1:
                        if (_a.sent()) {
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, delay(this._spinDelay)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 0];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Release the lock.
     *
     * Releases the lock, regardless of who currently owns it or whether it is
     * currently locked.
     */
    Mutex.prototype.unlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var db, tx, store, unlockReq;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(this._objectStoreName, 'readwrite');
                        store = tx.objectStore(this._objectStoreName);
                        unlockReq = store.put({ expiresAt: 0, owner: null }, this._name);
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                unlockReq.onsuccess = function () { return resolve(); };
                                unlockReq.onerror = function () { return reject(unlockReq.error); };
                            })];
                }
            });
        });
    };
    Mutex.prototype._initDb = function (objectStoreName) {
        // nb. The DB version is explicitly specified as otherwise IE 11 fails to
        // run the `onupgradeneeded` handler.
        return new Promise(function (resolve, reject) {
            var openReq = indexedDB.open('idb-mutex', 1);
            openReq.onupgradeneeded = function () {
                var db = openReq.result;
                db.createObjectStore(objectStoreName);
            };
            openReq.onsuccess = function () { return resolve(openReq.result); };
            openReq.onerror = function () { return reject(openReq.error); };
        });
    };
    Mutex.prototype._tryLock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var db, tx, store;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(this._objectStoreName, 'readwrite');
                        store = tx.objectStore(this._objectStoreName);
                        // We use the `onsuccess` and `onerror` callbacks rather than writing a
                        // generic request Promise-ifying function because of issues with
                        // transactions being auto-closed when actions within a transaction span
                        // Promise callbacks.
                        //
                        // See https://github.com/jakearchibald/idb/blob/2c601b060dc184b9241f00b91af94ae966704ee2/README.md#transaction-lifetime
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var lockMetaReq = store.get(_this._name);
                                lockMetaReq.onsuccess = function () {
                                    var lockMeta = lockMetaReq.result;
                                    if (!lockMeta || lockMeta.owner === _this._id || lockMeta.expiresAt < Date.now()) {
                                        var newLockMeta = {
                                            owner: _this._id,
                                            expiresAt: Date.now() + _this._expiry,
                                        };
                                        var writeReq_1 = store.put(newLockMeta, _this._name);
                                        writeReq_1.onsuccess = function () { return resolve(true); };
                                        writeReq_1.onerror = function () { return reject(writeReq_1.error); };
                                    }
                                    else {
                                        resolve(false);
                                    }
                                };
                                lockMetaReq.onerror = function () { return reject(lockMetaReq.error); };
                            })];
                }
            });
        });
    };
    return Mutex;
}());
exports.default = Mutex;
